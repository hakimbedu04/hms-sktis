//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HMS.SKTIS.BusinessObjects
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SKTISEntities : DbContext
    {
        public SKTISEntities()
            : base("name=SKTISEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ExeActualWorkHour> ExeActualWorkHours { get; set; }
        public virtual DbSet<ExeTPOActualWorkHour> ExeTPOActualWorkHours { get; set; }
        public virtual DbSet<ExeTPOProduction> ExeTPOProductions { get; set; }
        public virtual DbSet<MntcEquipmentFulfillment> MntcEquipmentFulfillments { get; set; }
        public virtual DbSet<MntcEquipmentItemConvert> MntcEquipmentItemConverts { get; set; }
        public virtual DbSet<MntcEquipmentItemDisposal> MntcEquipmentItemDisposals { get; set; }
        public virtual DbSet<MntcEquipmentMovement> MntcEquipmentMovements { get; set; }
        public virtual DbSet<MntcEquipmentQualityInspection> MntcEquipmentQualityInspections { get; set; }
        public virtual DbSet<MntcEquipmentRepair> MntcEquipmentRepairs { get; set; }
        public virtual DbSet<MntcInventory> MntcInventories { get; set; }
        public virtual DbSet<MntcRequestToLocation> MntcRequestToLocations { get; set; }
        public virtual DbSet<MstADTemp> MstADTemps { get; set; }
        public virtual DbSet<MstClosingPayroll> MstClosingPayrolls { get; set; }
        public virtual DbSet<MstGenBrand> MstGenBrands { get; set; }
        public virtual DbSet<MstGenBrandGroup> MstGenBrandGroups { get; set; }
        public virtual DbSet<MstGenBrandPackageItem> MstGenBrandPackageItems { get; set; }
        public virtual DbSet<MstGenBrandPkgMapping> MstGenBrandPkgMappings { get; set; }
        public virtual DbSet<MstGenEmpStatu> MstGenEmpStatus { get; set; }
        public virtual DbSet<MstGenHoliday> MstGenHolidays { get; set; }
        public virtual DbSet<MstGenList> MstGenLists { get; set; }
        public virtual DbSet<MstGenLocation> MstGenLocations { get; set; }
        public virtual DbSet<MstGenLocStatu> MstGenLocStatus { get; set; }
        public virtual DbSet<MstGenMaterial> MstGenMaterials { get; set; }
        public virtual DbSet<MstGenProcess> MstGenProcesses { get; set; }
        public virtual DbSet<MstGenStandardHour> MstGenStandardHours { get; set; }
        public virtual DbSet<MstGenWeek> MstGenWeeks { get; set; }
        public virtual DbSet<MstMntcConvert> MstMntcConverts { get; set; }
        public virtual DbSet<MstMntcItem> MstMntcItems { get; set; }
        public virtual DbSet<MstMntcItemLocation> MstMntcItemLocations { get; set; }
        public virtual DbSet<MstPlantUnit> MstPlantUnits { get; set; }
        public virtual DbSet<MstTPOFeeRate> MstTPOFeeRates { get; set; }
        public virtual DbSet<MstTPOInfo> MstTPOInfoes { get; set; }
        public virtual DbSet<MstTPOPackage> MstTPOPackages { get; set; }
        public virtual DbSet<MstTPOProductionGroup> MstTPOProductionGroups { get; set; }
        public virtual DbSet<PlanPlantIndividualCapacityReference> PlanPlantIndividualCapacityReferences { get; set; }
        public virtual DbSet<PlanPlantLineBalancing> PlanPlantLineBalancings { get; set; }
        public virtual DbSet<PlanPlantTargetProductionKelompok> PlanPlantTargetProductionKelompoks { get; set; }
        public virtual DbSet<PlanPlantWorkerBalancing> PlanPlantWorkerBalancings { get; set; }
        public virtual DbSet<PlanTargetProductionUnit> PlanTargetProductionUnits { get; set; }
        public virtual DbSet<ProductAdjustment> ProductAdjustments { get; set; }
        public virtual DbSet<TPOFeeGLAccount> TPOFeeGLAccounts { get; set; }
        public virtual DbSet<UtilDelegation> UtilDelegations { get; set; }
        public virtual DbSet<UtilFlow> UtilFlows { get; set; }
        public virtual DbSet<UtilFunction> UtilFunctions { get; set; }
        public virtual DbSet<UtilResponsibility> UtilResponsibilities { get; set; }
        public virtual DbSet<UtilResponsibilityRule> UtilResponsibilityRules { get; set; }
        public virtual DbSet<UtilRole> UtilRoles { get; set; }
        public virtual DbSet<UtilRolesFunction> UtilRolesFunctions { get; set; }
        public virtual DbSet<UtilRule> UtilRules { get; set; }
        public virtual DbSet<UtilTransactionLog> UtilTransactionLogs { get; set; }
        public virtual DbSet<UtilUsersResponsibility> UtilUsersResponsibilities { get; set; }
        public virtual DbSet<WorkerAssignmentRemoval> WorkerAssignmentRemovals { get; set; }
        public virtual DbSet<ExePlantCKSubmit> ExePlantCKSubmits { get; set; }
        public virtual DbSet<ExeReportEMSSubmitted> ExeReportEMSSubmitteds { get; set; }
        public virtual DbSet<BrandCodeByLocationView> BrandCodeByLocationViews { get; set; }
        public virtual DbSet<EquipmentRequirementView> EquipmentRequirementViews { get; set; }
        public virtual DbSet<ExePlantWorkerAbsenteeismView> ExePlantWorkerAbsenteeismViews { get; set; }
        public virtual DbSet<GetLocationByResponsibilityView> GetLocationByResponsibilityViews { get; set; }
        public virtual DbSet<InventoryByStatusView> InventoryByStatusViews { get; set; }
        public virtual DbSet<MaintenanceEquipmentFulfillmentItemDetailView> MaintenanceEquipmentFulfillmentItemDetailViews { get; set; }
        public virtual DbSet<MaintenanceEquipmentStockView> MaintenanceEquipmentStockViews { get; set; }
        public virtual DbSet<MaintenanceExecutionInventoryView> MaintenanceExecutionInventoryViews { get; set; }
        public virtual DbSet<MntcInventoryAll> MntcInventoryAlls { get; set; }
        public virtual DbSet<MntcInventoryDeltaView> MntcInventoryDeltaViews { get; set; }
        public virtual DbSet<MntcRepairItemUsageView> MntcRepairItemUsageViews { get; set; }
        public virtual DbSet<MstMntcConvertGetItemDestinationView> MstMntcConvertGetItemDestinationViews { get; set; }
        public virtual DbSet<MstPlantProductionGroupView> MstPlantProductionGroupViews { get; set; }
        public virtual DbSet<MstPlantUnitView> MstPlantUnitViews { get; set; }
        public virtual DbSet<PlanPlantTargetProductionKelompokView> PlanPlantTargetProductionKelompokViews { get; set; }
        public virtual DbSet<TPOFeeCalculation> TPOFeeCalculations { get; set; }
        public virtual DbSet<TPOFeeCalculationPlan> TPOFeeCalculationPlans { get; set; }
        public virtual DbSet<ExeProductionEntryRelease> ExeProductionEntryReleases { get; set; }
        public virtual DbSet<ExePlantWorkerBalancingSingle> ExePlantWorkerBalancingSingles { get; set; }
        public virtual DbSet<ExePlantWorkerBalancingMulti> ExePlantWorkerBalancingMultis { get; set; }
        public virtual DbSet<EquipmentRequestView> EquipmentRequestViews { get; set; }
        public virtual DbSet<TpoFeePlanView> TpoFeePlanViews { get; set; }
        public virtual DbSet<UtilFlowFunctionView> UtilFlowFunctionViews { get; set; }
        public virtual DbSet<TPOFeeExeGLAccruedListView> TPOFeeExeGLAccruedListViews { get; set; }
        public virtual DbSet<ExePlantActualWorkHoursView> ExePlantActualWorkHoursViews { get; set; }
        public virtual DbSet<MstProcessBrandView> MstProcessBrandViews { get; set; }
        public virtual DbSet<MstTableauReport> MstTableauReports { get; set; }
        public virtual DbSet<UtilRolesFunctionView> UtilRolesFunctionViews { get; set; }
        public virtual DbSet<TPOFeeSettingCalculation> TPOFeeSettingCalculations { get; set; }
        public virtual DbSet<ExeProductionEntryReleaseTransactLogsView> ExeProductionEntryReleaseTransactLogsViews { get; set; }
        public virtual DbSet<ExeReportDailyProductionAchievementView> ExeReportDailyProductionAchievementViews { get; set; }
        public virtual DbSet<MstGenProcessSetting> MstGenProcessSettings { get; set; }
        public virtual DbSet<MstGenProcessSettingsLocation> MstGenProcessSettingsLocations { get; set; }
        public virtual DbSet<ProcessSettingsAndLocationView> ProcessSettingsAndLocationViews { get; set; }
        public virtual DbSet<TPOFeeHdr> TPOFeeHdrs { get; set; }
        public virtual DbSet<TPOFeeHdrPlan> TPOFeeHdrPlans { get; set; }
        public virtual DbSet<ExeReportByProcess> ExeReportByProcesses { get; set; }
        public virtual DbSet<NewsInfo> NewsInfoes { get; set; }
        public virtual DbSet<ExeReportProdStockProcessView> ExeReportProdStockProcessViews { get; set; }
        public virtual DbSet<MstPlantAbsentType> MstPlantAbsentTypes { get; set; }
        public virtual DbSet<TPOTargetProductionKelompokView> TPOTargetProductionKelompokViews { get; set; }
        public virtual DbSet<ProductionCard> ProductionCards { get; set; }
        public virtual DbSet<ExeTPOProductionView> ExeTPOProductionViews { get; set; }
        public virtual DbSet<PlanTPOTargetProductionKelompok> PlanTPOTargetProductionKelompoks { get; set; }
        public virtual DbSet<PlanTPOTargetProductionKelompokBox> PlanTPOTargetProductionKelompokBoxes { get; set; }
        public virtual DbSet<ExeProductionEntryMinimumValue> ExeProductionEntryMinimumValues { get; set; }
        public virtual DbSet<ExeMaterialUsageView> ExeMaterialUsageViews { get; set; }
        public virtual DbSet<WagesProductionCardApprovalView> WagesProductionCardApprovalViews { get; set; }
        public virtual DbSet<ExeReportByStatusView> ExeReportByStatusViews { get; set; }
        public virtual DbSet<ExeReportByStatusWeeklyView> ExeReportByStatusWeeklyViews { get; set; }
        public virtual DbSet<MntcEquipmentRequest> MntcEquipmentRequests { get; set; }
        public virtual DbSet<TPOFeeProductionDaily> TPOFeeProductionDailies { get; set; }
        public virtual DbSet<ExeReportByStatusMonthlyView> ExeReportByStatusMonthlyViews { get; set; }
        public virtual DbSet<TPOFeeProductionDailyPlan> TPOFeeProductionDailyPlans { get; set; }
        public virtual DbSet<ExeMaterialUsage> ExeMaterialUsages { get; set; }
        public virtual DbSet<WagesProductionCardApprovalDetailView> WagesProductionCardApprovalDetailViews { get; set; }
        public virtual DbSet<EMSSourceDataBrandView> EMSSourceDataBrandViews { get; set; }
        public virtual DbSet<PlanTmpWeeklyProductionPlanning> PlanTmpWeeklyProductionPlannings { get; set; }
        public virtual DbSet<PlanWeeklyProductionPlanning> PlanWeeklyProductionPlannings { get; set; }
        public virtual DbSet<TargetProductionUnitPerBoxView> TargetProductionUnitPerBoxViews { get; set; }
        public virtual DbSet<TargetProductionUnitView> TargetProductionUnitViews { get; set; }
        public virtual DbSet<AvailabelPositionNumberGroup> AvailabelPositionNumberGroups { get; set; }
        public virtual DbSet<UserADResponsibilityRolesView> UserADResponsibilityRolesViews { get; set; }
        public virtual DbSet<AdjustmentTypeByBrandCode> AdjustmentTypeByBrandCodes { get; set; }
        public virtual DbSet<ExeReportByGroupsWeekly> ExeReportByGroupsWeeklies { get; set; }
        public virtual DbSet<ExeReportByGroupsMonthly> ExeReportByGroupsMonthlies { get; set; }
        public virtual DbSet<MaintenanceItemConversionDestinationView> MaintenanceItemConversionDestinationViews { get; set; }
        public virtual DbSet<MaintenanceEquipmentFulfillmentDetailView> MaintenanceEquipmentFulfillmentDetailViews { get; set; }
        public virtual DbSet<MntcRepairItemUsage> MntcRepairItemUsages { get; set; }
        public virtual DbSet<MntcInventoryAdjustment> MntcInventoryAdjustments { get; set; }
        public virtual DbSet<TPOFeeExeActualView> TPOFeeExeActualViews { get; set; }
        public virtual DbSet<ExePlantProductionEntry> ExePlantProductionEntries { get; set; }
        public virtual DbSet<ExePlantProductionEntryVerification> ExePlantProductionEntryVerifications { get; set; }
        public virtual DbSet<ExeProductionEntryPrintView> ExeProductionEntryPrintViews { get; set; }
        public virtual DbSet<PlanPlantIndividualCapacityByReferenceView> PlanPlantIndividualCapacityByReferenceViews { get; set; }
        public virtual DbSet<ExePlantProductionEntryVerificationView> ExePlantProductionEntryVerificationViews { get; set; }
        public virtual DbSet<ExeTPOProductionEntryVerification> ExeTPOProductionEntryVerifications { get; set; }
        public virtual DbSet<ExeTPOProductionEntryVerificationView> ExeTPOProductionEntryVerificationViews { get; set; }
        public virtual DbSet<MaintenanceEquipmentFulfillmentView> MaintenanceEquipmentFulfillmentViews { get; set; }
        public virtual DbSet<PlanPlantGroupShift> PlanPlantGroupShifts { get; set; }
        public virtual DbSet<ExeReportByProcessView> ExeReportByProcessViews { get; set; }
        public virtual DbSet<ExePlantWorkerAbsenteeism> ExePlantWorkerAbsenteeism { get; set; }
        public virtual DbSet<ExePlantWorkerAssignment> ExePlantWorkerAssignments { get; set; }
        public virtual DbSet<MstPlantProductionGroup> MstPlantProductionGroups { get; set; }
        public virtual DbSet<MstPlantEmpJobsDataAcv> MstPlantEmpJobsDataAcvs { get; set; }
        public virtual DbSet<MstPlantEmpJobsDataAll> MstPlantEmpJobsDataAlls { get; set; }
        public virtual DbSet<PlanPlantAllocation> PlanPlantAllocations { get; set; }
        public virtual DbSet<PlanPlantIndividualCapacityWorkHour> PlanPlantIndividualCapacityWorkHours { get; set; }
        public virtual DbSet<UtilUserResponsibilitiesRoleView> UtilUserResponsibilitiesRoleViews { get; set; }
        public virtual DbSet<ExeReportByGroup> ExeReportByGroups { get; set; }
        public virtual DbSet<TPOFeeApprovalView> TPOFeeApprovalViews { get; set; }
        public virtual DbSet<PlanPlantWIPDetail> PlanPlantWIPDetails { get; set; }
        public virtual DbSet<TPOFeeReportsProductionDailyView> TPOFeeReportsProductionDailyViews { get; set; }
        public virtual DbSet<QueueCopyDeltaView> QueueCopyDeltaViews { get; set; }
        public virtual DbSet<TemporaryTableViewInventory> TemporaryTableViewInventories { get; set; }
        public virtual DbSet<ViewInventory> ViewInventories { get; set; }
        public virtual DbSet<TPOGenerateP1TemplateView> TPOGenerateP1TemplateView { get; set; }
        public virtual DbSet<MntcFulfillmentView> MntcFulfillmentViews { get; set; }
        public virtual DbSet<TPOFeeReportsProductionWeeklyView> TPOFeeReportsProductionWeeklyViews { get; set; }
        public virtual DbSet<WagesProductionCardApprovalDetailViewGroup> WagesProductionCardApprovalDetailViewGroups { get; set; }
    
        [DbFunction("SKTISEntities", "GetEquipmenrRequiremenrReport2")]
        public virtual IQueryable<GetEquipmenrRequiremenrReport2_Result> GetEquipmenrRequiremenrReport2(string locationcode, string brandGroupCodeFrom, string brandGroupCodeTo, Nullable<System.DateTime> date)
        {
            var locationcodeParameter = locationcode != null ?
                new ObjectParameter("locationcode", locationcode) :
                new ObjectParameter("locationcode", typeof(string));
    
            var brandGroupCodeFromParameter = brandGroupCodeFrom != null ?
                new ObjectParameter("brandGroupCodeFrom", brandGroupCodeFrom) :
                new ObjectParameter("brandGroupCodeFrom", typeof(string));
    
            var brandGroupCodeToParameter = brandGroupCodeTo != null ?
                new ObjectParameter("brandGroupCodeTo", brandGroupCodeTo) :
                new ObjectParameter("brandGroupCodeTo", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEquipmenrRequiremenrReport2_Result>("[SKTISEntities].[GetEquipmenrRequiremenrReport2](@locationcode, @brandGroupCodeFrom, @brandGroupCodeTo, @date)", locationcodeParameter, brandGroupCodeFromParameter, brandGroupCodeToParameter, dateParameter);
        }
    
        [DbFunction("SKTISEntities", "GetEquipmentRequirementItem")]
        public virtual IQueryable<GetEquipmentRequirementItem_Result> GetEquipmentRequirementItem(string locationcode, string brandGroupCode, Nullable<System.DateTime> date)
        {
            var locationcodeParameter = locationcode != null ?
                new ObjectParameter("locationcode", locationcode) :
                new ObjectParameter("locationcode", typeof(string));
    
            var brandGroupCodeParameter = brandGroupCode != null ?
                new ObjectParameter("brandGroupCode", brandGroupCode) :
                new ObjectParameter("brandGroupCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEquipmentRequirementItem_Result>("[SKTISEntities].[GetEquipmentRequirementItem](@locationcode, @brandGroupCode, @date)", locationcodeParameter, brandGroupCodeParameter, dateParameter);
        }
    
        [DbFunction("SKTISEntities", "GetEquipmentRequirementReport")]
        public virtual IQueryable<GetEquipmentRequirementReport_Result> GetEquipmentRequirementReport(string locationcode, string brandGroupCode, Nullable<float> userEntryPackage, Nullable<System.DateTime> date)
        {
            var locationcodeParameter = locationcode != null ?
                new ObjectParameter("locationcode", locationcode) :
                new ObjectParameter("locationcode", typeof(string));
    
            var brandGroupCodeParameter = brandGroupCode != null ?
                new ObjectParameter("brandGroupCode", brandGroupCode) :
                new ObjectParameter("brandGroupCode", typeof(string));
    
            var userEntryPackageParameter = userEntryPackage.HasValue ?
                new ObjectParameter("userEntryPackage", userEntryPackage) :
                new ObjectParameter("userEntryPackage", typeof(float));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEquipmentRequirementReport_Result>("[SKTISEntities].[GetEquipmentRequirementReport](@locationcode, @brandGroupCode, @userEntryPackage, @date)", locationcodeParameter, brandGroupCodeParameter, userEntryPackageParameter, dateParameter);
        }
    
        [DbFunction("SKTISEntities", "GetLastChildLocation")]
        public virtual IQueryable<GetLastChildLocation_Result> GetLastChildLocation(string locationCode)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLastChildLocation_Result>("[SKTISEntities].[GetLastChildLocation](@LocationCode)", locationCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "GetLocations")]
        public virtual IQueryable<GetLocations_Result> GetLocations(string locationcode, Nullable<int> level)
        {
            var locationcodeParameter = locationcode != null ?
                new ObjectParameter("locationcode", locationcode) :
                new ObjectParameter("locationcode", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLocations_Result>("[SKTISEntities].[GetLocations](@locationcode, @level)", locationcodeParameter, levelParameter);
        }
    
        [DbFunction("SKTISEntities", "GetLocationsByLevel")]
        public virtual IQueryable<GetLocationsByLevel_Result> GetLocationsByLevel(string sourcelocationcode, Nullable<int> level)
        {
            var sourcelocationcodeParameter = sourcelocationcode != null ?
                new ObjectParameter("sourcelocationcode", sourcelocationcode) :
                new ObjectParameter("sourcelocationcode", typeof(string));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLocationsByLevel_Result>("[SKTISEntities].[GetLocationsByLevel](@sourcelocationcode, @level)", sourcelocationcodeParameter, levelParameter);
        }
    
        [DbFunction("SKTISEntities", "GetLocationShift")]
        public virtual IQueryable<GetLocationShift_Result> GetLocationShift()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLocationShift_Result>("[SKTISEntities].[GetLocationShift]()");
        }
    
        public virtual ObjectResult<GetMstGenLocationsByParentCode_Result> GetMstGenLocationsByParentCode(string parentLocationCode, string sortColumn, string sortOrder)
        {
            var parentLocationCodeParameter = parentLocationCode != null ?
                new ObjectParameter("parentLocationCode", parentLocationCode) :
                new ObjectParameter("parentLocationCode", typeof(string));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("sortOrder", sortOrder) :
                new ObjectParameter("sortOrder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMstGenLocationsByParentCode_Result>("GetMstGenLocationsByParentCode", parentLocationCodeParameter, sortColumnParameter, sortOrderParameter);
        }
    
        [DbFunction("SKTISEntities", "GetPastWeek")]
        public virtual IQueryable<GetPastWeek_Result> GetPastWeek(Nullable<int> currentYear, Nullable<int> currentWeek, Nullable<int> length)
        {
            var currentYearParameter = currentYear.HasValue ?
                new ObjectParameter("currentYear", currentYear) :
                new ObjectParameter("currentYear", typeof(int));
    
            var currentWeekParameter = currentWeek.HasValue ?
                new ObjectParameter("currentWeek", currentWeek) :
                new ObjectParameter("currentWeek", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("length", length) :
                new ObjectParameter("length", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPastWeek_Result>("[SKTISEntities].[GetPastWeek](@currentYear, @currentWeek, @length)", currentYearParameter, currentWeekParameter, lengthParameter);
        }
    
        [DbFunction("SKTISEntities", "GetRealStock")]
        public virtual IQueryable<Nullable<int>> GetRealStock(string locationcode, string itemcode, Nullable<System.DateTime> date)
        {
            var locationcodeParameter = locationcode != null ?
                new ObjectParameter("locationcode", locationcode) :
                new ObjectParameter("locationcode", typeof(string));
    
            var itemcodeParameter = itemcode != null ?
                new ObjectParameter("itemcode", itemcode) :
                new ObjectParameter("itemcode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[SKTISEntities].[GetRealStock](@locationcode, @itemcode, @date)", locationcodeParameter, itemcodeParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetReportSummaryDailyProductionTargets_Result> GetReportSummaryDailyProductionTargets(Nullable<int> year, Nullable<int> week, Nullable<int> @decimal, string locationCode)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var decimalParameter = @decimal.HasValue ?
                new ObjectParameter("Decimal", @decimal) :
                new ObjectParameter("Decimal", typeof(int));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportSummaryDailyProductionTargets_Result>("GetReportSummaryDailyProductionTargets", yearParameter, weekParameter, decimalParameter, locationCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "GetTotalActualProductionPrev3Weeks")]
        public virtual IQueryable<Nullable<int>> GetTotalActualProductionPrev3Weeks(Nullable<int> year, Nullable<int> week, string prodGroup, string processGroup, string locationCode, string statusEmp, string brandCode)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(int));
    
            var prodGroupParameter = prodGroup != null ?
                new ObjectParameter("prodGroup", prodGroup) :
                new ObjectParameter("prodGroup", typeof(string));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("processGroup", processGroup) :
                new ObjectParameter("processGroup", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var statusEmpParameter = statusEmp != null ?
                new ObjectParameter("statusEmp", statusEmp) :
                new ObjectParameter("statusEmp", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("brandCode", brandCode) :
                new ObjectParameter("brandCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[SKTISEntities].[GetTotalActualProductionPrev3Weeks](@year, @week, @prodGroup, @processGroup, @locationCode, @statusEmp, @brandCode)", yearParameter, weekParameter, prodGroupParameter, processGroupParameter, locationCodeParameter, statusEmpParameter, brandCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "GetTotalWorkHoursPrev3Weeks")]
        public virtual IQueryable<GetTotalWorkHoursPrev3Weeks_Result> GetTotalWorkHoursPrev3Weeks(Nullable<int> year, Nullable<int> week, string prodGroup, string processGroup, string locationCode, string statusEmp, string brandCode)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(int));
    
            var prodGroupParameter = prodGroup != null ?
                new ObjectParameter("prodGroup", prodGroup) :
                new ObjectParameter("prodGroup", typeof(string));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("processGroup", processGroup) :
                new ObjectParameter("processGroup", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var statusEmpParameter = statusEmp != null ?
                new ObjectParameter("statusEmp", statusEmp) :
                new ObjectParameter("statusEmp", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("brandCode", brandCode) :
                new ObjectParameter("brandCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalWorkHoursPrev3Weeks_Result>("[SKTISEntities].[GetTotalWorkHoursPrev3Weeks](@year, @week, @prodGroup, @processGroup, @locationCode, @statusEmp, @brandCode)", yearParameter, weekParameter, prodGroupParameter, processGroupParameter, locationCodeParameter, statusEmpParameter, brandCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "GetTransactionFlow")]
        public virtual IQueryable<GetTransactionFlow_Result> GetTransactionFlow(string functionName)
        {
            var functionNameParameter = functionName != null ?
                new ObjectParameter("functionName", functionName) :
                new ObjectParameter("functionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTransactionFlow_Result>("[SKTISEntities].[GetTransactionFlow](@functionName)", functionNameParameter);
        }
    
        public virtual int RunSSISPlantTPK(string userName, Nullable<int> kPSYear, Nullable<int> kPSWeek, string locationCode, string brandCode, Nullable<int> shift)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var kPSYearParameter = kPSYear.HasValue ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(int));
    
            var kPSWeekParameter = kPSWeek.HasValue ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(int));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunSSISPlantTPK", userNameParameter, kPSYearParameter, kPSWeekParameter, locationCodeParameter, brandCodeParameter, shiftParameter);
        }
    
        public virtual int RunSSISProductionEntryPlant(string userName, Nullable<int> kPSYear, Nullable<int> kPSWeek, string locationCode, string brandCode, string unitCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var kPSYearParameter = kPSYear.HasValue ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(int));
    
            var kPSWeekParameter = kPSWeek.HasValue ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(int));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunSSISProductionEntryPlant", userNameParameter, kPSYearParameter, kPSWeekParameter, locationCodeParameter, brandCodeParameter, unitCodeParameter);
        }
    
        public virtual int RunSSISProductionEntryTPO(string userName, Nullable<int> kPSYear, Nullable<int> kPSWeek, string locationCode, string brandCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var kPSYearParameter = kPSYear.HasValue ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(int));
    
            var kPSWeekParameter = kPSWeek.HasValue ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(int));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunSSISProductionEntryTPO", userNameParameter, kPSYearParameter, kPSWeekParameter, locationCodeParameter, brandCodeParameter);
        }
    
        public virtual int RunSSISWPP(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunSSISWPP", userNameParameter);
        }
    
        public virtual int RunSSISWPPCurrentWeek(string userName, Nullable<int> kPSYear, Nullable<int> kPSWeek, string locationCode, string brandCode)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var kPSYearParameter = kPSYear.HasValue ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(int));
    
            var kPSWeekParameter = kPSWeek.HasValue ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(int));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunSSISWPPCurrentWeek", userNameParameter, kPSYearParameter, kPSWeekParameter, locationCodeParameter, brandCodeParameter);
        }
    
        public virtual ObjectResult<SSISGetSwitchBrand_Result> SSISGetSwitchBrand(Nullable<int> kPSYear, Nullable<int> kPSWeek, Nullable<int> convertMilion, string proccessName, string daytype, string userName)
        {
            var kPSYearParameter = kPSYear.HasValue ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(int));
    
            var kPSWeekParameter = kPSWeek.HasValue ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(int));
    
            var convertMilionParameter = convertMilion.HasValue ?
                new ObjectParameter("ConvertMilion", convertMilion) :
                new ObjectParameter("ConvertMilion", typeof(int));
    
            var proccessNameParameter = proccessName != null ?
                new ObjectParameter("ProccessName", proccessName) :
                new ObjectParameter("ProccessName", typeof(string));
    
            var daytypeParameter = daytype != null ?
                new ObjectParameter("daytype", daytype) :
                new ObjectParameter("daytype", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSISGetSwitchBrand_Result>("SSISGetSwitchBrand", kPSYearParameter, kPSWeekParameter, convertMilionParameter, proccessNameParameter, daytypeParameter, userNameParameter);
        }
    
        public virtual int usp_ExecAdhocJob(string param, string dtsxName)
        {
            var paramParameter = param != null ?
                new ObjectParameter("Param", param) :
                new ObjectParameter("Param", typeof(string));
    
            var dtsxNameParameter = dtsxName != null ?
                new ObjectParameter("dtsxName", dtsxName) :
                new ObjectParameter("dtsxName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ExecAdhocJob", paramParameter, dtsxNameParameter);
        }
    
        public virtual int usp_ExecAdhocJob_delete(string param, string dtsxName)
        {
            var paramParameter = param != null ?
                new ObjectParameter("Param", param) :
                new ObjectParameter("Param", typeof(string));
    
            var dtsxNameParameter = dtsxName != null ?
                new ObjectParameter("dtsxName", dtsxName) :
                new ObjectParameter("dtsxName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ExecAdhocJob_delete", paramParameter, dtsxNameParameter);
        }
    
        public virtual int VT_DBUpdatesExecScript(string scriptText)
        {
            var scriptTextParameter = scriptText != null ?
                new ObjectParameter("ScriptText", scriptText) :
                new ObjectParameter("ScriptText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VT_DBUpdatesExecScript", scriptTextParameter);
        }
    
        public virtual int VT_DBUpdatesSaveScriptExecution(string scriptName, string majorReleaseNumber, string minorReleaseNumber, ObjectParameter returnValue)
        {
            var scriptNameParameter = scriptName != null ?
                new ObjectParameter("ScriptName", scriptName) :
                new ObjectParameter("ScriptName", typeof(string));
    
            var majorReleaseNumberParameter = majorReleaseNumber != null ?
                new ObjectParameter("MajorReleaseNumber", majorReleaseNumber) :
                new ObjectParameter("MajorReleaseNumber", typeof(string));
    
            var minorReleaseNumberParameter = minorReleaseNumber != null ?
                new ObjectParameter("MinorReleaseNumber", minorReleaseNumber) :
                new ObjectParameter("MinorReleaseNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VT_DBUpdatesSaveScriptExecution", scriptNameParameter, majorReleaseNumberParameter, minorReleaseNumberParameter, returnValue);
        }
    
        public virtual int TPOProductionEntryVerificationCancelReport(string locationCode, string brandCode, Nullable<int> kPSYear, Nullable<int> kPSWeek, Nullable<System.DateTime> productionDate)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var kPSYearParameter = kPSYear.HasValue ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(int));
    
            var kPSWeekParameter = kPSWeek.HasValue ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(int));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("ProductionDate", productionDate) :
                new ObjectParameter("ProductionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TPOProductionEntryVerificationCancelReport", locationCodeParameter, brandCodeParameter, kPSYearParameter, kPSWeekParameter, productionDateParameter);
        }
    
        public virtual int SSISUpdateIndividualCapacity(Nullable<int> hoursCapacity3, Nullable<int> hoursCapacity5, Nullable<int> hoursCapacity6, Nullable<int> hoursCapacity7, Nullable<int> hoursCapacity8, Nullable<int> hoursCapacity9, Nullable<int> hoursCapacity10, Nullable<bool> statusActive, Nullable<System.DateTime> updatedDate, string updatedBy, string brandGroupCode, Nullable<int> employeeID, string groupCode, string unitCode, string locationCode, string processGroup)
        {
            var hoursCapacity3Parameter = hoursCapacity3.HasValue ?
                new ObjectParameter("HoursCapacity3", hoursCapacity3) :
                new ObjectParameter("HoursCapacity3", typeof(int));
    
            var hoursCapacity5Parameter = hoursCapacity5.HasValue ?
                new ObjectParameter("HoursCapacity5", hoursCapacity5) :
                new ObjectParameter("HoursCapacity5", typeof(int));
    
            var hoursCapacity6Parameter = hoursCapacity6.HasValue ?
                new ObjectParameter("HoursCapacity6", hoursCapacity6) :
                new ObjectParameter("HoursCapacity6", typeof(int));
    
            var hoursCapacity7Parameter = hoursCapacity7.HasValue ?
                new ObjectParameter("HoursCapacity7", hoursCapacity7) :
                new ObjectParameter("HoursCapacity7", typeof(int));
    
            var hoursCapacity8Parameter = hoursCapacity8.HasValue ?
                new ObjectParameter("HoursCapacity8", hoursCapacity8) :
                new ObjectParameter("HoursCapacity8", typeof(int));
    
            var hoursCapacity9Parameter = hoursCapacity9.HasValue ?
                new ObjectParameter("HoursCapacity9", hoursCapacity9) :
                new ObjectParameter("HoursCapacity9", typeof(int));
    
            var hoursCapacity10Parameter = hoursCapacity10.HasValue ?
                new ObjectParameter("HoursCapacity10", hoursCapacity10) :
                new ObjectParameter("HoursCapacity10", typeof(int));
    
            var statusActiveParameter = statusActive.HasValue ?
                new ObjectParameter("StatusActive", statusActive) :
                new ObjectParameter("StatusActive", typeof(bool));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var brandGroupCodeParameter = brandGroupCode != null ?
                new ObjectParameter("BrandGroupCode", brandGroupCode) :
                new ObjectParameter("BrandGroupCode", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("ProcessGroup", processGroup) :
                new ObjectParameter("ProcessGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSISUpdateIndividualCapacity", hoursCapacity3Parameter, hoursCapacity5Parameter, hoursCapacity6Parameter, hoursCapacity7Parameter, hoursCapacity8Parameter, hoursCapacity9Parameter, hoursCapacity10Parameter, statusActiveParameter, updatedDateParameter, updatedByParameter, brandGroupCodeParameter, employeeIDParameter, groupCodeParameter, unitCodeParameter, locationCodeParameter, processGroupParameter);
        }
    
        public virtual ObjectResult<GetUserAdByRoleLocation_Result> GetUserAdByRoleLocation(string roleCode, string location)
        {
            var roleCodeParameter = roleCode != null ?
                new ObjectParameter("RoleCode", roleCode) :
                new ObjectParameter("RoleCode", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserAdByRoleLocation_Result>("GetUserAdByRoleLocation", roleCodeParameter, locationParameter);
        }
    
        public virtual int InsertTPOExeReportByGroups(string locationCode, string brand, Nullable<int> year, Nullable<int> week, Nullable<System.DateTime> date, string createdBy)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTPOExeReportByGroups", locationCodeParameter, brandParameter, yearParameter, weekParameter, dateParameter, createdByParameter);
        }
    
        public virtual int InsertPlantExeReportByGroups(string locationCode, string unit, string brand, Nullable<int> shift, Nullable<int> year, Nullable<int> week, Nullable<System.DateTime> date, string groupCode, string createdBy)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPlantExeReportByGroups", locationCodeParameter, unitParameter, brandParameter, shiftParameter, yearParameter, weekParameter, dateParameter, groupCodeParameter, createdByParameter);
        }
    
        public virtual int InsertMail(string fromName, string fromEmailAddress, string toName, string toEmailAddress, string subject, string bodyMail)
        {
            var fromNameParameter = fromName != null ?
                new ObjectParameter("FromName", fromName) :
                new ObjectParameter("FromName", typeof(string));
    
            var fromEmailAddressParameter = fromEmailAddress != null ?
                new ObjectParameter("FromEmailAddress", fromEmailAddress) :
                new ObjectParameter("FromEmailAddress", typeof(string));
    
            var toNameParameter = toName != null ?
                new ObjectParameter("ToName", toName) :
                new ObjectParameter("ToName", typeof(string));
    
            var toEmailAddressParameter = toEmailAddress != null ?
                new ObjectParameter("ToEmailAddress", toEmailAddress) :
                new ObjectParameter("ToEmailAddress", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var bodyMailParameter = bodyMail != null ?
                new ObjectParameter("BodyMail", bodyMail) :
                new ObjectParameter("BodyMail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMail", fromNameParameter, fromEmailAddressParameter, toNameParameter, toEmailAddressParameter, subjectParameter, bodyMailParameter);
        }
    
        [DbFunction("SKTISEntities", "GetUserAndEmailPlanTPUSubmit")]
        public virtual IQueryable<GetUserAndEmailPlanTPUSubmit_Result> GetUserAndEmailPlanTPUSubmit(string functionName, string buttonName, string locationCode, string brandCode, Nullable<int> shift, Nullable<int> kpsYear, Nullable<int> kpsWeek)
        {
            var functionNameParameter = functionName != null ?
                new ObjectParameter("FunctionName", functionName) :
                new ObjectParameter("FunctionName", typeof(string));
    
            var buttonNameParameter = buttonName != null ?
                new ObjectParameter("ButtonName", buttonName) :
                new ObjectParameter("ButtonName", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var kpsYearParameter = kpsYear.HasValue ?
                new ObjectParameter("KpsYear", kpsYear) :
                new ObjectParameter("KpsYear", typeof(int));
    
            var kpsWeekParameter = kpsWeek.HasValue ?
                new ObjectParameter("KpsWeek", kpsWeek) :
                new ObjectParameter("KpsWeek", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUserAndEmailPlanTPUSubmit_Result>("[SKTISEntities].[GetUserAndEmailPlanTPUSubmit](@FunctionName, @ButtonName, @LocationCode, @BrandCode, @Shift, @KpsYear, @KpsWeek)", functionNameParameter, buttonNameParameter, locationCodeParameter, brandCodeParameter, shiftParameter, kpsYearParameter, kpsWeekParameter);
        }
    
        public virtual ObjectResult<GetReportSummaryProcessTargets_Result> GetReportSummaryProcessTargets(string location, Nullable<int> year, Nullable<int> week, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<int> @decimal, string filterType)
        {
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var decimalParameter = @decimal.HasValue ?
                new ObjectParameter("Decimal", @decimal) :
                new ObjectParameter("Decimal", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("filterType", filterType) :
                new ObjectParameter("filterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportSummaryProcessTargets_Result>("GetReportSummaryProcessTargets", locationParameter, yearParameter, weekParameter, dateFromParameter, dateToParameter, decimalParameter, filterTypeParameter);
        }
    
        public virtual int TPOProductionEntryVerificationGenerateReport(string locationCode, string brandCode, Nullable<int> kPSYear, Nullable<int> kPSWeek, Nullable<System.DateTime> productionDate, string userName)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var kPSYearParameter = kPSYear.HasValue ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(int));
    
            var kPSWeekParameter = kPSWeek.HasValue ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(int));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("ProductionDate", productionDate) :
                new ObjectParameter("ProductionDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TPOProductionEntryVerificationGenerateReport", locationCodeParameter, brandCodeParameter, kPSYearParameter, kPSWeekParameter, productionDateParameter, userNameParameter);
        }
    
        [DbFunction("SKTISEntities", "GetExeReportByGroupAnnualy")]
        public virtual IQueryable<GetExeReportByGroupAnnualy_Result> GetExeReportByGroupAnnualy(string locationCode, string unitCode, Nullable<int> shift, string process, string brand, Nullable<int> year)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetExeReportByGroupAnnualy_Result>("[SKTISEntities].[GetExeReportByGroupAnnualy](@LocationCode, @UnitCode, @Shift, @Process, @Brand, @Year)", locationCodeParameter, unitCodeParameter, shiftParameter, processParameter, brandParameter, yearParameter);
        }
    
        [DbFunction("SKTISEntities", "GetExeReportByGroupDaily")]
        public virtual IQueryable<GetExeReportByGroupDaily_Result> GetExeReportByGroupDaily(string locationCode, string unitCode, Nullable<int> shift, string process, string brand, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetExeReportByGroupDaily_Result>("[SKTISEntities].[GetExeReportByGroupDaily](@LocationCode, @UnitCode, @Shift, @Process, @Brand, @DateFrom, @DateTo)", locationCodeParameter, unitCodeParameter, shiftParameter, processParameter, brandParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<GetWorkerBrandAssignmentPlanningPlantTPK_Result> GetWorkerBrandAssignmentPlanningPlantTPK(string groupCode, string processSettingsCode, Nullable<int> year, Nullable<int> week, string unitCode, string locationCode, string brandCode, string shift, Nullable<System.DateTime> tPKPlantStartProdDate)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var processSettingsCodeParameter = processSettingsCode != null ?
                new ObjectParameter("ProcessSettingsCode", processSettingsCode) :
                new ObjectParameter("ProcessSettingsCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var tPKPlantStartProdDateParameter = tPKPlantStartProdDate.HasValue ?
                new ObjectParameter("TPKPlantStartProdDate", tPKPlantStartProdDate) :
                new ObjectParameter("TPKPlantStartProdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkerBrandAssignmentPlanningPlantTPK_Result>("GetWorkerBrandAssignmentPlanningPlantTPK", groupCodeParameter, processSettingsCodeParameter, yearParameter, weekParameter, unitCodeParameter, locationCodeParameter, brandCodeParameter, shiftParameter, tPKPlantStartProdDateParameter);
        }
    
        [DbFunction("SKTISEntities", "GetWagesReportAbsentDialy")]
        public virtual IQueryable<GetWagesReportAbsentDialy_Result> GetWagesReportAbsentDialy(Nullable<System.DateTime> productionDate, string locationCode, string unitCode, string processGroup)
        {
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("ProductionDate", productionDate) :
                new ObjectParameter("ProductionDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("ProcessGroup", processGroup) :
                new ObjectParameter("ProcessGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWagesReportAbsentDialy_Result>("[SKTISEntities].[GetWagesReportAbsentDialy](@ProductionDate, @LocationCode, @UnitCode, @ProcessGroup)", productionDateParameter, locationCodeParameter, unitCodeParameter, processGroupParameter);
        }
    
        [DbFunction("SKTISEntities", "GetWagesReportAbsentDialyMore")]
        public virtual IQueryable<GetWagesReportAbsentDialyMore_Result> GetWagesReportAbsentDialyMore(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string locationCode, string unitCode, string processGroup)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("ProcessGroup", processGroup) :
                new ObjectParameter("ProcessGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWagesReportAbsentDialyMore_Result>("[SKTISEntities].[GetWagesReportAbsentDialyMore](@startDate, @endDate, @LocationCode, @UnitCode, @ProcessGroup)", startDateParameter, endDateParameter, locationCodeParameter, unitCodeParameter, processGroupParameter);
        }
    
        [DbFunction("SKTISEntities", "GetWagesReportAbsentDetailDialy")]
        public virtual IQueryable<GetWagesReportAbsentDetailDialy_Result> GetWagesReportAbsentDetailDialy(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string locationCode, string unitCode, string brandGroupCode, string groupCode)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var brandGroupCodeParameter = brandGroupCode != null ?
                new ObjectParameter("BrandGroupCode", brandGroupCode) :
                new ObjectParameter("BrandGroupCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWagesReportAbsentDetailDialy_Result>("[SKTISEntities].[GetWagesReportAbsentDetailDialy](@startDate, @endDate, @LocationCode, @UnitCode, @BrandGroupCode, @GroupCode)", startDateParameter, endDateParameter, locationCodeParameter, unitCodeParameter, brandGroupCodeParameter, groupCodeParameter);
        }
    
        public virtual ObjectResult<GetEMSSourceData_Result> GetEMSSourceData(string locationCode, string brandCode, Nullable<System.DateTime> start, Nullable<System.DateTime> enddate)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEMSSourceData_Result>("GetEMSSourceData", locationCodeParameter, brandCodeParameter, startParameter, enddateParameter);
        }
    
        public virtual ObjectResult<string> EMSSourceDataBrandCodeView(string locationCode, Nullable<System.DateTime> start, Nullable<System.DateTime> enddate)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("EMSSourceDataBrandCodeView", locationCodeParameter, startParameter, enddateParameter);
        }
    
        [DbFunction("SKTISEntities", "GetProcessFromProdCard")]
        public virtual IQueryable<GetProcessFromProdCard_Result> GetProcessFromProdCard(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string locationCode, string unitCode)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetProcessFromProdCard_Result>("[SKTISEntities].[GetProcessFromProdCard](@StartDate, @EndDate, @LocationCode, @UnitCode)", startDateParameter, endDateParameter, locationCodeParameter, unitCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "GetMaintenanceEquipmentStockView")]
        public virtual IQueryable<GetMaintenanceEquipmentStockView_Result> GetMaintenanceEquipmentStockView(string locationCode, string unitCode, Nullable<System.DateTime> inventoryDate)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var inventoryDateParameter = inventoryDate.HasValue ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMaintenanceEquipmentStockView_Result>("[SKTISEntities].[GetMaintenanceEquipmentStockView](@LocationCode, @UnitCode, @InventoryDate)", locationCodeParameter, unitCodeParameter, inventoryDateParameter);
        }
    
        [DbFunction("SKTISEntities", "GetReportProdStockProcessAllUnitView")]
        public virtual IQueryable<GetReportProdStockProcessAllUnitView_Result> GetReportProdStockProcessAllUnitView(string locationCode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetReportProdStockProcessAllUnitView_Result>("[SKTISEntities].[GetReportProdStockProcessAllUnitView](@LocationCode, @DateFrom, @DateTo)", locationCodeParameter, dateFromParameter, dateToParameter);
        }
    
        [DbFunction("SKTISEntities", "GetReportProdStockProcessView")]
        public virtual IQueryable<GetReportProdStockProcessView_Result> GetReportProdStockProcessView(string locationCode, string unitCode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetReportProdStockProcessView_Result>("[SKTISEntities].[GetReportProdStockProcessView](@LocationCode, @UnitCode, @DateFrom, @DateTo)", locationCodeParameter, unitCodeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int SwitchingBrandExeReportByProcess(string locationCode, string brandGroupCode, Nullable<System.DateTime> productionDate)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var brandGroupCodeParameter = brandGroupCode != null ?
                new ObjectParameter("brandGroupCode", brandGroupCode) :
                new ObjectParameter("brandGroupCode", typeof(string));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("productionDate", productionDate) :
                new ObjectParameter("productionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SwitchingBrandExeReportByProcess", locationCodeParameter, brandGroupCodeParameter, productionDateParameter);
        }
    
        public virtual int RunSSISProductionReportByGroupMonthly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunSSISProductionReportByGroupMonthly");
        }
    
        public virtual int RunSSISProductionReportByGroupWeekly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RunSSISProductionReportByGroupWeekly");
        }
    
        [DbFunction("SKTISEntities", "GetAbsensi")]
        public virtual IQueryable<Nullable<int>> GetAbsensi(string productionEntryCode, string absentCode)
        {
            var productionEntryCodeParameter = productionEntryCode != null ?
                new ObjectParameter("ProductionEntryCode", productionEntryCode) :
                new ObjectParameter("ProductionEntryCode", typeof(string));
    
            var absentCodeParameter = absentCode != null ?
                new ObjectParameter("AbsentCode", absentCode) :
                new ObjectParameter("AbsentCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[SKTISEntities].[GetAbsensi](@ProductionEntryCode, @AbsentCode)", productionEntryCodeParameter, absentCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "GetWorkHour")]
        public virtual IQueryable<Nullable<decimal>> GetWorkHour(string locationCode, string unitCode, string groupCode, string brandCode, Nullable<int> shift, string prosesGroup, Nullable<System.DateTime> productionDate, Nullable<int> kPSYear, Nullable<int> kPSWeek, Nullable<int> dayOfWeek)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var prosesGroupParameter = prosesGroup != null ?
                new ObjectParameter("ProsesGroup", prosesGroup) :
                new ObjectParameter("ProsesGroup", typeof(string));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("ProductionDate", productionDate) :
                new ObjectParameter("ProductionDate", typeof(System.DateTime));
    
            var kPSYearParameter = kPSYear.HasValue ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(int));
    
            var kPSWeekParameter = kPSWeek.HasValue ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(int));
    
            var dayOfWeekParameter = dayOfWeek.HasValue ?
                new ObjectParameter("DayOfWeek", dayOfWeek) :
                new ObjectParameter("DayOfWeek", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<decimal>>("[SKTISEntities].[GetWorkHour](@LocationCode, @UnitCode, @GroupCode, @BrandCode, @Shift, @ProsesGroup, @ProductionDate, @KPSYear, @KPSWeek, @DayOfWeek)", locationCodeParameter, unitCodeParameter, groupCodeParameter, brandCodeParameter, shiftParameter, prosesGroupParameter, productionDateParameter, kPSYearParameter, kPSWeekParameter, dayOfWeekParameter);
        }
    
        public virtual int RecalculateStockExeReportByProcess(Nullable<System.DateTime> productionDate, string locationCode, string branchCode)
        {
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("productionDate", productionDate) :
                new ObjectParameter("productionDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("branchCode", branchCode) :
                new ObjectParameter("branchCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecalculateStockExeReportByProcess", productionDateParameter, locationCodeParameter, branchCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "GetPlanPlantIndividualCapacityByReference")]
        public virtual IQueryable<GetPlanPlantIndividualCapacityByReference_Result> GetPlanPlantIndividualCapacityByReference(string locationCode, string unitCode, string brandGroupCode, string processGroup, string groupCode, Nullable<int> workhour, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var brandGroupCodeParameter = brandGroupCode != null ?
                new ObjectParameter("BrandGroupCode", brandGroupCode) :
                new ObjectParameter("BrandGroupCode", typeof(string));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("ProcessGroup", processGroup) :
                new ObjectParameter("ProcessGroup", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var workhourParameter = workhour.HasValue ?
                new ObjectParameter("Workhour", workhour) :
                new ObjectParameter("Workhour", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPlanPlantIndividualCapacityByReference_Result>("[SKTISEntities].[GetPlanPlantIndividualCapacityByReference](@LocationCode, @UnitCode, @BrandGroupCode, @ProcessGroup, @GroupCode, @Workhour, @StartDate, @EndDate)", locationCodeParameter, unitCodeParameter, brandGroupCodeParameter, processGroupParameter, groupCodeParameter, workhourParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int DefaultExeReportByProcess(string locationCode, string brandCode, string unitCode, Nullable<int> kpsYear, Nullable<int> kpsWeek, Nullable<System.DateTime> productionDate, string createdBy, string updatedBy)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("brandCode", brandCode) :
                new ObjectParameter("brandCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("unitCode", unitCode) :
                new ObjectParameter("unitCode", typeof(string));
    
            var kpsYearParameter = kpsYear.HasValue ?
                new ObjectParameter("kpsYear", kpsYear) :
                new ObjectParameter("kpsYear", typeof(int));
    
            var kpsWeekParameter = kpsWeek.HasValue ?
                new ObjectParameter("kpsWeek", kpsWeek) :
                new ObjectParameter("kpsWeek", typeof(int));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("productionDate", productionDate) :
                new ObjectParameter("productionDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DefaultExeReportByProcess", locationCodeParameter, brandCodeParameter, unitCodeParameter, kpsYearParameter, kpsWeekParameter, productionDateParameter, createdByParameter, updatedByParameter);
        }
    
        [DbFunction("SKTISEntities", "GetUserAndEmail")]
        public virtual IQueryable<GetUserAndEmail_Result> GetUserAndEmail(string functionName, string buttonName, string locationCode, string unitCode, string brandCode, Nullable<int> shift, Nullable<int> kpsYear, Nullable<int> kpsWeek, Nullable<int> iDFlow)
        {
            var functionNameParameter = functionName != null ?
                new ObjectParameter("FunctionName", functionName) :
                new ObjectParameter("FunctionName", typeof(string));
    
            var buttonNameParameter = buttonName != null ?
                new ObjectParameter("ButtonName", buttonName) :
                new ObjectParameter("ButtonName", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var kpsYearParameter = kpsYear.HasValue ?
                new ObjectParameter("KpsYear", kpsYear) :
                new ObjectParameter("KpsYear", typeof(int));
    
            var kpsWeekParameter = kpsWeek.HasValue ?
                new ObjectParameter("KpsWeek", kpsWeek) :
                new ObjectParameter("KpsWeek", typeof(int));
    
            var iDFlowParameter = iDFlow.HasValue ?
                new ObjectParameter("IDFlow", iDFlow) :
                new ObjectParameter("IDFlow", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUserAndEmail_Result>("[SKTISEntities].[GetUserAndEmail](@FunctionName, @ButtonName, @LocationCode, @UnitCode, @BrandCode, @Shift, @KpsYear, @KpsWeek, @IDFlow)", functionNameParameter, buttonNameParameter, locationCodeParameter, unitCodeParameter, brandCodeParameter, shiftParameter, kpsYearParameter, kpsWeekParameter, iDFlowParameter);
        }
    
        [DbFunction("SKTISEntities", "GetTPOReportsProduction")]
        public virtual IQueryable<GetTPOReportsProduction_Result> GetTPOReportsProduction(string locationCode, Nullable<int> yearFrom, Nullable<int> yearTo, Nullable<int> weekFrom, Nullable<int> weekTo, Nullable<int> month, Nullable<int> year, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string filterType)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var yearFromParameter = yearFrom.HasValue ?
                new ObjectParameter("YearFrom", yearFrom) :
                new ObjectParameter("YearFrom", typeof(int));
    
            var yearToParameter = yearTo.HasValue ?
                new ObjectParameter("YearTo", yearTo) :
                new ObjectParameter("YearTo", typeof(int));
    
            var weekFromParameter = weekFrom.HasValue ?
                new ObjectParameter("WeekFrom", weekFrom) :
                new ObjectParameter("WeekFrom", typeof(int));
    
            var weekToParameter = weekTo.HasValue ?
                new ObjectParameter("WeekTo", weekTo) :
                new ObjectParameter("WeekTo", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTPOReportsProduction_Result>("[SKTISEntities].[GetTPOReportsProduction](@LocationCode, @YearFrom, @YearTo, @WeekFrom, @WeekTo, @Month, @Year, @DateFrom, @DateTo, @FilterType)", locationCodeParameter, yearFromParameter, yearToParameter, weekFromParameter, weekToParameter, monthParameter, yearParameter, dateFromParameter, dateToParameter, filterTypeParameter);
        }
    
        public virtual int DELETE_WORKER_ASSIGNMENT(string sourceLocationCode, string sourceUnitCode, Nullable<int> sourceShift, string sourceProcessGroup, string sourceGroupCode, string sourceBrandCode, string destinationLocationCode, string destinationUnitCode, Nullable<int> destinationShift, string destinationProcessGroup, string destinationGroupCode, string destinationGroupCodeDummy, string destinationBrandCode, string employeeID, string employeeNumber, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string createdBy, string updatedBy)
        {
            var sourceLocationCodeParameter = sourceLocationCode != null ?
                new ObjectParameter("SourceLocationCode", sourceLocationCode) :
                new ObjectParameter("SourceLocationCode", typeof(string));
    
            var sourceUnitCodeParameter = sourceUnitCode != null ?
                new ObjectParameter("SourceUnitCode", sourceUnitCode) :
                new ObjectParameter("SourceUnitCode", typeof(string));
    
            var sourceShiftParameter = sourceShift.HasValue ?
                new ObjectParameter("SourceShift", sourceShift) :
                new ObjectParameter("SourceShift", typeof(int));
    
            var sourceProcessGroupParameter = sourceProcessGroup != null ?
                new ObjectParameter("SourceProcessGroup", sourceProcessGroup) :
                new ObjectParameter("SourceProcessGroup", typeof(string));
    
            var sourceGroupCodeParameter = sourceGroupCode != null ?
                new ObjectParameter("SourceGroupCode", sourceGroupCode) :
                new ObjectParameter("SourceGroupCode", typeof(string));
    
            var sourceBrandCodeParameter = sourceBrandCode != null ?
                new ObjectParameter("SourceBrandCode", sourceBrandCode) :
                new ObjectParameter("SourceBrandCode", typeof(string));
    
            var destinationLocationCodeParameter = destinationLocationCode != null ?
                new ObjectParameter("DestinationLocationCode", destinationLocationCode) :
                new ObjectParameter("DestinationLocationCode", typeof(string));
    
            var destinationUnitCodeParameter = destinationUnitCode != null ?
                new ObjectParameter("DestinationUnitCode", destinationUnitCode) :
                new ObjectParameter("DestinationUnitCode", typeof(string));
    
            var destinationShiftParameter = destinationShift.HasValue ?
                new ObjectParameter("DestinationShift", destinationShift) :
                new ObjectParameter("DestinationShift", typeof(int));
    
            var destinationProcessGroupParameter = destinationProcessGroup != null ?
                new ObjectParameter("DestinationProcessGroup", destinationProcessGroup) :
                new ObjectParameter("DestinationProcessGroup", typeof(string));
    
            var destinationGroupCodeParameter = destinationGroupCode != null ?
                new ObjectParameter("DestinationGroupCode", destinationGroupCode) :
                new ObjectParameter("DestinationGroupCode", typeof(string));
    
            var destinationGroupCodeDummyParameter = destinationGroupCodeDummy != null ?
                new ObjectParameter("DestinationGroupCodeDummy", destinationGroupCodeDummy) :
                new ObjectParameter("DestinationGroupCodeDummy", typeof(string));
    
            var destinationBrandCodeParameter = destinationBrandCode != null ?
                new ObjectParameter("DestinationBrandCode", destinationBrandCode) :
                new ObjectParameter("DestinationBrandCode", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_WORKER_ASSIGNMENT", sourceLocationCodeParameter, sourceUnitCodeParameter, sourceShiftParameter, sourceProcessGroupParameter, sourceGroupCodeParameter, sourceBrandCodeParameter, destinationLocationCodeParameter, destinationUnitCodeParameter, destinationShiftParameter, destinationProcessGroupParameter, destinationGroupCodeParameter, destinationGroupCodeDummyParameter, destinationBrandCodeParameter, employeeIDParameter, employeeNumberParameter, startDateParameter, endDateParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int INSERT_WORKER_ASSIGNMENT(string sourceLocationCode, string sourceUnitCode, Nullable<int> sourceShift, string sourceProcessGroup, string sourceGroupCode, string sourceBrandCode, string destinationLocationCode, string destinationUnitCode, Nullable<int> destinationShift, string destinationProcessGroup, string destinationGroupCode, string destinationGroupCodeDummy, string destinationBrandCode, string employeeID, string employeeNumber, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string createdBy, string updatedBy)
        {
            var sourceLocationCodeParameter = sourceLocationCode != null ?
                new ObjectParameter("SourceLocationCode", sourceLocationCode) :
                new ObjectParameter("SourceLocationCode", typeof(string));
    
            var sourceUnitCodeParameter = sourceUnitCode != null ?
                new ObjectParameter("SourceUnitCode", sourceUnitCode) :
                new ObjectParameter("SourceUnitCode", typeof(string));
    
            var sourceShiftParameter = sourceShift.HasValue ?
                new ObjectParameter("SourceShift", sourceShift) :
                new ObjectParameter("SourceShift", typeof(int));
    
            var sourceProcessGroupParameter = sourceProcessGroup != null ?
                new ObjectParameter("SourceProcessGroup", sourceProcessGroup) :
                new ObjectParameter("SourceProcessGroup", typeof(string));
    
            var sourceGroupCodeParameter = sourceGroupCode != null ?
                new ObjectParameter("SourceGroupCode", sourceGroupCode) :
                new ObjectParameter("SourceGroupCode", typeof(string));
    
            var sourceBrandCodeParameter = sourceBrandCode != null ?
                new ObjectParameter("SourceBrandCode", sourceBrandCode) :
                new ObjectParameter("SourceBrandCode", typeof(string));
    
            var destinationLocationCodeParameter = destinationLocationCode != null ?
                new ObjectParameter("DestinationLocationCode", destinationLocationCode) :
                new ObjectParameter("DestinationLocationCode", typeof(string));
    
            var destinationUnitCodeParameter = destinationUnitCode != null ?
                new ObjectParameter("DestinationUnitCode", destinationUnitCode) :
                new ObjectParameter("DestinationUnitCode", typeof(string));
    
            var destinationShiftParameter = destinationShift.HasValue ?
                new ObjectParameter("DestinationShift", destinationShift) :
                new ObjectParameter("DestinationShift", typeof(int));
    
            var destinationProcessGroupParameter = destinationProcessGroup != null ?
                new ObjectParameter("DestinationProcessGroup", destinationProcessGroup) :
                new ObjectParameter("DestinationProcessGroup", typeof(string));
    
            var destinationGroupCodeParameter = destinationGroupCode != null ?
                new ObjectParameter("DestinationGroupCode", destinationGroupCode) :
                new ObjectParameter("DestinationGroupCode", typeof(string));
    
            var destinationGroupCodeDummyParameter = destinationGroupCodeDummy != null ?
                new ObjectParameter("DestinationGroupCodeDummy", destinationGroupCodeDummy) :
                new ObjectParameter("DestinationGroupCodeDummy", typeof(string));
    
            var destinationBrandCodeParameter = destinationBrandCode != null ?
                new ObjectParameter("DestinationBrandCode", destinationBrandCode) :
                new ObjectParameter("DestinationBrandCode", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_WORKER_ASSIGNMENT", sourceLocationCodeParameter, sourceUnitCodeParameter, sourceShiftParameter, sourceProcessGroupParameter, sourceGroupCodeParameter, sourceBrandCodeParameter, destinationLocationCodeParameter, destinationUnitCodeParameter, destinationShiftParameter, destinationProcessGroupParameter, destinationGroupCodeParameter, destinationGroupCodeDummyParameter, destinationBrandCodeParameter, employeeIDParameter, employeeNumberParameter, startDateParameter, endDateParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int DELETE_WORKER_ABSENTEEISM(Nullable<System.DateTime> startDateAbsent, string employeeID, string absentType, Nullable<System.DateTime> endDateAbsent, string sktAbsentCode, string payrollAbsentCode, string ePaf, string attachment, string attachmentPath, Nullable<System.DateTime> createdDate, string createdBy, Nullable<System.DateTime> updatedDate, string updatedBy, string employeeNumber, string locationCode, string unitCode, string groupCode, Nullable<System.DateTime> transactionDate, Nullable<int> shift)
        {
            var startDateAbsentParameter = startDateAbsent.HasValue ?
                new ObjectParameter("StartDateAbsent", startDateAbsent) :
                new ObjectParameter("StartDateAbsent", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var absentTypeParameter = absentType != null ?
                new ObjectParameter("AbsentType", absentType) :
                new ObjectParameter("AbsentType", typeof(string));
    
            var endDateAbsentParameter = endDateAbsent.HasValue ?
                new ObjectParameter("EndDateAbsent", endDateAbsent) :
                new ObjectParameter("EndDateAbsent", typeof(System.DateTime));
    
            var sktAbsentCodeParameter = sktAbsentCode != null ?
                new ObjectParameter("SktAbsentCode", sktAbsentCode) :
                new ObjectParameter("SktAbsentCode", typeof(string));
    
            var payrollAbsentCodeParameter = payrollAbsentCode != null ?
                new ObjectParameter("PayrollAbsentCode", payrollAbsentCode) :
                new ObjectParameter("PayrollAbsentCode", typeof(string));
    
            var ePafParameter = ePaf != null ?
                new ObjectParameter("ePaf", ePaf) :
                new ObjectParameter("ePaf", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            var attachmentPathParameter = attachmentPath != null ?
                new ObjectParameter("AttachmentPath", attachmentPath) :
                new ObjectParameter("AttachmentPath", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_WORKER_ABSENTEEISM", startDateAbsentParameter, employeeIDParameter, absentTypeParameter, endDateAbsentParameter, sktAbsentCodeParameter, payrollAbsentCodeParameter, ePafParameter, attachmentParameter, attachmentPathParameter, createdDateParameter, createdByParameter, updatedDateParameter, updatedByParameter, employeeNumberParameter, locationCodeParameter, unitCodeParameter, groupCodeParameter, transactionDateParameter, shiftParameter);
        }
    
        public virtual int INSERT_WORKER_ABSENTEEISM(Nullable<System.DateTime> startDateAbsent, string employeeID, string absentType, Nullable<System.DateTime> endDateAbsent, string sktAbsentCode, string payrollAbsentCode, string ePaf, string attachment, string attachmentPath, Nullable<System.DateTime> createdDate, string createdBy, Nullable<System.DateTime> updatedDate, string updatedBy, string employeeNumber, string locationCode, string unitCode, string groupCode, Nullable<System.DateTime> transactionDate, Nullable<int> shift)
        {
            var startDateAbsentParameter = startDateAbsent.HasValue ?
                new ObjectParameter("StartDateAbsent", startDateAbsent) :
                new ObjectParameter("StartDateAbsent", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var absentTypeParameter = absentType != null ?
                new ObjectParameter("AbsentType", absentType) :
                new ObjectParameter("AbsentType", typeof(string));
    
            var endDateAbsentParameter = endDateAbsent.HasValue ?
                new ObjectParameter("EndDateAbsent", endDateAbsent) :
                new ObjectParameter("EndDateAbsent", typeof(System.DateTime));
    
            var sktAbsentCodeParameter = sktAbsentCode != null ?
                new ObjectParameter("SktAbsentCode", sktAbsentCode) :
                new ObjectParameter("SktAbsentCode", typeof(string));
    
            var payrollAbsentCodeParameter = payrollAbsentCode != null ?
                new ObjectParameter("PayrollAbsentCode", payrollAbsentCode) :
                new ObjectParameter("PayrollAbsentCode", typeof(string));
    
            var ePafParameter = ePaf != null ?
                new ObjectParameter("ePaf", ePaf) :
                new ObjectParameter("ePaf", typeof(string));
    
            var attachmentParameter = attachment != null ?
                new ObjectParameter("Attachment", attachment) :
                new ObjectParameter("Attachment", typeof(string));
    
            var attachmentPathParameter = attachmentPath != null ?
                new ObjectParameter("AttachmentPath", attachmentPath) :
                new ObjectParameter("AttachmentPath", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_WORKER_ABSENTEEISM", startDateAbsentParameter, employeeIDParameter, absentTypeParameter, endDateAbsentParameter, sktAbsentCodeParameter, payrollAbsentCodeParameter, ePafParameter, attachmentParameter, attachmentPathParameter, createdDateParameter, createdByParameter, updatedDateParameter, updatedByParameter, employeeNumberParameter, locationCodeParameter, unitCodeParameter, groupCodeParameter, transactionDateParameter, shiftParameter);
        }
    
        public virtual int EDIT_PLANT_PRODUCTION_ENTRY(string productionEntryCode, string employeeID, string employeeNumber, string statusEmp, Nullable<int> statusIdentifier, Nullable<System.DateTime> startDateAbsent, string absentType, Nullable<decimal> prodCapacity, Nullable<float> prodTarget, Nullable<float> prodActual, string absentRemark, string absentCodeEblek, string absentCodePayroll, Nullable<System.DateTime> updatedDate, string updatedBy, Nullable<bool> isFromAbsenteeism, string saveType, string locationCode, string unitCode, string groupCode, Nullable<int> shift)
        {
            var productionEntryCodeParameter = productionEntryCode != null ?
                new ObjectParameter("ProductionEntryCode", productionEntryCode) :
                new ObjectParameter("ProductionEntryCode", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var statusEmpParameter = statusEmp != null ?
                new ObjectParameter("StatusEmp", statusEmp) :
                new ObjectParameter("StatusEmp", typeof(string));
    
            var statusIdentifierParameter = statusIdentifier.HasValue ?
                new ObjectParameter("StatusIdentifier", statusIdentifier) :
                new ObjectParameter("StatusIdentifier", typeof(int));
    
            var startDateAbsentParameter = startDateAbsent.HasValue ?
                new ObjectParameter("StartDateAbsent", startDateAbsent) :
                new ObjectParameter("StartDateAbsent", typeof(System.DateTime));
    
            var absentTypeParameter = absentType != null ?
                new ObjectParameter("AbsentType", absentType) :
                new ObjectParameter("AbsentType", typeof(string));
    
            var prodCapacityParameter = prodCapacity.HasValue ?
                new ObjectParameter("ProdCapacity", prodCapacity) :
                new ObjectParameter("ProdCapacity", typeof(decimal));
    
            var prodTargetParameter = prodTarget.HasValue ?
                new ObjectParameter("ProdTarget", prodTarget) :
                new ObjectParameter("ProdTarget", typeof(float));
    
            var prodActualParameter = prodActual.HasValue ?
                new ObjectParameter("ProdActual", prodActual) :
                new ObjectParameter("ProdActual", typeof(float));
    
            var absentRemarkParameter = absentRemark != null ?
                new ObjectParameter("AbsentRemark", absentRemark) :
                new ObjectParameter("AbsentRemark", typeof(string));
    
            var absentCodeEblekParameter = absentCodeEblek != null ?
                new ObjectParameter("AbsentCodeEblek", absentCodeEblek) :
                new ObjectParameter("AbsentCodeEblek", typeof(string));
    
            var absentCodePayrollParameter = absentCodePayroll != null ?
                new ObjectParameter("AbsentCodePayroll", absentCodePayroll) :
                new ObjectParameter("AbsentCodePayroll", typeof(string));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var isFromAbsenteeismParameter = isFromAbsenteeism.HasValue ?
                new ObjectParameter("IsFromAbsenteeism", isFromAbsenteeism) :
                new ObjectParameter("IsFromAbsenteeism", typeof(bool));
    
            var saveTypeParameter = saveType != null ?
                new ObjectParameter("SaveType", saveType) :
                new ObjectParameter("SaveType", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EDIT_PLANT_PRODUCTION_ENTRY", productionEntryCodeParameter, employeeIDParameter, employeeNumberParameter, statusEmpParameter, statusIdentifierParameter, startDateAbsentParameter, absentTypeParameter, prodCapacityParameter, prodTargetParameter, prodActualParameter, absentRemarkParameter, absentCodeEblekParameter, absentCodePayrollParameter, updatedDateParameter, updatedByParameter, isFromAbsenteeismParameter, saveTypeParameter, locationCodeParameter, unitCodeParameter, groupCodeParameter, shiftParameter);
        }
    
        [DbFunction("SKTISEntities", "GetTransactionHistoryWagesProdcardCorrection")]
        public virtual IQueryable<GetTransactionHistoryWagesProdcardCorrection_Result> GetTransactionHistoryWagesProdcardCorrection(string transactionCode)
        {
            var transactionCodeParameter = transactionCode != null ?
                new ObjectParameter("transactionCode", transactionCode) :
                new ObjectParameter("transactionCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTransactionHistoryWagesProdcardCorrection_Result>("[SKTISEntities].[GetTransactionHistoryWagesProdcardCorrection](@transactionCode)", transactionCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "GetTransactionHistory")]
        public virtual IQueryable<GetTransactionHistory_Result> GetTransactionHistory(string transactionCode, string pageSource)
        {
            var transactionCodeParameter = transactionCode != null ?
                new ObjectParameter("transactionCode", transactionCode) :
                new ObjectParameter("transactionCode", typeof(string));
    
            var pageSourceParameter = pageSource != null ?
                new ObjectParameter("pageSource", pageSource) :
                new ObjectParameter("pageSource", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTransactionHistory_Result>("[SKTISEntities].[GetTransactionHistory](@transactionCode, @pageSource)", transactionCodeParameter, pageSourceParameter);
        }
    
        public virtual int INSERT_DEFAULT_TARGET_ACTUAL_ENTRY(string productionEntryCode, string saveType)
        {
            var productionEntryCodeParameter = productionEntryCode != null ?
                new ObjectParameter("ProductionEntryCode", productionEntryCode) :
                new ObjectParameter("ProductionEntryCode", typeof(string));
    
            var saveTypeParameter = saveType != null ?
                new ObjectParameter("SaveType", saveType) :
                new ObjectParameter("SaveType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_DEFAULT_TARGET_ACTUAL_ENTRY", productionEntryCodeParameter, saveTypeParameter);
        }
    
        [DbFunction("SKTISEntities", "RoleButtonChecker")]
        public virtual IQueryable<Nullable<int>> RoleButtonChecker(string transactionCode, Nullable<int> iDRole, string page, string button)
        {
            var transactionCodeParameter = transactionCode != null ?
                new ObjectParameter("TransactionCode", transactionCode) :
                new ObjectParameter("TransactionCode", typeof(string));
    
            var iDRoleParameter = iDRole.HasValue ?
                new ObjectParameter("IDRole", iDRole) :
                new ObjectParameter("IDRole", typeof(int));
    
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            var buttonParameter = button != null ?
                new ObjectParameter("Button", button) :
                new ObjectParameter("Button", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[SKTISEntities].[RoleButtonChecker](@TransactionCode, @IDRole, @Page, @Button)", transactionCodeParameter, iDRoleParameter, pageParameter, buttonParameter);
        }
    
        public virtual int BaseExeReportByProcess(string locationCode, string brandCode, string processGroup, string kPSYear, string kPSWeek, string createdBy, string updatedBy, Nullable<System.DateTime> productionDate, string unitCode)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("ProcessGroup", processGroup) :
                new ObjectParameter("ProcessGroup", typeof(string));
    
            var kPSYearParameter = kPSYear != null ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(string));
    
            var kPSWeekParameter = kPSWeek != null ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("ProductionDate", productionDate) :
                new ObjectParameter("ProductionDate", typeof(System.DateTime));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BaseExeReportByProcess", locationCodeParameter, brandCodeParameter, processGroupParameter, kPSYearParameter, kPSWeekParameter, createdByParameter, updatedByParameter, productionDateParameter, unitCodeParameter);
        }
    
        public virtual int TransactionLog(string separator, string page, Nullable<int> year, Nullable<int> week, string code_1, string code_2, string code_3, string code_4, string code_5, string code_6, string code_7, string code_8, string code_9, Nullable<System.DateTime> transaction_Date, string actionButton, Nullable<System.DateTime> actionTime, string userName, string transactionCode, string message, Nullable<int> iDRole)
        {
            var separatorParameter = separator != null ?
                new ObjectParameter("Separator", separator) :
                new ObjectParameter("Separator", typeof(string));
    
            var pageParameter = page != null ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("Week", week) :
                new ObjectParameter("Week", typeof(int));
    
            var code_1Parameter = code_1 != null ?
                new ObjectParameter("code_1", code_1) :
                new ObjectParameter("code_1", typeof(string));
    
            var code_2Parameter = code_2 != null ?
                new ObjectParameter("code_2", code_2) :
                new ObjectParameter("code_2", typeof(string));
    
            var code_3Parameter = code_3 != null ?
                new ObjectParameter("code_3", code_3) :
                new ObjectParameter("code_3", typeof(string));
    
            var code_4Parameter = code_4 != null ?
                new ObjectParameter("code_4", code_4) :
                new ObjectParameter("code_4", typeof(string));
    
            var code_5Parameter = code_5 != null ?
                new ObjectParameter("code_5", code_5) :
                new ObjectParameter("code_5", typeof(string));
    
            var code_6Parameter = code_6 != null ?
                new ObjectParameter("code_6", code_6) :
                new ObjectParameter("code_6", typeof(string));
    
            var code_7Parameter = code_7 != null ?
                new ObjectParameter("code_7", code_7) :
                new ObjectParameter("code_7", typeof(string));
    
            var code_8Parameter = code_8 != null ?
                new ObjectParameter("code_8", code_8) :
                new ObjectParameter("code_8", typeof(string));
    
            var code_9Parameter = code_9 != null ?
                new ObjectParameter("code_9", code_9) :
                new ObjectParameter("code_9", typeof(string));
    
            var transaction_DateParameter = transaction_Date.HasValue ?
                new ObjectParameter("Transaction_Date", transaction_Date) :
                new ObjectParameter("Transaction_Date", typeof(System.DateTime));
    
            var actionButtonParameter = actionButton != null ?
                new ObjectParameter("ActionButton", actionButton) :
                new ObjectParameter("ActionButton", typeof(string));
    
            var actionTimeParameter = actionTime.HasValue ?
                new ObjectParameter("ActionTime", actionTime) :
                new ObjectParameter("ActionTime", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var transactionCodeParameter = transactionCode != null ?
                new ObjectParameter("TransactionCode", transactionCode) :
                new ObjectParameter("TransactionCode", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var iDRoleParameter = iDRole.HasValue ?
                new ObjectParameter("IDRole", iDRole) :
                new ObjectParameter("IDRole", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransactionLog", separatorParameter, pageParameter, yearParameter, weekParameter, code_1Parameter, code_2Parameter, code_3Parameter, code_4Parameter, code_5Parameter, code_6Parameter, code_7Parameter, code_8Parameter, code_9Parameter, transaction_DateParameter, actionButtonParameter, actionTimeParameter, userNameParameter, transactionCodeParameter, messageParameter, iDRoleParameter);
        }
    
        [DbFunction("SKTISEntities", "GetExeReportDailyProductionAchievement")]
        public virtual IQueryable<GetExeReportDailyProductionAchievement_Result> GetExeReportDailyProductionAchievement(string locationCode, Nullable<int> kpsWeek, Nullable<int> kpsYear)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var kpsWeekParameter = kpsWeek.HasValue ?
                new ObjectParameter("KpsWeek", kpsWeek) :
                new ObjectParameter("KpsWeek", typeof(int));
    
            var kpsYearParameter = kpsYear.HasValue ?
                new ObjectParameter("KpsYear", kpsYear) :
                new ObjectParameter("KpsYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetExeReportDailyProductionAchievement_Result>("[SKTISEntities].[GetExeReportDailyProductionAchievement](@LocationCode, @KpsWeek, @KpsYear)", locationCodeParameter, kpsWeekParameter, kpsYearParameter);
        }
    
        [DbFunction("SKTISEntities", "GetInventoryView")]
        public virtual IQueryable<GetInventoryView_Result> GetInventoryView(string inventoryDate, string locationCode, string itemType)
        {
            var inventoryDateParameter = inventoryDate != null ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(string));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetInventoryView_Result>("[SKTISEntities].[GetInventoryView](@InventoryDate, @LocationCode, @ItemType)", inventoryDateParameter, locationCodeParameter, itemTypeParameter);
        }
    
        public virtual int CopyDeltaView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyDeltaView");
        }
    
        public virtual int GENERATE_PRODUCTION_CARD(string locationCode, string unitCode, Nullable<int> shift, string brandCode, Nullable<int> kpsYear, Nullable<int> kpsWeek, Nullable<System.DateTime> productionDate, string groups, string userName)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var kpsYearParameter = kpsYear.HasValue ?
                new ObjectParameter("kpsYear", kpsYear) :
                new ObjectParameter("kpsYear", typeof(int));
    
            var kpsWeekParameter = kpsWeek.HasValue ?
                new ObjectParameter("kpsWeek", kpsWeek) :
                new ObjectParameter("kpsWeek", typeof(int));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("productionDate", productionDate) :
                new ObjectParameter("productionDate", typeof(System.DateTime));
    
            var groupsParameter = groups != null ?
                new ObjectParameter("groups", groups) :
                new ObjectParameter("groups", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GENERATE_PRODUCTION_CARD", locationCodeParameter, unitCodeParameter, shiftParameter, brandCodeParameter, kpsYearParameter, kpsWeekParameter, productionDateParameter, groupsParameter, userNameParameter);
        }
    
        [DbFunction("SKTISEntities", "MaintenanceExecutionInventoryFunction")]
        public virtual IQueryable<MaintenanceExecutionInventoryFunction_Result> MaintenanceExecutionInventoryFunction(Nullable<System.DateTime> inventoryDate, string locationCode, string itemType, string userAD)
        {
            var inventoryDateParameter = inventoryDate.HasValue ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var userADParameter = userAD != null ?
                new ObjectParameter("UserAD", userAD) :
                new ObjectParameter("UserAD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MaintenanceExecutionInventoryFunction_Result>("[SKTISEntities].[MaintenanceExecutionInventoryFunction](@InventoryDate, @LocationCode, @ItemType, @UserAD)", inventoryDateParameter, locationCodeParameter, itemTypeParameter, userADParameter);
        }
    
        public virtual int InsertDefaultExeReportByProcess(string locationCode, string brandCode, string unitCode, Nullable<int> kpsYear, Nullable<int> kpsWeek, Nullable<System.DateTime> productionDate, string createdBy, string updatedBy)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("brandCode", brandCode) :
                new ObjectParameter("brandCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("unitCode", unitCode) :
                new ObjectParameter("unitCode", typeof(string));
    
            var kpsYearParameter = kpsYear.HasValue ?
                new ObjectParameter("kpsYear", kpsYear) :
                new ObjectParameter("kpsYear", typeof(int));
    
            var kpsWeekParameter = kpsWeek.HasValue ?
                new ObjectParameter("kpsWeek", kpsWeek) :
                new ObjectParameter("kpsWeek", typeof(int));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("productionDate", productionDate) :
                new ObjectParameter("productionDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("updatedBy", updatedBy) :
                new ObjectParameter("updatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDefaultExeReportByProcess", locationCodeParameter, brandCodeParameter, unitCodeParameter, kpsYearParameter, kpsWeekParameter, productionDateParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int SP_SubmitTpoTpk(string locationCode, string brandCode, Nullable<int> kPSYear, Nullable<int> kPSWeek, string userName)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var kPSYearParameter = kPSYear.HasValue ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(int));
    
            var kPSWeekParameter = kPSWeek.HasValue ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SubmitTpoTpk", locationCodeParameter, brandCodeParameter, kPSYearParameter, kPSWeekParameter, userNameParameter);
        }
    
        [DbFunction("SKTISEntities", "GetMaintenanceEquipmentStockFunction")]
        public virtual IQueryable<GetMaintenanceEquipmentStockFunction_Result> GetMaintenanceEquipmentStockFunction(string locationCode, string unitCode, Nullable<System.DateTime> inventoryDate)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var inventoryDateParameter = inventoryDate.HasValue ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMaintenanceEquipmentStockFunction_Result>("[SKTISEntities].[GetMaintenanceEquipmentStockFunction](@LocationCode, @UnitCode, @InventoryDate)", locationCodeParameter, unitCodeParameter, inventoryDateParameter);
        }
    
        public virtual int MaintenanceExecutionInventoryProcedure(Nullable<System.DateTime> inventoryDate, string locationCode, string qParam, string userAD)
        {
            var inventoryDateParameter = inventoryDate.HasValue ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var qParamParameter = qParam != null ?
                new ObjectParameter("QParam", qParam) :
                new ObjectParameter("QParam", typeof(string));
    
            var userADParameter = userAD != null ?
                new ObjectParameter("UserAD", userAD) :
                new ObjectParameter("UserAD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MaintenanceExecutionInventoryProcedure", inventoryDateParameter, locationCodeParameter, qParamParameter, userADParameter);
        }
    
        [DbFunction("SKTISEntities", "GetDeltaViewFunction")]
        public virtual IQueryable<GetDeltaViewFunction_Result> GetDeltaViewFunction(string locationCode, Nullable<System.DateTime> inventoryDate)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var inventoryDateParameter = inventoryDate.HasValue ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDeltaViewFunction_Result>("[SKTISEntities].[GetDeltaViewFunction](@LocationCode, @InventoryDate)", locationCodeParameter, inventoryDateParameter);
        }
    
        [DbFunction("SKTISEntities", "MntcInventoryAllFunction")]
        public virtual IQueryable<MntcInventoryAllFunction_Result> MntcInventoryAllFunction(Nullable<System.DateTime> inventoryDate, string locationCode, string itemStatus, string itemCode, string unitCode, string userAD)
        {
            var inventoryDateParameter = inventoryDate.HasValue ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var itemStatusParameter = itemStatus != null ?
                new ObjectParameter("ItemStatus", itemStatus) :
                new ObjectParameter("ItemStatus", typeof(string));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var userADParameter = userAD != null ?
                new ObjectParameter("UserAD", userAD) :
                new ObjectParameter("UserAD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MntcInventoryAllFunction_Result>("[SKTISEntities].[MntcInventoryAllFunction](@InventoryDate, @LocationCode, @ItemStatus, @ItemCode, @UnitCode, @UserAD)", inventoryDateParameter, locationCodeParameter, itemStatusParameter, itemCodeParameter, unitCodeParameter, userADParameter);
        }
    
        public virtual int MntcInventoryAllProcedure(Nullable<System.DateTime> inventoryDate, string locationCode, string qParam, string userAD)
        {
            var inventoryDateParameter = inventoryDate.HasValue ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var qParamParameter = qParam != null ?
                new ObjectParameter("QParam", qParam) :
                new ObjectParameter("QParam", typeof(string));
    
            var userADParameter = userAD != null ?
                new ObjectParameter("UserAD", userAD) :
                new ObjectParameter("UserAD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MntcInventoryAllProcedure", inventoryDateParameter, locationCodeParameter, qParamParameter, userADParameter);
        }
    
        public virtual ObjectResult<GenerateP1TemplateGL_Result> GenerateP1TemplateGL(Nullable<System.DateTime> paramdateTo, Nullable<int> paramWeek, Nullable<int> paramYear, string paramLocation)
        {
            var paramdateToParameter = paramdateTo.HasValue ?
                new ObjectParameter("ParamdateTo", paramdateTo) :
                new ObjectParameter("ParamdateTo", typeof(System.DateTime));
    
            var paramWeekParameter = paramWeek.HasValue ?
                new ObjectParameter("ParamWeek", paramWeek) :
                new ObjectParameter("ParamWeek", typeof(int));
    
            var paramYearParameter = paramYear.HasValue ?
                new ObjectParameter("paramYear", paramYear) :
                new ObjectParameter("paramYear", typeof(int));
    
            var paramLocationParameter = paramLocation != null ?
                new ObjectParameter("ParamLocation", paramLocation) :
                new ObjectParameter("ParamLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateP1TemplateGL_Result>("GenerateP1TemplateGL", paramdateToParameter, paramWeekParameter, paramYearParameter, paramLocationParameter);
        }
    
        public virtual ObjectResult<GenerateP1TemplateAP_Result> GenerateP1TemplateAP(string paramLocation, Nullable<int> paramWeek, Nullable<int> paramYear)
        {
            var paramLocationParameter = paramLocation != null ?
                new ObjectParameter("ParamLocation", paramLocation) :
                new ObjectParameter("ParamLocation", typeof(string));
    
            var paramWeekParameter = paramWeek.HasValue ?
                new ObjectParameter("ParamWeek", paramWeek) :
                new ObjectParameter("ParamWeek", typeof(int));
    
            var paramYearParameter = paramYear.HasValue ?
                new ObjectParameter("ParamYear", paramYear) :
                new ObjectParameter("ParamYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateP1TemplateAP_Result>("GenerateP1TemplateAP", paramLocationParameter, paramWeekParameter, paramYearParameter);
        }
    
        [DbFunction("SKTISEntities", "GetProductionCardApprovalList")]
        public virtual IQueryable<GetProductionCardApprovalList_Result> GetProductionCardApprovalList(string paramCurrentUser, Nullable<System.DateTime> paramStartDate, string paramTransactionStatus, Nullable<int> paramIDResponsibility)
        {
            var paramCurrentUserParameter = paramCurrentUser != null ?
                new ObjectParameter("ParamCurrentUser", paramCurrentUser) :
                new ObjectParameter("ParamCurrentUser", typeof(string));
    
            var paramStartDateParameter = paramStartDate.HasValue ?
                new ObjectParameter("ParamStartDate", paramStartDate) :
                new ObjectParameter("ParamStartDate", typeof(System.DateTime));
    
            var paramTransactionStatusParameter = paramTransactionStatus != null ?
                new ObjectParameter("ParamTransactionStatus", paramTransactionStatus) :
                new ObjectParameter("ParamTransactionStatus", typeof(string));
    
            var paramIDResponsibilityParameter = paramIDResponsibility.HasValue ?
                new ObjectParameter("ParamIDResponsibility", paramIDResponsibility) :
                new ObjectParameter("ParamIDResponsibility", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetProductionCardApprovalList_Result>("[SKTISEntities].[GetProductionCardApprovalList](@ParamCurrentUser, @ParamStartDate, @ParamTransactionStatus, @ParamIDResponsibility)", paramCurrentUserParameter, paramStartDateParameter, paramTransactionStatusParameter, paramIDResponsibilityParameter);
        }
    
        [DbFunction("SKTISEntities", "MntcEquipmentStockFunction")]
        public virtual IQueryable<MntcEquipmentStockFunction_Result> MntcEquipmentStockFunction(Nullable<System.DateTime> inventoryDate, string locationCode, string unitCode, string userAD)
        {
            var inventoryDateParameter = inventoryDate.HasValue ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var userADParameter = userAD != null ?
                new ObjectParameter("UserAD", userAD) :
                new ObjectParameter("UserAD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MntcEquipmentStockFunction_Result>("[SKTISEntities].[MntcEquipmentStockFunction](@InventoryDate, @LocationCode, @UnitCode, @UserAD)", inventoryDateParameter, locationCodeParameter, unitCodeParameter, userADParameter);
        }
    
        public virtual int MntcEquipmentStockProcedure(string locationCode, string unitCode, Nullable<System.DateTime> inventoryDate, string qParam, string userAD)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var inventoryDateParameter = inventoryDate.HasValue ?
                new ObjectParameter("InventoryDate", inventoryDate) :
                new ObjectParameter("InventoryDate", typeof(System.DateTime));
    
            var qParamParameter = qParam != null ?
                new ObjectParameter("QParam", qParam) :
                new ObjectParameter("QParam", typeof(string));
    
            var userADParameter = userAD != null ?
                new ObjectParameter("UserAD", userAD) :
                new ObjectParameter("UserAD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MntcEquipmentStockProcedure", locationCodeParameter, unitCodeParameter, inventoryDateParameter, qParamParameter, userADParameter);
        }
    
        [DbFunction("SKTISEntities", "ExeReportByProcessFunc")]
        public virtual IQueryable<ExeReportByProcessFunc_Result> ExeReportByProcessFunc(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string locationCode, string unitCode, Nullable<int> shift, string brandCode)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ExeReportByProcessFunc_Result>("[SKTISEntities].[ExeReportByProcessFunc](@StartDate, @EndDate, @LocationCode, @UnitCode, @Shift, @BrandCode)", startDateParameter, endDateParameter, locationCodeParameter, unitCodeParameter, shiftParameter, brandCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "GetReportByStatus")]
        public virtual IQueryable<GetReportByStatus_Result> GetReportByStatus(string paramLocationCode, string paramUnitCode, Nullable<int> paramShift, string paramBrandGroup, string paramBrandCode, Nullable<System.DateTime> paramProdDateFrom, Nullable<System.DateTime> paramProdDateTo)
        {
            var paramLocationCodeParameter = paramLocationCode != null ?
                new ObjectParameter("paramLocationCode", paramLocationCode) :
                new ObjectParameter("paramLocationCode", typeof(string));
    
            var paramUnitCodeParameter = paramUnitCode != null ?
                new ObjectParameter("paramUnitCode", paramUnitCode) :
                new ObjectParameter("paramUnitCode", typeof(string));
    
            var paramShiftParameter = paramShift.HasValue ?
                new ObjectParameter("paramShift", paramShift) :
                new ObjectParameter("paramShift", typeof(int));
    
            var paramBrandGroupParameter = paramBrandGroup != null ?
                new ObjectParameter("paramBrandGroup", paramBrandGroup) :
                new ObjectParameter("paramBrandGroup", typeof(string));
    
            var paramBrandCodeParameter = paramBrandCode != null ?
                new ObjectParameter("paramBrandCode", paramBrandCode) :
                new ObjectParameter("paramBrandCode", typeof(string));
    
            var paramProdDateFromParameter = paramProdDateFrom.HasValue ?
                new ObjectParameter("paramProdDateFrom", paramProdDateFrom) :
                new ObjectParameter("paramProdDateFrom", typeof(System.DateTime));
    
            var paramProdDateToParameter = paramProdDateTo.HasValue ?
                new ObjectParameter("paramProdDateTo", paramProdDateTo) :
                new ObjectParameter("paramProdDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetReportByStatus_Result>("[SKTISEntities].[GetReportByStatus](@paramLocationCode, @paramUnitCode, @paramShift, @paramBrandGroup, @paramBrandCode, @paramProdDateFrom, @paramProdDateTo)", paramLocationCodeParameter, paramUnitCodeParameter, paramShiftParameter, paramBrandGroupParameter, paramBrandCodeParameter, paramProdDateFromParameter, paramProdDateToParameter);
        }
    
        [DbFunction("SKTISEntities", "GetReportByStatusTotalWorkHour")]
        public virtual IQueryable<GetReportByStatusTotalWorkHour_Result> GetReportByStatusTotalWorkHour(string paramLocationCode, string paramUnitCode, Nullable<int> paramShift, string paramBrandGroup, string paramBrandCode, Nullable<System.DateTime> paramProdDateFrom, Nullable<System.DateTime> paramProdDateTo)
        {
            var paramLocationCodeParameter = paramLocationCode != null ?
                new ObjectParameter("paramLocationCode", paramLocationCode) :
                new ObjectParameter("paramLocationCode", typeof(string));
    
            var paramUnitCodeParameter = paramUnitCode != null ?
                new ObjectParameter("paramUnitCode", paramUnitCode) :
                new ObjectParameter("paramUnitCode", typeof(string));
    
            var paramShiftParameter = paramShift.HasValue ?
                new ObjectParameter("paramShift", paramShift) :
                new ObjectParameter("paramShift", typeof(int));
    
            var paramBrandGroupParameter = paramBrandGroup != null ?
                new ObjectParameter("paramBrandGroup", paramBrandGroup) :
                new ObjectParameter("paramBrandGroup", typeof(string));
    
            var paramBrandCodeParameter = paramBrandCode != null ?
                new ObjectParameter("paramBrandCode", paramBrandCode) :
                new ObjectParameter("paramBrandCode", typeof(string));
    
            var paramProdDateFromParameter = paramProdDateFrom.HasValue ?
                new ObjectParameter("paramProdDateFrom", paramProdDateFrom) :
                new ObjectParameter("paramProdDateFrom", typeof(System.DateTime));
    
            var paramProdDateToParameter = paramProdDateTo.HasValue ?
                new ObjectParameter("paramProdDateTo", paramProdDateTo) :
                new ObjectParameter("paramProdDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetReportByStatusTotalWorkHour_Result>("[SKTISEntities].[GetReportByStatusTotalWorkHour](@paramLocationCode, @paramUnitCode, @paramShift, @paramBrandGroup, @paramBrandCode, @paramProdDateFrom, @paramProdDateTo)", paramLocationCodeParameter, paramUnitCodeParameter, paramShiftParameter, paramBrandGroupParameter, paramBrandCodeParameter, paramProdDateFromParameter, paramProdDateToParameter);
        }
    
        public virtual ObjectResult<WAGES_ABSENT_REPORT_BYEMPLOYEE_Result> WAGES_ABSENT_REPORT_BYEMPLOYEE(Nullable<System.DateTime> paramStartDate, Nullable<System.DateTime> paramEndDate, string paramLocationCode, string paramUnitCode, string paramGroupCode, string paramProcessGroup)
        {
            var paramStartDateParameter = paramStartDate.HasValue ?
                new ObjectParameter("paramStartDate", paramStartDate) :
                new ObjectParameter("paramStartDate", typeof(System.DateTime));
    
            var paramEndDateParameter = paramEndDate.HasValue ?
                new ObjectParameter("paramEndDate", paramEndDate) :
                new ObjectParameter("paramEndDate", typeof(System.DateTime));
    
            var paramLocationCodeParameter = paramLocationCode != null ?
                new ObjectParameter("paramLocationCode", paramLocationCode) :
                new ObjectParameter("paramLocationCode", typeof(string));
    
            var paramUnitCodeParameter = paramUnitCode != null ?
                new ObjectParameter("paramUnitCode", paramUnitCode) :
                new ObjectParameter("paramUnitCode", typeof(string));
    
            var paramGroupCodeParameter = paramGroupCode != null ?
                new ObjectParameter("paramGroupCode", paramGroupCode) :
                new ObjectParameter("paramGroupCode", typeof(string));
    
            var paramProcessGroupParameter = paramProcessGroup != null ?
                new ObjectParameter("paramProcessGroup", paramProcessGroup) :
                new ObjectParameter("paramProcessGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WAGES_ABSENT_REPORT_BYEMPLOYEE_Result>("WAGES_ABSENT_REPORT_BYEMPLOYEE", paramStartDateParameter, paramEndDateParameter, paramLocationCodeParameter, paramUnitCodeParameter, paramGroupCodeParameter, paramProcessGroupParameter);
        }
    
        public virtual ObjectResult<WAGES_ABSENT_REPORT_BYGROUP_Result> WAGES_ABSENT_REPORT_BYGROUP(Nullable<System.DateTime> paramStartDate, Nullable<System.DateTime> paramEndDate, string paramLocationCode, string paramUnitCode, string paramProcessGroup)
        {
            var paramStartDateParameter = paramStartDate.HasValue ?
                new ObjectParameter("paramStartDate", paramStartDate) :
                new ObjectParameter("paramStartDate", typeof(System.DateTime));
    
            var paramEndDateParameter = paramEndDate.HasValue ?
                new ObjectParameter("paramEndDate", paramEndDate) :
                new ObjectParameter("paramEndDate", typeof(System.DateTime));
    
            var paramLocationCodeParameter = paramLocationCode != null ?
                new ObjectParameter("paramLocationCode", paramLocationCode) :
                new ObjectParameter("paramLocationCode", typeof(string));
    
            var paramUnitCodeParameter = paramUnitCode != null ?
                new ObjectParameter("paramUnitCode", paramUnitCode) :
                new ObjectParameter("paramUnitCode", typeof(string));
    
            var paramProcessGroupParameter = paramProcessGroup != null ?
                new ObjectParameter("paramProcessGroup", paramProcessGroup) :
                new ObjectParameter("paramProcessGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WAGES_ABSENT_REPORT_BYGROUP_Result>("WAGES_ABSENT_REPORT_BYGROUP", paramStartDateParameter, paramEndDateParameter, paramLocationCodeParameter, paramUnitCodeParameter, paramProcessGroupParameter);
        }
    
        public virtual ObjectResult<WAGES_ABSENT_REPORT_BYEMPLOYEE_DETAIL_Result> WAGES_ABSENT_REPORT_BYEMPLOYEE_DETAIL(Nullable<System.DateTime> paramStartDate, Nullable<System.DateTime> paramEndDate, string paramEmployeeID)
        {
            var paramStartDateParameter = paramStartDate.HasValue ?
                new ObjectParameter("paramStartDate", paramStartDate) :
                new ObjectParameter("paramStartDate", typeof(System.DateTime));
    
            var paramEndDateParameter = paramEndDate.HasValue ?
                new ObjectParameter("paramEndDate", paramEndDate) :
                new ObjectParameter("paramEndDate", typeof(System.DateTime));
    
            var paramEmployeeIDParameter = paramEmployeeID != null ?
                new ObjectParameter("paramEmployeeID", paramEmployeeID) :
                new ObjectParameter("paramEmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WAGES_ABSENT_REPORT_BYEMPLOYEE_DETAIL_Result>("WAGES_ABSENT_REPORT_BYEMPLOYEE_DETAIL", paramStartDateParameter, paramEndDateParameter, paramEmployeeIDParameter);
        }
    
        public virtual ObjectResult<GetWagesProductionCardApprovalView_Result> GetWagesProductionCardApprovalView(string locationCode, string unitCode, string revisiontype)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("unitCode", unitCode) :
                new ObjectParameter("unitCode", typeof(string));
    
            var revisiontypeParameter = revisiontype != null ?
                new ObjectParameter("revisiontype", revisiontype) :
                new ObjectParameter("revisiontype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWagesProductionCardApprovalView_Result>("GetWagesProductionCardApprovalView", locationCodeParameter, unitCodeParameter, revisiontypeParameter);
        }
    
        public virtual int BaseExeReportByProcessGenerator(string locationCode, string brandCode, string processGroup, string kPSYear, string kPSWeek, string createdBy, string updatedBy, Nullable<System.DateTime> productionDate, string unitCode)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("ProcessGroup", processGroup) :
                new ObjectParameter("ProcessGroup", typeof(string));
    
            var kPSYearParameter = kPSYear != null ?
                new ObjectParameter("KPSYear", kPSYear) :
                new ObjectParameter("KPSYear", typeof(string));
    
            var kPSWeekParameter = kPSWeek != null ?
                new ObjectParameter("KPSWeek", kPSWeek) :
                new ObjectParameter("KPSWeek", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("ProductionDate", productionDate) :
                new ObjectParameter("ProductionDate", typeof(System.DateTime));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BaseExeReportByProcessGenerator", locationCodeParameter, brandCodeParameter, processGroupParameter, kPSYearParameter, kPSWeekParameter, createdByParameter, updatedByParameter, productionDateParameter, unitCodeParameter);
        }
    
        [DbFunction("SKTISEntities", "ExeReportByProcessFuncParent")]
        public virtual IQueryable<ExeReportByProcessFuncParent_Result> ExeReportByProcessFuncParent(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string locationCode, string unitCode, Nullable<int> shift, string brandCode)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            var shiftParameter = shift.HasValue ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(int));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("BrandCode", brandCode) :
                new ObjectParameter("BrandCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ExeReportByProcessFuncParent_Result>("[SKTISEntities].[ExeReportByProcessFuncParent](@StartDate, @EndDate, @LocationCode, @UnitCode, @Shift, @BrandCode)", startDateParameter, endDateParameter, locationCodeParameter, unitCodeParameter, shiftParameter, brandCodeParameter);
        }
    
        public virtual ObjectResult<RoleButtonWagesApprovalDetail_Result> RoleButtonWagesApprovalDetail(string locationCode, string unitCode, string shift, string date, string brandGroupCode, string brandCode, Nullable<int> roleId, string revisiontype, string currentDate)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("unitCode", unitCode) :
                new ObjectParameter("unitCode", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var brandGroupCodeParameter = brandGroupCode != null ?
                new ObjectParameter("brandGroupCode", brandGroupCode) :
                new ObjectParameter("brandGroupCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("brandCode", brandCode) :
                new ObjectParameter("brandCode", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var revisiontypeParameter = revisiontype != null ?
                new ObjectParameter("revisiontype", revisiontype) :
                new ObjectParameter("revisiontype", typeof(string));
    
            var currentDateParameter = currentDate != null ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleButtonWagesApprovalDetail_Result>("RoleButtonWagesApprovalDetail", locationCodeParameter, unitCodeParameter, shiftParameter, dateParameter, brandGroupCodeParameter, brandCodeParameter, roleIdParameter, revisiontypeParameter, currentDateParameter);
        }
    
        public virtual int CLEAN_TPO_ENTRY_TEMP(string listProductionEntryCode)
        {
            var listProductionEntryCodeParameter = listProductionEntryCode != null ?
                new ObjectParameter("listProductionEntryCode", listProductionEntryCode) :
                new ObjectParameter("listProductionEntryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CLEAN_TPO_ENTRY_TEMP", listProductionEntryCodeParameter);
        }
    
        public virtual int UPLOAD_TPODAILY_COPYFROMTEMP(string listProductionEntryCode, string username)
        {
            var listProductionEntryCodeParameter = listProductionEntryCode != null ?
                new ObjectParameter("listProductionEntryCode", listProductionEntryCode) :
                new ObjectParameter("listProductionEntryCode", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPLOAD_TPODAILY_COPYFROMTEMP", listProductionEntryCodeParameter, usernameParameter);
        }
    
        public virtual int CLEAN_TPO_WORKHOUR_TEMP(string locationCode, string brandCode, Nullable<System.DateTime> productionDate, string processGroup, string statusEmp)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("brandCode", brandCode) :
                new ObjectParameter("brandCode", typeof(string));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("productionDate", productionDate) :
                new ObjectParameter("productionDate", typeof(System.DateTime));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("processGroup", processGroup) :
                new ObjectParameter("processGroup", typeof(string));
    
            var statusEmpParameter = statusEmp != null ?
                new ObjectParameter("statusEmp", statusEmp) :
                new ObjectParameter("statusEmp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CLEAN_TPO_WORKHOUR_TEMP", locationCodeParameter, brandCodeParameter, productionDateParameter, processGroupParameter, statusEmpParameter);
        }
    
        public virtual int UPLOAD_TPODAILY_COPY_ACTUALWORKHOURTEMP(string locationCode, string brandCode, Nullable<System.DateTime> productionDate, string processGroup, string statusEmp)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("locationCode", locationCode) :
                new ObjectParameter("locationCode", typeof(string));
    
            var brandCodeParameter = brandCode != null ?
                new ObjectParameter("brandCode", brandCode) :
                new ObjectParameter("brandCode", typeof(string));
    
            var productionDateParameter = productionDate.HasValue ?
                new ObjectParameter("productionDate", productionDate) :
                new ObjectParameter("productionDate", typeof(System.DateTime));
    
            var processGroupParameter = processGroup != null ?
                new ObjectParameter("processGroup", processGroup) :
                new ObjectParameter("processGroup", typeof(string));
    
            var statusEmpParameter = statusEmp != null ?
                new ObjectParameter("statusEmp", statusEmp) :
                new ObjectParameter("statusEmp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPLOAD_TPODAILY_COPY_ACTUALWORKHOURTEMP", locationCodeParameter, brandCodeParameter, productionDateParameter, processGroupParameter, statusEmpParameter);
        }
    
        public virtual int SUBMIT_TPO_ENTRY_VERIFICATION(string paramLocationCode, string paramBrandCode, Nullable<int> paramKPSYear, Nullable<int> paramKPSWeek, Nullable<System.DateTime> paramProdDate, string paramListProcess, string paramUser, Nullable<int> paramRole)
        {
            var paramLocationCodeParameter = paramLocationCode != null ?
                new ObjectParameter("paramLocationCode", paramLocationCode) :
                new ObjectParameter("paramLocationCode", typeof(string));
    
            var paramBrandCodeParameter = paramBrandCode != null ?
                new ObjectParameter("paramBrandCode", paramBrandCode) :
                new ObjectParameter("paramBrandCode", typeof(string));
    
            var paramKPSYearParameter = paramKPSYear.HasValue ?
                new ObjectParameter("paramKPSYear", paramKPSYear) :
                new ObjectParameter("paramKPSYear", typeof(int));
    
            var paramKPSWeekParameter = paramKPSWeek.HasValue ?
                new ObjectParameter("paramKPSWeek", paramKPSWeek) :
                new ObjectParameter("paramKPSWeek", typeof(int));
    
            var paramProdDateParameter = paramProdDate.HasValue ?
                new ObjectParameter("paramProdDate", paramProdDate) :
                new ObjectParameter("paramProdDate", typeof(System.DateTime));
    
            var paramListProcessParameter = paramListProcess != null ?
                new ObjectParameter("paramListProcess", paramListProcess) :
                new ObjectParameter("paramListProcess", typeof(string));
    
            var paramUserParameter = paramUser != null ?
                new ObjectParameter("paramUser", paramUser) :
                new ObjectParameter("paramUser", typeof(string));
    
            var paramRoleParameter = paramRole.HasValue ?
                new ObjectParameter("paramRole", paramRole) :
                new ObjectParameter("paramRole", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SUBMIT_TPO_ENTRY_VERIFICATION", paramLocationCodeParameter, paramBrandCodeParameter, paramKPSYearParameter, paramKPSWeekParameter, paramProdDateParameter, paramListProcessParameter, paramUserParameter, paramRoleParameter);
        }
    
        public virtual ObjectResult<AvailablePositionNumberView_Result> AvailablePositionNumberView(string locationCode, string groupCode, string unitCode)
        {
            var locationCodeParameter = locationCode != null ?
                new ObjectParameter("LocationCode", locationCode) :
                new ObjectParameter("LocationCode", typeof(string));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            var unitCodeParameter = unitCode != null ?
                new ObjectParameter("UnitCode", unitCode) :
                new ObjectParameter("UnitCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AvailablePositionNumberView_Result>("AvailablePositionNumberView", locationCodeParameter, groupCodeParameter, unitCodeParameter);
        }
    }
}
