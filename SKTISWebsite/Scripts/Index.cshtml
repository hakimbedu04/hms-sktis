@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MasterGenHoliday
@using SKTISWebsite.Helper
@model SKTISWebsite.Models.MasterGenHoliday.InitHolidayModel

@{ Html.SetPageTitle(@MasterGenHoliday.PageTitle); }

<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">@MasterGenHoliday.lblFilterLocation</label>
            <div class="col-lg-3">
                @Html.DropDownList("filterLocationCode", Model.LocationCode, new Dictionary<string, object> { { "data-bind", "value:$root.filterLocationCode, event : { change : $root.GetLocationNameFilter}" },
                                                                                                         { "class", "selectpicker show-tick form-controlt" },
                                                                                                         {"data-live-search","true"},{"id","ddlLocationCode"} })
            </div>
            <div class="col-lg-5">
                <span id="spLocationNameFilter" class="form-control" data-bind="value:$root.filtersLocationName" />
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">@MasterGenHoliday.lblFilterYear</label>
            <div class="col-lg-3">
                @Html.DropDownList("ddlYearFilter", Model.Years, new Dictionary<string, object> { { "data-bind", "value:$root.filterYear" },
                                                                                                  { "class", "selectpicker show-tick form-controlt" },
                                                                                                  {"data-live-search","true"},{"id","ddlYearFilter"} })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">@MasterGenHoliday.lblFilterDate</label>
            <div class="col-lg-3">
                <div class='input-group date time' data-bind="dateTimePicker: $root.filterHolidayDate, value:$root.filterHolidayDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true}">
                    <input id="ddlfilterHolidayDate" type='text' class="form-control" />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                @using (Html.BeginForm("GenerateExcel", "MasterGenHoliday", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                {
                    <input type="hidden" name="LocationCode" />
                    <input type="hidden" name="LocationName" />
                    <input type="hidden" name="Year" />
                    <input type="hidden" name="HolidayDate" />
                    <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>

    <div class="table-overflow">
        <table class="table table-striped">
            <thead>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'LocationCode'), css:sortCss('LocationCode', $data.sortExpression(), $data.sortOrder())">@MasterGenHoliday.lblFilterLocation</th>
                    <th data-bind="click:sortBy.bind($data,'HolidayDate'), css:sortCss('HolidayDate', $data.sortExpression(), $data.sortOrder())">@MasterGenHoliday.lblTitleHolidayDate</th>
                    <th data-bind="click:sortBy.bind($data,'Description'), css:sortCss('Description', $data.sortExpression(), $data.sortOrder())">@MasterGenHoliday.lblTitleDescription</th>
                    <th data-bind="click:sortBy.bind($data,'HolidayType'), css:sortCss('HolidayType', $data.sortExpression(), $data.sortOrder())">@MasterGenHoliday.lblTitleHolidayType</th>
                    <th data-bind="click:sortBy.bind($data,'StatusActive'), css:sortCss('StatusActive', $data.sortExpression(), $data.sortOrder())">@MasterGenHoliday.lblTitleActive</th>
                    <th data-bind="click:sortBy.bind($data,'Remark'), css:sortCss('Remark', $data.sortExpression(), $data.sortOrder())">@MasterGenHoliday.lblTitleRemark</th>
                    <th>@MasterGenHoliday.lblTitleUpdatedBy</th>
                    <th>@MasterGenHoliday.lblTitleUpdatedDate</th>
                </tr>
                <tr class="insertRow" data-bind="inlineAddProccessHoliday:[$data, $root.newData]">
                    <th>
                        <button data-target="#location" data-toggle="modal" class="btn btn-primary" type="button">Add</button>
                    </th>
                    <th>
                        <div class="input-group date time insidetable" data-bind="dateTimePicker: $root.newData.HolidayDate, value:$root.newData.HolidayDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true}">
                            <input type="text" class="form-control" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </th>
                    <th><input data-bind="value:$root.newData.Description" class="form-control transparent" /></th>
                    <th>
                        @Html.DropDownList("dllHoliday", Model.HolidayType, new Dictionary<string, object> { { "data-bind", "value:$root.newData.HolidayType" },
                                                                                                             { "class", "selectpicker show-tick form-control" },{"data-live-search","true"} })
                    </th>
                    <th class="center"><input type="checkbox" data-bind="checked:$root.newData.StatusActive" /></th>
                    <th><input data-bind="value:$root.newData.Remark" class="form-control transparent" /></th>
                    <th><span data-bind="text:$root.newData.UpdatedBy"></span></th>
                    <th><span data-bind="text:$root.newData.UpdatedDate"></span></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                   click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.LocationCode"></span></td>
                    <td><span data-bind="text:$data.HolidayDate"></span></td>
                    <td><span data-bind="text:$data.Description"></span></td>
                    <td><span data-bind="text:$data.HolidayType"></span></td>
                    <td class="current center"><input type="checkbox" data-bind="checked:$data.StatusActive, enable: false" /></td>
                    <td class="current"><span data-bind="text:$data.Remark"></span></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index()),
                                   click: $parent.selectRow.bind($data, $index())">
                    <td><span data-bind="text:$data.LocationCode"></span></td>
                    <td><span data-bind="text:$data.HolidayDate"></span></td>
                    <td><span data-bind="text:$data.Description"></span></td>
                    <td><span data-bind="text:$data.HolidayType"></span></td>
                    <td class="center current"><input type="checkbox" data-bind="checked:$data.StatusActive" /></td>
                    <td class="current"><input data-bind="value:$data.Remark" class="form-control transparent" /></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>

    <!-- Modal -->
    <div class="modal fade" id="location" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" data-bind="event : { click : $root.ClosePopup}">&times;</button>
                    <h4 class="modal-title">@MasterGenHoliday.lblPopupTitle</h4>
                </div>
                <div class="modal-body">
                    <div class="tree">
                        <ul>
                            @Html.CreateLocationTree(@Model.CurrentLocation, @Model.LocationDescs, "collapsed", "data-bind=\"event : { change : $root.cbTreeCheck}\"")
                        </ul>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary">Submit</button>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" data-bind="event : { click : $root.ClosePopup}">Cancel</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts
{
    <link rel="stylesheet" href="~/Content/css/vendors/jquery.tree.css" media="screen">
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery-ui.js"></script>
    <script src="~/Scripts/jquery.tree.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(function () {
            $('div.tree').tree({
                collapseAll: true,
                collapseUiIcon: 'ui-icon-plusthick',
                expandUiIcon: 'ui-icon-minusthick',
                onCheck: {
                    ancestors: 'checkIfFull',
                    descendants: 'check'
                },
                onUncheck: {
                    ancestors: 'uncheck'
                },
                selectable: false
            });
        });

        (function (app) {
            app.EditGrid = function () {
                var self = this;
                self.itemLocations = @Html.Raw(Json.Encode(@Model.LocationDescs));

                self.filterLocationCode = ko.observable($('#ddlLocationCode').val());
                self.filterYear = ko.observable($('#ddlYearFilter').val());
                self.filterHolidayDate = ko.observable($('#ddlfilterHolidayDate').val());

                self.excelLocationCode = $('#ddlLocationCode').val();
                self.excelYear = $('#ddlYearFilter').val();
                self.excelHolidayDate = $('#ddlfilterHolidayDate').val();

                // object new data
                self.newData =
                {
                    LocationCode: ko.observableArray([]),
                    HolidayDate: ko.observable(''),
                    HolidayType: ko.observableArray([]),
                    Description: ko.observable(''),
                    StatusActive: ko.observable(true),
                    Remark: ko.observable('')
                };

                //event checkbox tree
                self.cbTreeCheck = function () {
                    var values = [];
                    $("input:checkbox:checked.tree-checkbox").each(function() {
                        var code = $(this).attr('data-location');
                        values.push(code);
                    });
                    self.newData.LocationCode = ko.observableArray(values);
                }.bind(this);

                self.GetLocationNameFilter = function () {
                    self.filterLocationName = self.GetDefaultLocationNameFilter();
                    $('#spLocationNameFilter').html(self.filterLocationName);
                }.bind(this);


                self.GetDefaultLocationNameFilter = function() {
                    var result ="";
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == $("#ddlLocationCode").val()) {
                            result = self.itemLocations[i].LocationName;
                            break;
                        }
                    }
                    return result;
                };

                self.filterLocationName = ko.observable(self.GetDefaultLocationNameFilter());

                self.excelLocationName = self.filterLocationName();
                $('#spLocationNameFilter').html(self.filterLocationName());

                self.gridView = new app.GridViewModel({
                    Criteria:
                    {
                        PageSize: 10,
                        PageIndex: 1,
                        SortExpression: "",
                        SortDirection: "",
                        LocationCode: self.filterLocationCode,
                        Year: self.filterYear,
                        HolidayDate: self.filterHolidayDate
                    },
                    DataSourceUrl: @Html.BaseUrl("MasterGenHoliday/GetMstGenHoliday"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 1
                });

                // description: validations
                self.gridView.applyValidationRules = function (entity) {
                    entity.LocationCode.extend({
                        required: {
                            message: "<strong>Location Code</strong> cannot be empty!"
                        }
                    });
                    entity.HolidayDate.extend({
                        required: {
                            message: "<strong>Holiday Date</strong> cannot be empty!"
                        }
                    });
                };

                // Reset Fields for Insert Row
                self.gridView.resetDefault = function (viewModel) {
                    viewModel.LocationCode([]);
                    viewModel.HolidayType([]);
                    viewModel.Description('');
                    viewModel.StatusActive(true);
                    viewModel.Remark('');
                    self.ClosePopup();
                };

                self.ClosePopup = function() {
                    $('.tree-checkbox').prop("checked", false);
                };

                self.generateExcel = function (formElement) {
                    $(formElement).find("input[name=LocationCode]").val(self.excelLocationCode());
                    $(formElement).find("input[name=LocationName]").val(self.excelLocationName);
                    $(formElement).find("input[name=Year]").val(self.excelYear());
                    $(formElement).find("input[name=HolidayDate]").val(self.excelHolidayDate());
                    return true;
                };

                self.saveData = function () {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "New": self.gridView.listNewItems(),
                        "Edit": self.gridView.listEditItems()
                    };

                    datas = JSON.stringify(datas);
                    $.ajax({
                        url: @Html.BaseUrl("MasterGenHoliday/SaveHoliday"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function (data) {
                            if (data.New) {
                                $.each(data.New, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Insert Master Holiday", value.LocationCode + " - " + value.HolidayDate);
                                });
                            }

                            if (data.Edit) {
                                $.each(data.Edit, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Edit Master Holiday", value.LocationCode + " - " + value.HolidayDate);
                                });
                            }

                            //self.gridView.reload();
                            self.gridView.sort('UpdatedDate', 'DESC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                        }
                    });
                };

                //description: load data
                self.search = function () {
                    self.excelLocationCode = self.filterLocationCode;
                    self.excelYear = self.filterYear;
                    self.excelHolidayDate = self.filterHolidayDate;
                    self.gridView.search({});
                };
                self.search();

            };
            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});
    </script>
}
