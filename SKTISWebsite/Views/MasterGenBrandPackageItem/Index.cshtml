@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MasterGenBrandPackageItem
@using SKTISWebsite.Helper
@model SKTISWebsite.Models.MasterGenBrandPackageItem.InitGenBrandPackageItem

@{Html.SetPageTitle(@MasterGenBrandPackageItem.PageTitle);}
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">@MasterGenBrandPackageItem.lblFilterBrandGroup</label>
            <div class="col-lg-5">
                @Html.DropDownList("ddlBrandGroup", Model.BrandGroup, @CommonLabel.ddlSelectAll, new Dictionary<string, object> { { "data-bind", "value:$root.filterBrandGroupCode" },
                                                                                                   { "class", "selectpicker show-tick form-controlt" },
                                                                                                   {"data-live-search","true"},{"id","ddlBrandGroup"} })
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString())) {
                    using (Html.BeginForm("GenerateExcel", "MasterGenBrandPackageItem", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="brandGroupCode" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped table-hover">
            <thead>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'BrandGroupCode'), css:sortCss('BrandGroupCode', $data.sortExpression(), $data.sortOrder())">@MasterGenBrandPackageItem.lblTitleBrandGroup</th>
                    <th data-bind="click:sortBy.bind($data,'ItemCode'), css:sortCss('ItemCode', $data.sortExpression(), $data.sortOrder())">@MasterGenBrandPackageItem.lblTitleItemCode</th>
                    <th class="widthmedium" data-bind="click:sortBy.bind($data,'ItemDescription'), css:sortCss('ItemDescription', $data.sortExpression(), $data.sortOrder())">@MasterGenBrandPackageItem.lblTitleItemDescription</th>
                    <th data-bind="click:sortBy.bind($data,'Qty'), css:sortCss('Qty', $data.sortExpression(), $data.sortOrder())">@MasterGenBrandPackageItem.lblTitleQty</th>
                    <th class="widthdate">Updated By</th>
                    <th class="widthdate">Updated Date</th>
                </tr>
                <tr class="insertRow" data-bind="inlineAddProccess:[$data,$root.newData]">
                    <th>
                        @Html.DropDownList("BanrdGroup", Model.BrandGroup, new Dictionary<string, object> { { "data-bind", "value:$root.newData.BrandGroupCode" },
                            { "class", "selectpicker show-tick form-controlt" },{"data-live-search","true"} })
                    </th>
                    <th>
                        @Html.DropDownList("ItemCode", Model.Item, new Dictionary<string, object> { { "data-bind", "value:$root.newData.ItemCode, event : { change : $root.NewItemCodeChange}" },
                            { "class", "selectpicker show-tick form-controlt" },{"data-live-search","true"} })
                    </th>
                    <th class="widthmedium"><span id="spItemDescription" data-bind="text:$root.newData.ItemDescription"></span></th>
                    <th class="current"><input data-bind="value:$root.newData.Qty, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1" /></th>
                    <th>&nbsp;</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                   click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.BrandGroupCode"></span></td>
                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td><span data-bind="text:$data.ItemDescription"></span></td>
                    <td class="current"><span data-bind="text:$data.Qty"></span></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
                @*edit template*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index()),
                                   click: $parent.selectRow.bind($data, $index())">
                    <td><span data-bind="text:$data.BrandGroupCode"></span></td>
                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td><span data-bind="text:$data.ItemDescription"></span></td>
                    <td class="current"><input data-bind="value:$data.Qty,tabToNext:[$parent,$data], valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1" /></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="4" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>
</div>
@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">
    (function (app) {
        app.EditGrid = function () {
            var self = this;
            self.itemDescriptions = @Html.Raw(Json.Encode(@Model.ItemDescription));

            //description : filter
            self.filterBrandGroupCode = ko.observable('');
            self.BrandGroupCode = self.filterBrandGroupCode();

            self.NewItemCodeChange = function() {
                for (var i = 0; i < self.itemDescriptions.length; i++) {
                    if (self.itemDescriptions[i].ItemCode == self.newData.ItemCode()) {
                        self.newData.ItemDescription = self.itemDescriptions[i].ItemDescription;
                        $('#spItemDescription').html(self.newData.ItemDescription);
                        break;
                    }
                }
            }.bind(this);

            self.getDefaultItemDescription = function() {
                var result ="";
                for (var i = 0; i < self.itemDescriptions.length; i++) {
                    if (self.itemDescriptions[i].ItemCode == $("#ItemCode").val()) {
                        result = self.itemDescriptions[i].ItemDescription;
                        break;
                    }
                }
                return result;
            };

            //default data
            self.newData = {
                BrandGroupCode: ko.observableArray([]),
                ItemCode: ko.observableArray([]),
                ItemDescription : self.getDefaultItemDescription(),
                Qty: ko.observable('')
            };

            self.gridView = new app.GridViewModel({
                Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", BrandGroupCode: self.filterBrandGroupCode },
                DataSourceUrl:  @Html.BaseUrl("MasterGenBrandPackageItem/GetMstPackageEquipments"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 2
            });

            //description: validations
            self.gridView.applyValidationRules = function (entity) {

                self.RemoveNotification();

                entity.ItemCode.extend({
                    required: {message: "<strong>Item Code</strong> cannot be empty!"}
                });
                entity.BrandGroupCode.extend({
                    required: {message: "<strong>Brand Group Code</strong> cannot be empty!"}
                });
                entity.Qty.extend({
                    required: {message: "<strong>Qty</strong> cannot be empty!"}
                });
            };

            self.gridView.resetDefault = function (viewModel) {
                viewModel.BrandGroupCode([]);
                viewModel.ItemCode([]);
                viewModel.Qty('');
            };

            //description: save bulk data
            self.saveData = function () {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "New": self.gridView.listNewItems(),
                    "Edit": self.gridView.listEditItems()
                };

                datas = JSON.stringify(datas);
                $.ajax({
                    url:  @Html.BaseUrl("MasterGenBrandPackageItem/SavePackageEquipment"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function (data) {
                            if (data.New) {
                                $.each(data.New, function (k, value) {
                                    if (value)
                                        //SKTIS.Helper.ResponseNotification(value, "Insert Package Equipment", value.BrandGroupCode + " - " + value.ItemCode);
                                        SKTIS.Helper.ResponseNotification(value, "Insert Item", value.ItemCode);
                                });
                            }

                            if (data.Edit) {
                                $.each(data.Edit, function (k, value) {
                                    if (value)
                                        //SKTIS.Helper.ResponseNotification(value, "Edit Package Equipment", value.BrandGroupCode + " - " + value.ItemCode);
                                        SKTIS.Helper.ResponseNotification(value, "Edit Item", value.ItemCode);
                                });
                            }

                            self.gridView.sort('UpdatedDate', 'DESC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                        }
                    });
                };

                self.generateExcel = function (formElement) {
                    $(formElement).find("input[name=brandGroupCode]").val(self.BrandGroupCode);
                    return true;
                };

                //description: load data
                self.search = function () {
                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    }else{
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }
                    self.BrandGroupCode = self.filterBrandGroupCode();
                    self.gridView.search({}, function (response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message,'error');
                            $('.empty-row-message').html(response.message);
                        }else if (response.status == 'Empty') {

                            self.RemoveNotification();

                            //SKTIS.Helper.Notification(response.message,'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });

                    self.RemoveNotification = function() {
                        if ($('#noty_top_layout_container').length > 0) {
                            $('#noty_top_layout_container').remove();
                        }
                    };
                };
                self.search();

                // Check whether New or Edit data is existing and not saved to database yet (on Request action)
                SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
                self.BrandGroupCode = $("#ddlBrandGroup").val();
            };

            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});
    </script>
}