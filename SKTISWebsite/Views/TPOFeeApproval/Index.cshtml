@model SKTISWebsite.Models.TPOFeeApproval.InitTPOFeeApprovalViewModel
@using SKTISWebsite.Helper
@{ Html.SetPageTitle(" TPO Fee Approval"); }
@using HMS.SKTIS.Application.Resources

<div class="col-lg-12" data-bind="with: gridView">
    <!--  Approval List Here  -->
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-3">
                Regional
            </label>
            <div class="col-lg-3">
                @*@Html.DropDownList("ddlFilterRegionalSubmission", new SelectList(Model.Regional, "Text", "Text"),
                    new
                    {
                        @class = "selectpicker show-tick form-control",
                        id = "ddlFilterRegionalSubmission",
                        data_live_search = "true",
                        data_bind = "value:$root.filterRegionalSubmission"
                    })*@
                <select id="ddlFilterRegionalSubmission"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterRegionalSubmission, optionsText: 'Text', optionsValue : 'Value',  optionsAfterRender : $root.afterRender, selectPickerOptions: { optionsArray: $root.modelRegional }"></select>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-3">
                KPS Year
            </label>
            <div class="col-lg-4">
                @Html.DropDownList("filterYearSubmission", Model.YearSelectList,
                             new Dictionary<string, object> { { "data-bind", "value:$root.filterYearSubmission, event : { change : $root.onYearSelectedChangeSubmission('Hello World') }" },
                        { "class", "selectpicker show-tick form-controlt" },
                        {"data-live-search","true"},{"id","filterYearSubmission"} })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                KPS Week
            </label>
            <div class="col-lg-4">
                <select id="filterWeekSubmission" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterWeekSubmission, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.WeekFromSelectListSubmission }"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @{ string controllerName = "";}
                @{
                    switch (@Model.PageFrom)
                    {
                        case "approval":
                            controllerName = "TPOFeeApproval";
                            break;
                        case "open":
                            controllerName = "TPOFeeExeAPOpen";
                            break;
                        case "close":
                            controllerName = "TPOFeeAPClose";
                            break;
                        case "list":
                            controllerName = "TPOFeeExeActual";
                            break;
                        default:
                            controllerName = "TPOFeeExeActual";
                            break;
                    }
                }

                    <button type="button" class="btn btn-primary" data-bind="click:$root.back, visible: $root.disableBtnBack() == 'True' && !$root.isBusy()">Back to List</button>
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search, enable: !$root.isBusy()">View</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Approve.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.approval, enable: $root.enableBtnApprove() && !$root.isBusy() && $root.isChecked()">Approve</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Authorize.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.authorize, enable: $root.enableBtnAuthorize() && !$root.isBusy() && $root.isChecked()">Authorize</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Complete.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.complete, enable: $root.enableBtnComplete() && !$root.isBusy() && $root.isChecked()">Complete</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Revise.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.revise, enable: $root.enableBtnRevise() && !$root.isBusy() && $root.isChecked()">Revise</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Submit.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="enable: $root.enableSubmit() , click: $root.submit">Submit</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString()))
                {
                    using (Html.BeginForm("GenerateExcel", "TPOFeeApproval", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="Regional" />
                        <input type="hidden" name="Year" />
                        <input type="hidden" name="Week" />
                        <button type="submit" class="btn btn-primary" data-bind="enable: !$root.isBusy()">@CommonLabel.btnExcel</button>
                    }
                }
                
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped clickable-table-row">
            <thead>
                <tr class="head">
                    <th rowspan="2" class="column-check"><input type="checkbox" data-bind="checked: $root.SelectAll"></th>
                    <th rowspan="2">Location</th>
                    <th rowspan="2" class="fifteen">Location Name</th>
                    <th rowspan="2" class="widthsmall">Brand</th>
                    <th rowspan="2">Note</th>
                    <th rowspan="2">JKN Box</th>
                    <th rowspan="2">JL1 Box</th>
                    <th rowspan="2">JL2 Box</th>
                    <th rowspan="2">Biaya Produksi</th>
                    <th rowspan="2">Jasa Manajemen</th>
                    <th rowspan="2">Productivity Incentives</th>
                    <th colspan="2">Pajak</th>
                    <th colspan="3">PPN</th>
                    <th rowspan="2">Total Bayar</th>
                </tr>
                <tr class="head">
                    <th>Jasa Manajemen 2%</th>
                    <th>Productivity Incentives 2%</th>
                    <th>Biaya Produksi 10%</th>
                    <th>Jasa Maklon 10%</th>
                    <th>Productivity Incentives 10%</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                <tr data-bind="if: ($parent.editingRowIndex() !== $index()), css: (ko.utils.unwrapObservable($data.Status) == 'SUBMITTED') ? 'submited' : 'opened'">
                    <td class="column-check"><input type="checkbox" data-bind="value: $data.Checkbox, checked: Check, event : {click : $root.multicheckboxOnChange($data)}"></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.LocationCode"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.LocationName"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.SKTBrandCode"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.Note"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.JKN, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.JL1, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.JL2, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.BiayaProduksi, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.JasaManajemen, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.ProductivityIncentives, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.JasaManajemen2Percent, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.ProductivityIncentives2Percent, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.BiayaProduksi10Percent, precision:0"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.JasaMakloon10Percent, precision:0"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.ProductivityIncentives10Percent, precision:0"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.TotalBayar, precision:3"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="20" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.Extenders.js" type="text/javascript"></script>
    <script type="text/javascript">

    (function (app) {
        app.EditGrid = function () {
            var self = this;

            var DefaultRegional = $("#ddlFilterRegionalSubmission").val();
            var DefaultYear = '@Model.DefaultYear';
            var DefaultWeek= '@Model.DefaultWeek';
            if(!!getCookie('RegionalSubmission')) {
                DefaultRegional = getCookie('RegionalSubmission');
            }
            if(!!getCookie('KPSYear')) {
                DefaultYear = getCookie('KPSYear');
            }

            if(!!getCookie('KPSWeek')) {
                DefaultWeek = getCookie('KPSWeek');
            }

            self.modelRegional = ko.observableArray(@Html.Raw(Json.Encode(@Model.Regional)));
            self.filterRegionalSubmission = ko.observable(DefaultRegional);
            self.filterYearSubmission = ko.observable(DefaultYear);
            self.filterWeekSubmission = ko.observable(DefaultWeek);
            self.disableBtnBack = ko.observable('@Model.DisableBtnBack');
            self.isBusy = ko.observable(true);
            self.firstLoad = true;
            self.isLoading = ko.observable(true);
            
            //event on Year dropdown change
            self.onYearSelectedChangeSubmission = function (type) {
                self.GetWeekFromSelectList();
            };

            self.afterRender = function(options, item)
            {
                if (typeof(item) === 'undefined') return;

                $(options).attr('title', item.Value);
            }

            self.onGridClick = function(e) {
                //console.log(e);
                setCookie("RegionalSubmission",self.filterRegionalSubmission(),0.1);
                setCookie("KPSYear",self.filterYearSubmission(),0.1);
                setCookie("KPSWeek",self.filterWeekSubmission(),0.1);
                window.document.location = @Html.BaseUrl("TPOFeeExeActualDetail") + "/index/" + e.TPOFeeCode().replace(/([/])/g,'_') + "/approval/" + self.filterRegionalSubmission();
            };

            self.back = function(e) {
                if('@Model.BackToList' == "detail")
                    window.document.location = @Html.BaseUrl("TPOFeeExeActualDetail") + "/index/" + '@Model.Param2' + "/approval";
                else
                    window.document.location = @Html.BaseUrl("TPOFeeExeActual") + "/index";
            };

            //prepare Week Submission selectlist data
            self.WeekFromSelectListSubmission = ko.observableArray([]);
            self.GetWeekFromSelectList = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("TPOFeeApproval/GetWeekByYear"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { year: self.filterYearSubmission() },
                    dataType: 'json',
                    success: function(data) {
                        $('#filterWeekSubmission').find('option').remove();
                        $('#filterWeekSubmission').selectpicker('refresh');
                        var kpsWeekModel = [];
                        $.each(data, function(index, value) {
                            kpsWeekModel.push({ "Text": value, "Value": value });
                        });
                        self.WeekFromSelectListSubmission(kpsWeekModel);
                        self.filterWeekSubmission(DefaultWeek);
                    },
                    complete: function() {
                        if (typeof cb != 'undefined') cb();
                    }
                });
            };

            self.gridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 9999,
                    PageIndex: 1,
                    SortExpression: "LocationCode",
                    SortOrder: "ASC",
                    Regional: self.filterRegionalSubmission,
                    Year: self.filterYearSubmission,
                    Week: self.filterWeekSubmission
                },
                DataSourceUrl: @Html.BaseUrl("TPOFeeApproval/GetTPOFeeApproval"),
                InlineEdit: true
            });

            self.gridView.isBusy.subscribe(function(value) { self.isBusy(value);});

            self.SelectAll = ko.computed({
                read: function() {
                    //console.log("read");
                    var item = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                        return !item.Check();
                    });
                    return item == null;
                },
                write: function(value) {
                    //console.log("write");
                    ko.utils.arrayForEach(self.gridView.listDataItems(), function (item) {
                        console.log(item);
                        item.Check(value);
                        self.multicheckboxOnChange(item);
                    });
                }
            });

            self.isChecked = ko.computed(function() {
                var state = [];
                ko.utils.arrayForEach(self.gridView.listDataItems(), function (item) {
                    if (item.Check()) {
                        state.push(1);
                    }
                });
                return state.length;
            }, this);

            self.approval = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "edit": ko.mapping.toJS(self.gridView.listDataItems())
                };

                datas = JSON.stringify(datas);
                transactionLog("Approval", datas);
            };

            self.authorize = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "edit": ko.mapping.toJS(self.gridView.listDataItems())
                };

                datas = JSON.stringify(datas);
                transactionLog("Authorize", datas);
            };

            self.revise = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "edit": ko.mapping.toJS(self.gridView.listDataItems())
                };

                datas = JSON.stringify(datas);
                transactionLog("Revise", datas);
            };

            self.complete = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "edit": ko.mapping.toJS(self.gridView.listDataItems())
                };

                datas = JSON.stringify(datas);
                transactionLog("Complete", datas);
            };

            function transactionLog(methodName, datas) {
                $.ajax({
                    url: @Html.BaseUrl("TPOFeeApproval/") + methodName,
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        SKTIS.Helper.Notification(data);
                        self.search();
                    }
                });
            };

            function checkStatus(st) {
                return ko.computed({
                    read: function() {
                        var result = true;
                        ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                            var field = ko.isObservable(item["Status"]) ? ( item["Status"]() == st ? true : false) : (item["Status"] == st ? true : false);
                            if(!field) result = false;
                        });
                        //console.log(st + " - " + result);
                        return result;
                    },
                    write: function(value) {
                        //alert(value);
                    }
                });
            };

            //self.enableBtnApprove = !checkDisableApproval('AlreadyApprove');
            self.enableBtnApprove = ko.computed({
                read: function() {
                    var submittedArray = self.gridView.listDataItems().filter(function(item) {
                        return ko.utils.unwrapObservable(item.Check) == true && ko.utils.unwrapObservable(item.Status) == 'SUBMITTED';
                    });

                    var checkedArray = self.gridView.listDataItems().filter(function(item) {
                        return ko.utils.unwrapObservable(item.Check) == true;
                    });

                    return checkedArray.length == 0 ? false : submittedArray.length == checkedArray.length;
                }
            })

            self.enableBtnAuthorize = checkStatus('APPROVED');
            self.enableBtnRevise = ko.computed({
                read: function() {
                    return ( ko.utils.unwrapObservable(self.enableBtnApprove) 
                        || ko.utils.unwrapObservable(self.enableBtnAuthorize)
                        || ko.utils.unwrapObservable(self.enableBtnComplete));
                }
            });

            self.enableBtnComplete = ko.computed({
                read: function() {
                    var submittedArray = self.gridView.listDataItems().filter(function(item) {
                        return ko.utils.unwrapObservable(item.Check) == true && ko.utils.unwrapObservable(item.Status) == 'AUTHORIZED';
                    });

                    var checkedArray = self.gridView.listDataItems().filter(function(item) {
                        return ko.utils.unwrapObservable(item.Check) == true;
                    });

                    return checkedArray.length == 0 ? false : submittedArray.length == checkedArray.length;
                }
            });
            
            function checkDisableApproval(fieldName) {
                return ko.computed({
                    read: function() {
                        var result = true;
                        ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                            var field = ko.isObservable(item[fieldName]) ? item[fieldName]() : item[fieldName];
                            if(!field) result = false;
                        });
                        return result;
                    },
                    write: function(value) {
                        //alert(value);
                    }
                });
            };

            //self.enableBtnApprove = checkDisableApproval('AlreadyApprove');
            //self.isButtonEnable = function(name)
            //{
            //    switch (name)
            //    {
            //        case "SUBMIT":
            //            return !self.isBusy() && self.enableSubmit();
            //            break;
            //    }

            //    return false;
            //}

            self.enableSubmit =  ko.observable(false);


            self.multicheckboxOnChange = function(data){
                self.enableSubmit(true);

                if (data.Check()==true){
                    ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                        if (item.Check()==true){
                            if ((item.Status() != 'DRAFT' && item.Status() != 'REVISE') || item.TaxtNoMgmt() == null || item.TaxtNoProd() == null){
                                //console.log(item.Status());
                                //console.log(item.TaxtNoMgmt());
                                //console.log(item.TaxtNoProd());
                                //console.log(item);
                                self.enableSubmit(false);
                            }
                        }
                    });
                }else{
                    self.enableSubmit(false);
                    ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                        //console.log(item);
                        if (item.Check()==true){
                            if ((item.Status() == 'DRAFT' || item.Status() == 'REVISE') && item.TaxtNoMgmt() != null && item.TaxtNoProd() != null){
                                //console.log(item.Status());
                                //console.log(item.TaxtNoMgmt());
                                //console.log(item.TaxtNoProd());
                                //console.log(item);
                                self.enableSubmit(true);
                            }
                        }
                    });
                }


            };

            //self.isButtonSubmitEnable = function(status, taxMgmt, taxNoProd) {
            //    console.log(status(), taxMgmt(), taxNoProd());
            //    return ((status() == 'DRAFT' || status == 'REVISE') && taxMgmt() != null && taxNoProd() != null);
            //}

            self.submit = function() {
                console.log('test');
                ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                    if (item.Check()==true){
                        if ((item.Status() == 'DRAFT' || item.Status() == 'REVISE') && item.TaxtNoMgmt() != null && item.TaxtNoProd() != null){

                            console.log(item);
                            var datas = {
                                "tpoFeeCode": item.TPOFeeCode(),
                                "regional": self.filterRegionalSubmission()
                            };
                            datas = JSON.stringify(datas);
                            //console.log(datas);
                            $.ajax({
                                url: @Html.BaseUrl("TPOFeeApproval/SubmitedDatas"),
                                type: 'POST',
                                contentType: 'application/json',
                                data: datas,
                                dataType: 'json',
                                success: function (data) {
                                    if(data.length > 1){
                                        SKTIS.Helper.Notification(data[0]);
                                        SKTIS.Helper.Notification(data[1], 'error');
                                    }else{
                                        SKTIS.Helper.Notification(data[0]);
                                    }
                                    self.enableSubmit(false);

                                    //refresh grid
                                    self.search();
                                }
                            });

                        }
                    }
                });
            }

            self.generateExcel = function (formElement) {
                $(formElement).find("input[name=Regional]").val(self.filterRegionalSubmission());
                $(formElement).find("input[name=Year]").val(self.filterYearSubmission());
                $(formElement).find("input[name=Week]").val(self.filterWeekSubmission());
                return true;
            };
            // Load Data
            self.search = function() {
                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                } else {
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }

                self.gridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        //self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });
            };

            self.RemoveNotification = function() {
                if ($('#noty_top_layout_container').length > 0) {
                    $('#noty_top_layout_container').remove();
                }
            };

            //self.search();
            self.onYearSelectedChangeSubmission();
            
            self.init = function() {
                //Asynch setting
                async.series([
                    function(cb) {
                        self.GetWeekFromSelectList(cb);
                    },
                    function() {
                        self.search();
                    }
                ], function() {
                    self.firstLoad = false;
                });
            };

            $(document).ready(function(){
                self.init();

            });
            

        };
        ko.applyBindings(new app.EditGrid());
    })(app = this.app || {});

</script>
}