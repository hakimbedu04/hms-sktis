@model SKTISWebsite.Models.ExeTPOProductionEntryVerification.InitExeTPOProductionEntryVerificationViewModel
@using HMS.SKTIS.Application.Resources
@using SKTISWebsite.Helper
@{ Html.SetPageTitle(" TPO Production Entry Verification"); }

<div class="col-lg-12" data-bind="with: gridView">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">
                Location
            </label>
            <div class="col-lg-2 offset-right">
                @*@Html.DropDownList("ddlFilterLocationCode", new SelectList(Model.LocationLookupList, "LocationCode", "LocationCode"),
                            new
                            {
                                @class = "selectpicker show-tick form-control",
                                id = "ddlFilterLocationCode",
                                data_live_search = "true",
                                data_bind = "value:$root.filterLocationCode, event : { change : $root.onLocationCodeChange}"
                            })*@
                <select id="ddlFilterLocationCode"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterLocationCode, optionsText: 'LocationCode', optionsValue : 'LocationCode', optionsAfterRender: locationDesc, selectPickerOptions: { optionsArray: $root.itemLocations }, event : { change : $root.onLocationCodeChange}"></select>
            </div>
            <div class="col-lg-4">
                <input type="text" class="form-control" readonly="readonly" data-bind="value:$root.filterLocationName">
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Brand
            </label>
            <div class="col-lg-6">
                <select class="selectpicker show-tick form-control" id="ddlBrandFilter"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterBrand, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.BrandSelectList }"></select>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-3">
                Year
            </label>
            <div class="col-lg-4">
                @Html.DropDownList("ddlFilterYear", Model.YearSelectList,
                            new Dictionary<string, object> { { "data-bind", "value:$root.filterYear, event : { change : $root.onYearSelectedChange}" },
                                { "class", "selectpicker show-tick form-control" },
                                {"data-live-search","true"},{"id","ddlFilterYear"} })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                Week
            </label>
            <div class="col-lg-4">
                <select id="filterWeek" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterWeek, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.WeekFromSelectList },  event : { change : $root.onWeekFilterChange }"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3" id="rdWeek">
                Date
            </label>
            <div class="col-lg-4">
                <select id="filterDate" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterDate, value:$root.filterDate, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.DateFromSelectList }, event: { change: $root.onDateFilterChange }"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString()))
{
    <button type="button" id="buttonView" class="btn btn-primary" data-bind="click: $root.search,disable: $root.isBusy()">@CommonLabel.btnView</button>
}
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
{
    <button type="button" id="buttonSave" class="btn btn-primary" data-bind="enable: $root.isSaveEnabled() && !$root.isBusy(), click: $root.save">Save</button>
}
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Submit.ToString()))
{
    <button type="button" id="buttonSubmit" class="btn btn-primary" data-bind="click:$root.submit, enable: $root.canSubmit() && !$root.isBusy()">Submit</button>
}
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.CancelSubmit.ToString()))
{
    <button type="button" id="buttonCancelSubmit" class="btn btn-primary" data-bind="enable: $root.canCancelSubmit() && !$root.isBusy(), click: $root.cancelsubmit">Cancel Submit</button>
}
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString()))
                {
                    using (Html.BeginForm("GenerateExcel", "ExeTPOProductionEntryVerification", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="locationCode"/>
                        <input type="hidden" name="brand"/>
                        <input type="hidden" name="year"/>
                        <input type="hidden" name="week"/>
                        <input type="hidden" name="date"/>
    <button type="submit" class="btn btn-primary" data-bind="disable: $root.isBusy()">@CommonLabel.btnExcel</button>
                    }
                }
                
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped">
            <thead>
                <tr class="head">
                    <th rowspan="2"></th>
                    <th rowspan="2">Process</th>
                    <th rowspan="2" class="eleven">Absence</th>
                    <th rowspan="2">Plan</th>
                    <th rowspan="2" class="eleven">Actual</th>
                    <th colspan="2">Verify</th>
                </tr>
                <tr class="head">
                    <th class="widthsmall">System</th>
                    <th class="widthsmall">Manual</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                @*Insert Template*@
                @*WRAPPING*@
                <tr data-bind="if: ($parent.editingRowIndex() !== $index())">
                    @*<!-- ko if: ($root.checker1() && !$root.checker2() && !$root.checker3()) -->
                    <td><input type="checkbox" data-bind="checked:$data.CheckedSubmit,click: $root.onChecked, enable: ko.utils.unwrapObservable($data.VerifySystem) && !ko.utils.unwrapObservable($data.alreadySubmit)"></td>
                    <!-- /ko -->
                    <!-- ko if: (!$root.checker1() && $root.checker2() && !$root.checker3()) -->
                    <td><input type="checkbox" data-bind="checked:$data.CheckedSubmit,click: $root.onChecked2, enable: ko.utils.unwrapObservable($data.VerifySystem) && !ko.utils.unwrapObservable($data.alreadySubmit)"></td>
                    <!-- /ko -->
                    <!-- ko if: (!$root.checker1() && !$root.checker2() && $root.checker3()) -->*@
                    <td><input type="checkbox" data-bind="checked:$data.Flag_Manual, click: $root.onChecked, enable: ko.utils.unwrapObservable($data.VerifySystem)"></td>
                    @*<!-- /ko -->*@
                    <td class="center" data-bind="text: $data.ProcessGroup"></td>
                    <td hidden data-bind="text: $data.ProcessIdentifier"></td>
                    <td class="right" data-bind="text: $data.Absent"></td>
                    <td class="right" data-bind="decimal: $data.TotalTPKValue"></td>
                    <td class="right" data-bind="decimal: $data.TotalActualValue"></td>
                    <td><span data-bind="text: ko.utils.unwrapObservable($data.VerifySystem) ? 'Y' : 'N'"></span></td>
                    <td class="current right">
                        <select class="show-tick form-control sp-auto-width" id="ddlAbsentType"
                                data-live-search="true"
                                data-bind="value: $data.VerifyManual, options: $root.verifyManualSelectList, enable: ko.utils.unwrapObservable($data.VerifySystem),
                                            optionsText: 'Text', optionsValue : 'Value', isSelectPicker:{}, event:{change:$root.onVerifyManualChange}"></select>
                        @*<span data-bind="text:$data.AlreadySubmit"></span>*@
                    </td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="7" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>
    <br/>
    <div class="row">
        <div class="col-lg-12">
            <strong>Current Approver : </strong>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            @Html.Partial("TransactionHistory")
        </div>
    </div>

</div>

@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">
    (function (app) {
        app.EditGrid = function () {
            var self = this;
            @*//self.itemLocations = @Html.Raw(Json.Encode(@Model.LocationLookupList));*@
            self.itemLocations = ko.observableArray(@Html.Raw(Json.Encode(@Model.LocationLookupList)));
            self.filterLocationCode = ko.observable($("#ddlFilterLocationCode").val());
            self.filterLocationName = ko.observable();
            self.filterBrand = ko.observable('');
            self.filterYear = ko.observable('@Model.DefaultYear');
            self.filterWeek = ko.observable('@Model.DefaultWeek');
            self.filterDate = ko.observable('@Model.DefaultDate');
            self.canSubmitTemp = ko.observable('');
            self.firstLoad = true;
            self.firstLoadDate = true;
            self.isLoading = ko.observable(false);
            //self.canSubmit = ko.observable(Boolean('@Model.CanSubmit'));
            //self.canCancelSubmit = ko.observable(@Model.CanCancelSubmit.ToString().ToLower());
            self.checker1 = ko.observable(false);
            self.checker2 = ko.observable(false);
            self.checker3 = ko.observable(false);
            self.valid = ko.observable(false);
            self.status = true;
            //XHR handler param
            self.isBusy = ko.observable(false);

            self.BrandSelectList = ko.observableArray([]);
            self.WeekFromSelectList = ko.observableArray([]);
            self.DateFromSelectList = ko.observableArray([]);

            self.isSaveEnabled = ko.observable(false);

            self.verifyManualSelectList = ko.observableArray([]);
            self.setVerifyManual = function() {
                var model = [];
                model.push({ "Text": "Y", "Value": true });
                model.push({ "Text": "N", "Value": false });
                self.verifyManualSelectList(model);
            };
            self.setVerifyManual();  
            
            function ProcessGroup()
            {
                this.ROLLING = 0;
                this.CUTTING = 0;
            }

            self.actual = new ProcessGroup();

            
            
            self.onDateFilterChange = function() {
                if (self.firstLoad || self.isLoading()) return;
                
                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.getBrandSelectListByLocation(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
            }

            // Events
            //event on location dropdown change
            self.onLocationCodeChange = function() {
                if (self.firstLoad || self.isLoading()) return;
                
                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.getLocationNameFilter(cb);
                    },
                    function(cb) {
                        self.getBrandSelectListByLocation(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });

            };
            
            self.onWeekFilterChange = function() {
                if (self.firstLoad || self.isLoading()) return;
                
                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.GetDateFromSelectList(cb);
                    },
                    function(cb) {
                        self.getBrandSelectListByLocation(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
            }

            self.onYearSelectedChange = function() {
                if (self.firstLoad || self.isLoading()) return;

                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.GetWeekFromSelectList(cb);
                    },
                    function(cb) {
                        self.GetDateFromSelectList(cb);
                    },
                    function(cb) {
                        self.getBrandSelectListByLocation(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
            };

            // Methods
            //get location name by location code
            self.getLocationNameFilter = function(cb) {
                self.itemLocations().map(function(v) {
                    if (typeof v.LocationCode !== 'undefined' && v.LocationCode == self.filterLocationCode()) {
                        self.filterLocationName(v.LocationName);
                        
                        if (typeof cb == 'function') cb();
                    }
                });
            };
            self.getBrandSelectListByLocation = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("ExeTPOProductionEntryVerification/GetBrand"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: {
                        LocationCode: self.filterLocationCode(),
                        KPSWeek :self.filterWeek(),
                        KPSYear: self.filterYear(),
                        ProductionDate: self.filterDate()
                    },
                    dataType: 'json',
                    success: function(data) {
                        if(data.length>0)
                        {
                            var brandModel = [];
                            $.each(data, function(index, value) {
                                brandModel.push({ "Text": value, "Value": value });
                            });
                            $('#ddlBrandFilter').find('option').remove();
                            $('#ddlBrandFilter').selectpicker('refresh');
                            self.BrandSelectList(brandModel);
                        }
                        else{
                            var brandModel = [];
                            $('#ddlBrandFilter').find('option').remove();
                            $('#ddlBrandFilter').selectpicker('refresh');
                            self.BrandSelectList(brandModel);
                            SKTIS.Helper.Notification("NO Brand Code at "+self.filterLocationCode()+", Production Entry Verification week "+self.filterWeek()+" year "+self.filterYear()+" doesn't generate","error");
                        }
                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
            };
            self.GetWeekFromSelectList = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("ExeTPOProductionEntryVerification/GetWeekByYear"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { year: self.filterYear() },
                    dataType: 'json',
                    success: function(data) {
                        $('#filterWeek').find('option').remove();
                        $('#filterWeek').selectpicker('refresh');
                        var kpsWeekModel = [];
                        $.each(data, function(index, value) {
                            kpsWeekModel.push({ "Text": value, "Value": value });
                        });
                        self.WeekFromSelectList(kpsWeekModel);
                        self.filterWeek('@Model.DefaultWeek');
                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
            };            
            self.GetDateFromSelectList = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("ExeTPOProductionEntryVerification/GetDateByYearWeek"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { year: self.filterYear(), week: self.filterWeek() },
                    dataType: 'json',
                    success: function(data) {
                        $('#filterDate').find('option').remove();
                        $('#filterDate').selectpicker('refresh');
                        var model = [];
                        $.each(data, function(index, value) {
                            model.push({ "Text": value.Text, "Value": value.Text });
                        });
                        self.DateFromSelectList(model);
                        self.filterDate('@Model.DefaultDate');
                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
            };

            self.checkIfCanSubmit = function(check){
                $.ajax({
                    url: @Html.BaseUrl("ExeTPOProductionEntryVerification/CheckSubmitAndCancel"),
                    type: 'POST',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify({
                        LocationCode: self.filterLocationCode(),
                        BrandCode: self.filterBrand(),
                        KPSYear: self.filterYear(),
                        KPSWeek: self.filterWeek(),
                        ProductionDate: self.filterDate(),
                        Check: check
                    }),
                    success: function (data) {
                        self.canSubmitTemp(data.CanSubmit);
                        self.canSubmit(data.CanSubmit);
                        self.canCancelSubmit(data.CanCancelSubmit);
                    }
                });
            };

            self.gridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "ProcessGroup",
                    SortOrder: "ASC",
                    LocationCode: self.filterLocationCode,
                    BrandCode: self.filterBrand,
                    KPSYear: self.filterYear,
                    KPSWeek: self.filterWeek,
                    ProductionDate: self.filterDate
                },
                DataSourceUrl: @Html.BaseUrl("ExeTPOProductionEntryVerification/GetExeTPOProductionEntryVerification"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 0
            });       
            //XHR state
            self.gridView.isBusy.subscribe(function(value) {
                self.isBusy(value);
            });
            
            //self.gridView.selectedPageSize(1000); //show all record

            self.gridView.applyValidationRules = function(){};

            self.canSubmit = getEnableOrDisableSubmit();
            self.canCancelSubmit = getEnableOrDisableCancelSubmit();

            function getEnableOrDisableSubmit()
            {//hakim
                return ko.computed({
                    read: function() {
                        // Initialization variable
                        var totalActualCutting = 0;
                        var totalActualRolling = 0;
                        var isTotalActualRollingCuttingValid = false;

                        var isAnyCheckedList = false;

                        var isValidForSubmitRolling = false;
                        var isValidForSubmitCutting = false;
                        var isValidForSubmitPacking = false;
                        var isValidForSubmitStamping = false;
                        var isValidForSubmitWrapping = false;
                        var isValidForSubmitStickWrapping = false;

                        var isAlreadySubmitRolling = false;
                        var isAlreadySubmitCutting = false;
                        var isAlreadySubmitPacking = false;
                        var isAlreadySubmitStamping = false;
                        var isAlreadySubmitWrapping = false;
                        var isAlreadySubmitStickWrapping = false;

                        var stateRolling = '';
                        var stateCutting = '';
                        var statePacking = '';
                        var stateStamping = '';
                        var stateWrapping = '';
                        var stateStickWrapping = '';

                        var isRollingChecked = false;
                        var isCuttingChecked = false;
                        var isPackingChecked = false;
                        var isWrappingChecked = false;
                        var isStickWrappingChecked = false;
                        var isStampingChecked = false;

                        var isAnyCancelSubmit = false;

                        var isSubmitEnable = true;

                        var result = false;

                        var isRollingExistInGrid = false;
                        var isCuttingExistInGrid = false;
                        var isStickWrappingExistInGrid = false;
                        
                        ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                            if (item["ProcessGroup"]().toLowerCase().trim() == "rolling")
                            { 
                                // Count total actual ROLLING
                                var field = ko.isObservable(item["TotalActualValue"]) ? item["TotalActualValue"]() : item["TotalActualValue"];
                                var value = parseFloat(field);
                                if (!isNaN(value)) {
                                    totalActualRolling += value;
                                }
                                isRollingExistInGrid = true;
                                stateRolling = item["State"]();
                            }
                                
                            if (item["ProcessGroup"]().toLowerCase().trim() == "cutting")
                            {
                                // Count total actual CUTTING
                                var field = ko.isObservable(item["TotalActualValue"]) ? item["TotalActualValue"]() : item["TotalActualValue"];
                                var value = parseFloat(field);
                                if (!isNaN(value)) {
                                    totalActualCutting += value;
                                }
                                isCuttingExistInGrid = true;
                                stateCutting = item["State"]();
                            }

                            if (item["ProcessGroup"]().toLowerCase().trim() == "packing"){statePacking = item["State"]();}
                            if (item["ProcessGroup"]().toLowerCase().trim() == "stamping"){stateStamping = item["State"]();}
                            if (item["ProcessGroup"]().toLowerCase().trim() == "wrapping"){stateWrapping = item["State"]();}
                            if (item["ProcessGroup"]().toLowerCase().trim() == "stickwrapping")
                            {
                                isStickWrappingExistInGrid = true;
                                stateStickWrapping = item["State"]();
                            }

                            // Checking any process is checked
                            if(item["Flag_Manual"]() && item["IsValidForSubmit"]()){
                                isAnyCheckedList = true;

                                if(item["State"]() === "CANCELSUBMIT"){isAnyCancelSubmit = true;}

                                if (item["ProcessGroup"]().toLowerCase().trim() == "rolling"){
                                    isRollingChecked = true;
                                    isAlreadySubmitRolling = item["AlreadySubmit"]();
                                    isValidForSubmitRolling = item["IsValidForSubmit"]();
                                }

                                if (item["ProcessGroup"]().toLowerCase().trim() == "cutting"){
                                    isCuttingChecked = true;
                                    isAlreadySubmitCutting = item["AlreadySubmit"]();
                                    isValidForSubmitCutting = item["IsValidForSubmit"]();
                                }

                                if (item["ProcessGroup"]().toLowerCase().trim() == "packing"){
                                    isPackingChecked = true;
                                    isAlreadySubmitPacking = item["AlreadySubmit"]();
                                    isValidForSubmitPacking = item["IsValidForSubmit"]();
                                }

                                if (item["ProcessGroup"]().toLowerCase().trim() == "stamping"){
                                    isStampingChecked = true;
                                    isAlreadySubmitStamping = item["AlreadySubmit"]();
                                    isValidForSubmitStamping = item["IsValidForSubmit"]();
                                }

                                if (item["ProcessGroup"]().toLowerCase().trim() == "wrapping"){
                                    isWrappingChecked = true;
                                    isAlreadySubmitWrapping = item["AlreadySubmit"]();
                                    isValidForSubmitWrapping = item["IsValidForSubmit"]();
                                }

                                if (item["ProcessGroup"]().toLowerCase().trim() == "stickwrapping"){
                                    isStickWrappingChecked = true;
                                    isAlreadySubmitStickWrapping = item["AlreadySubmit"]();
                                    isValidForSubmitStickWrapping = item["IsValidForSubmit"]();
                                }
                            }
                        });

                        // Is total actual ROLLING and CUTTING are equals
                        if(parseToFloat(totalActualCutting) == parseToFloat(totalActualRolling)){isTotalActualRollingCuttingValid = true;}   

                        if(!isAnyCancelSubmit)
                        {
                            if(isRollingExistInGrid && !isCuttingExistInGrid) return false;
                            if(!isRollingExistInGrid && isCuttingExistInGrid) return false;

                            if(isRollingExistInGrid & isCuttingExistInGrid)
                            {
                                if(isRollingExistInGrid && !isCuttingExistInGrid) return false;
                                if(!isRollingExistInGrid && isCuttingExistInGrid) return false;

                                if(isRollingChecked && isCuttingChecked){
                                    if((!isValidForSubmitRolling && stateRolling !== "INITIAL") || (stateCutting !== "INITIAL" && !isValidForSubmitCutting)){
                                        isSubmitEnable = false;
                                    }

                                    if(!isAlreadySubmitRolling && !isAlreadySubmitCutting){isSubmitEnable = true;}
                                    if(isAlreadySubmitRolling && isAlreadySubmitCutting){isSubmitEnable = false;}
                                }

                                if(isRollingChecked && !isCuttingChecked){
                                    if((!isValidForSubmitRolling && stateRolling !== "INITIAL") && stateCutting !== "SUBMIT") {
                                        isSubmitEnable = false;
                                    }
                                    if(stateCutting !== "SUBMIT") {isSubmitEnable = false;}
                                    if(isAlreadySubmitRolling && !isAlreadySubmitCutting){
                                        isSubmitEnable = false;
                                    }
                                    if(isAlreadySubmitRolling && !isAlreadySubmitCutting){isSubmitEnable = false;}
                                }

                                if(!isRollingChecked && isCuttingChecked){
                                    if((!isValidForSubmitCutting && stateCutting !== "INITIAL") && stateRolling !== "SUBMIT") {isSubmitEnable = false;}
                                    if(stateRolling !== "SUBMIT") {isSubmitEnable = false;}
                                    if(!isAlreadySubmitRolling && isAlreadySubmitCutting){
                                        isSubmitEnable = false;
                                    }
                                    if(!isAlreadySubmitRolling && isAlreadySubmitCutting){isSubmitEnable = false;}
                                }

                                if(isStickWrappingExistInGrid)
                                {
                                    if(isStickWrappingChecked){
                                        if(!isAlreadySubmitStickWrapping){isSubmitEnable = true;}
                                        if(isAlreadySubmitStickWrapping){isSubmitEnable = false;}
                                        if(!isValidForSubmitStickWrapping && !stateStickWrapping !== "INITIAL") {isSubmitEnable = false;} 
                                        if(!isRollingChecked && !isCuttingChecked)
                                            if(stateRolling !== "SUBMIT" || stateCutting !== "SUBMIT") {isSubmitEnable = false;}
                                    }

                                    if(isPackingChecked){
                                        if(!isAlreadySubmitPacking){isSubmitEnable = true;}
                                        if(isAlreadySubmitPacking){isSubmitEnable = false;}
                                        if(!isValidForSubmitPacking && !statePacking !== "INITIAL") {isSubmitEnable = false;}
                                        if(!isRollingChecked && !isCuttingChecked)
                                            if(stateRolling !== "SUBMIT" || stateCutting !== "SUBMIT") {isSubmitEnable = false;}
                                        if(!isStickWrappingChecked)
                                            if(stateStickWrapping !== "SUBMIT") {isSubmitEnable = false;}
                                    }

                                    if(isStampingChecked){
                                        if(!isAlreadySubmitStamping){isSubmitEnable = true;}
                                        if(isAlreadySubmitStamping){isSubmitEnable = false;}
                                        if(!isValidForSubmitStamping && !stateStamping !== "INITIAL") {isSubmitEnable = false;}
                                        if(!isRollingChecked && !isCuttingChecked)
                                            if(stateRolling !== "SUBMIT" || stateCutting !== "SUBMIT") {isSubmitEnable = false;}
                                        if(!isStickWrappingChecked)
                                            if(stateStickWrapping !== "SUBMIT") {isSubmitEnable = false;}
                                        if(!isPackingChecked)
                                            if(statePacking !== "SUBMIT") {isSubmitEnable = false;}
                                    }
                                }
                                else
                                {
                                    
                                    if(isPackingChecked){
                                        if(!isAlreadySubmitPacking){isSubmitEnable = true;}
                                        if(isAlreadySubmitPacking){isSubmitEnable = false;}
                                        if(!isValidForSubmitPacking && !statePacking !== "INITIAL") {isSubmitEnable = false;}
                                        if(!isRollingChecked && !isCuttingChecked)
                                            if(stateRolling !== "SUBMIT" || stateCutting !== "SUBMIT") {isSubmitEnable = false;}
                                    }

                                    if(isStampingChecked){
                                        if(!isAlreadySubmitStamping){isSubmitEnable = true;}
                                        if(isAlreadySubmitStamping){isSubmitEnable = false;}
                                        if(!isValidForSubmitStamping && !stateStamping !== "INITIAL") {isSubmitEnable = false;}
                                        if(!isRollingChecked && !isCuttingChecked)
                                            if(stateRolling !== "SUBMIT" || stateCutting !== "SUBMIT") {isSubmitEnable = false;}
                                        if(!isPackingChecked)
                                            if(statePacking !== "SUBMIT") {isSubmitEnable = false;}
                                    }
                                }

                                if(isWrappingChecked){
                                    if(!isAlreadySubmitWrapping){isSubmitEnable = true;}
                                    if(isAlreadySubmitWrapping){isSubmitEnable = false;}
                                    if(!isValidForSubmitWrapping && !stateWrapping !== "INITIAL") {isSubmitEnable = false;} 
                                    if(!isRollingChecked && !isCuttingChecked)
                                        if(stateRolling !== "SUBMIT" || stateCutting !== "SUBMIT") {isSubmitEnable = false;}
                                }

                                result = isSubmitEnable && isTotalActualRollingCuttingValid;
                            }
                            else
                            {
                                if(isStickWrappingChecked){
                                    if(!isAlreadySubmitStickWrapping){isSubmitEnable = true;}
                                    if(isAlreadySubmitStickWrapping){isSubmitEnable = false;}
                                    if(!isValidForSubmitStickWrapping && !stateStickWrapping !== "INITIAL") {isSubmitEnable = false;} 
                                }
                                if(isPackingChecked){
                                    if(!isAlreadySubmitPacking){isSubmitEnable = true;}
                                    if(isAlreadySubmitPacking){isSubmitEnable = false;}
                                    if(!isValidForSubmitPacking && !statePacking !== "INITIAL") {isSubmitEnable = false;}
                                }
                                if(isStampingChecked){
                                    if(!isAlreadySubmitStamping){isSubmitEnable = true;}
                                    if(isAlreadySubmitStamping){isSubmitEnable = false;}
                                    if(!isValidForSubmitStamping && !stateStamping !== "INITIAL") {isSubmitEnable = false;}
                                }
                                if(isWrappingChecked){
                                    if(!isAlreadySubmitWrapping){isSubmitEnable = true;}
                                    if(isAlreadySubmitWrapping){isSubmitEnable = false;}
                                    if(!isValidForSubmitWrapping && !stateWrapping !== "INITIAL") {isSubmitEnable = false;}
                                }

                                result = isSubmitEnable;
                            }
                        }
                        else{
                            if(isRollingExistInGrid ||isCuttingExistInGrid)
                            {
                                if(isRollingExistInGrid && !isCuttingExistInGrid) return false;
                                if(!isRollingExistInGrid && isCuttingExistInGrid) return false;

                                result = isSubmitEnable && isTotalActualRollingCuttingValid;
                            }else
                            {
                                result = isSubmitEnable;
                            }
                        }

                        return result && isAnyCheckedList;
                           
                    },
                    write: function(value) {
                        //alert(value);
                    }
                });
            };

            function getEnableOrDisableCancelSubmit(){
                return ko.computed({
                    read: function() {
                        var isAnyCancelSubmit = false;

                        var isAnyChecked = false;

                        ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                            if(item["Flag_Manual"]()){
                                isAnyChecked = true;
                            }
                        });

                        ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                            if(item["Flag_Manual"]() && item["VerifySystem"]() && item["State"]() === "SUBMIT"){
                                isAnyCancelSubmit = true;
                            }
                        });
                        return isAnyCancelSubmit && isAnyChecked;
                    },
                    write: function(value) {
                        //alert(value);
                    }
                });
            };


            // Load Data
            self.search = function() {
                $("#buttonView").prop('disabled',true);
                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                } else {
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }
                //var arr = new Array();
                self.gridView.search({}, function(response) {
                    $("#buttonView").prop('disabled',false);
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();
                        
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }      

                    self.checkedList.removeAll(); 

                    if ( self.gridView.listDataItems().length )
                    {
                        self.gridView.listDataItems().map(function(item)
                        {
                            if(item.Flag_Manual()){
                                self.checkedList.push(item.ProcessGroup());
                            }
                        });
                    }
                    self.isSaveEnabled(false);
                    if (!self.firstLoad || !self.isLoading()){
                        self.loadHistory();
                        self.loadFlow();
                    }
                });
                
                self.status = true;
            };

            self.checkedList = ko.observableArray([]);
            self.checkState = ko.observableArray([]);

            // ticket http://tp.voxteneo.co.id/entity/10160
            //self.onChecked = function(item) {
            //    if(item.Flag_Manual()){
            //        self.checkedList.push(item.ProcessGroup);
            //        self.checkState.push(item);
            //    }else{
            //        self.checkedList.remove(item.ProcessGroup);
            //        self.checkState.remove(item);
            //    }
            //    self.validateState(self.checkState());
                
            //    return true;
            //};

            //self.onVerifyManualChange = function(item) {
            //    if(!item.Flag_Manual() && item.VerifyManual()){
            //        self.checkState.push(item);
            //    }
            //    self.validateState(self.checkState());
            //};

            //self.enableSave = ko.observable(false);
            //self.validateState = function(item){
            //    self.enableSave(true);
            //    if(item.length >0){
            //        $.each(item, function (index, value) {
            //            if ((value.VerifyManual() == false) || (value.Flag_Manual() == false)) {
            //                self.enableSave(false);
            //                return false; 
            //            }
            //        });
            //    }
            //    else{
            //        self.enableSave(false);
            //    }
            //    self.isSaveEnabled(self.enableSave());
            //};

            // ticket http://tp.voxteneo.co.id/entity/10405
            self.onChecked = function(item) {
                //if ((item.Flag_Manual() && item.VerifyManual()) && item.State().toLowerCase() != "submit") {
                if (item.Flag_Manual() || item.State().toLowerCase() != "submit") {
                    self.checkedList.push(item.ProcessGroup());
                    self.isSaveEnabled(true);
                } else {
                    self.checkedList.remove(item.ProcessGroup());
                    self.isSaveEnabled(false);
                }
                return true;
            }

            self.onVerifyManualChange = function(data)
            {
                self.isSaveEnabled(true);
            }

            // Save Action
            self.save = function () {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    //"Edit": self.gridView.listDataItems()
                    "Edit": ko.mapping.toJS(self.gridView.listDataItems())
                };

                datas = JSON.stringify(datas);
                $.ajax({
                    url: @Html.BaseUrl("ExeTPOProductionEntryVerification/SaveTPOProductionEntryVerification"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    beforeSend: function(){
                        $("#buttonSave").prop('disabled',true);
                    },
                    success: function (data) {
                        if (data.Edit) {
                            $.each(data.Edit, function (k, value) {
                                if (value)
                                    SKTIS.Helper.Notification("Production Entry Verification - Save succesfully","success");
                            });
                        }

                        self.gridView.sort('ProcessGroup', 'ASC');
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                        self.isSaveEnabled(false);
                        //self.checkIfCanSubmit("FIRST");
                        self.search();
                    },
                    complete: function(){
                        $("#buttonSave").prop('disabled',false);
                    }
                });
            };

            // Submit Action
            self.submit = function () {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    //"Edit": self.gridView.listDataItems()
                    "Parameters": { 
                        "LocationCode": self.filterLocationCode(),
                        "BrandCode": self.filterBrand(),
                        "KPSYear": self.filterYear(),
                        "KPSWeek": self.filterWeek(),
                        "ProductionDate": self.filterDate(),
                    },
                    "Edit": ko.mapping.toJS(self.gridView.listDataItems()).reverse()
                };
                
                datas = JSON.stringify(datas);
                
                $.ajax({
                    url: @Html.BaseUrl("ExeTPOProductionEntryVerification/SubmitTPOProductionEntryVerification"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    beforeSend: function(){
                        $("#buttonSubmit").prop('disabled',true);
                    },
                    success: function (data) {
                        SKTIS.Helper.Notification(data,'warning');
                        //self.checkIfCanSubmit("FIRST");
                        self.search();
                    },
                    complete: function(){
                        $("#buttonSubmit").prop('disabled',false);
                    }
                });
            };

            // Cancel Submit Action
            self.cancelsubmit = function () {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                //var datas = {
                //    "LocationCode": self.filterLocationCode(),
                //    "BrandCode": self.filterBrand(),
                //    "KPSYear": self.filterYear(),
                //    "KPSWeek": self.filterWeek(),
                //    "ProductionDate": self.filterDate()
                //};

                var datas = {
                    "Parameters": {
                        "LocationCode": self.filterLocationCode(),
                        "BrandCode": self.filterBrand(),
                        "KPSYear": self.filterYear(),
                        "KPSWeek": self.filterWeek(),
                        "ProductionDate": self.filterDate()
                    },
                    "Edit": ko.mapping.toJS(self.gridView.listDataItems())
                };
                
                datas = JSON.stringify(datas);
                
                $.ajax({
                    url: @Html.BaseUrl("ExeTPOProductionEntryVerification/CancelSubmitTPOProductionEntryVerification"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    beforeSend: function(){
                        $('#buttonCancelSubmit').prop('disabled',true);
                    },
                    success: function (data) {
                        SKTIS.Helper.Notification(data);
                        //self.checkIfCanSubmit("FIRST");
                        self.search();
                    },
                    complete: function() {
                        $('#buttonCancelSubmit').prop('disabled',false);
                    }
                });
            };

            //description : generateExcel
            self.generateExcel = function(formElement) {
                $(formElement).find("input[name=locationCode]").val(self.filterLocationCode());
                $(formElement).find("input[name=brand]").val(self.filterBrand());
                $(formElement).find("input[name=year]").val(self.filterYear());
                $(formElement).find("input[name=week]").val(self.filterWeek());
                $(formElement).find("input[name=date]").val(self.filterDate());
                return true;
            };


            // TRANSACTION HISTORY AND FLOW
            self.historyGridView = new app.GridViewModel({
                Criteria: { 
                    PageSize: 10, 
                    PageIndex: 1, 
                    SortExpression: "UpdatedDate", 
                    SortOrder: "DESC", 
                    code_1: 'EBL',
                    code_2: self.filterLocationCode,
                    code_3: '%',
                    code_4: self.filterBrand,                    
                    code_5: self.filterYear,
                    code_6: self.filterWeek,
                    code_7: self.filterDate
                },
                DataSourceUrl: @Html.BaseUrl("ExeTPOProductionEntryVerification/GetHistory"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });
            self.flowGridView = new app.GridViewModel({
                Criteria: { 
                    PageSize: 10, 
                    PageIndex: 1, 
                    SortExpression: "IDFlow", 
                    SortOrder: "ASC", 
                    FunctionName: 'TPOProductionEntryVerification'
                },
                DataSourceUrl: @Html.BaseUrl("ExeTPOProductionEntryVerification/GetFlow"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            self.loadHistory = function(cb){
                self.historyGridView.search({}, function (response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message,'error');
                        $('.empty-row-message').html(response.message);
                    }else if (response.status == 'Empty') {

                        self.RemoveNotification();
                            
                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                    
                    if (typeof cb != 'undefined') cb();
                });
            };
            self.loadFlow = function(cb){
                self.flowGridView.search({}, function (response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message,'error');
                        $('.empty-row-message').html(response.message);
                    }else if (response.status == 'Empty') {

                        self.RemoveNotification();
                            
                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                    
                    if (typeof cb != 'undefined') cb();
                });
            };
            // END OF TRANSACTION HISTORY AND FLOW

            self.RemoveNotification = function() {
                if ($('#noty_top_layout_container').length > 0) {
                    $('#noty_top_layout_container').remove();
                }
            };
          

            //$(document).ready(function(){
            //    // Init trigger
            //    self.getLocationNameFilter();
            //    self.getBrandSelectListByLocation();
            //    self.GetWeekFromSelectList();
            //    self.loadHistory();
            //    self.loadFlow();
            //    $(document).on('keydown','table div.bootstrap-select button',function(e){
            //        if(e.keyCode == 13)
            //            e.preventDefault();
            //    });

            //});

            $(document).ready(function() {
                self.init();
            });

            self.init = function() {
                //Asynch setting
                async.series([
                    function(cb) {
                        self.getLocationNameFilter(cb);
                    },
                    function(cb) {
                        self.GetWeekFromSelectList(cb);  
                    },
                    function(cb) {
                        self.GetDateFromSelectList(cb);
                    },
                    function(cb) {
                        self.getBrandSelectListByLocation(cb);  
                    },
                    //function(cb) {
                    // Since below request no need to wait another request to trigger, exclude them from series 
                    // CEUK SAHA BEL !!! HMMMMMMMMMM !!!
                    //    self.loadHistory();
                    //    self.loadFlow();
                    //    cb();
                    //}
                ], function() {
                    $(document).on('keydown','table div.bootstrap-select button',function(e){
                        if(e.keyCode == 13)
                            e.preventDefault();
                    });
                    self.firstLoad = false;
                    self.search();
                });
            };

        };
        ko.applyBindings(new app.EditGrid());
    })(app = this.app || {});

</script>
}