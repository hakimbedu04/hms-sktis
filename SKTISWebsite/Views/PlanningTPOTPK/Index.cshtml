@model SKTISWebsite.Models.PlanningTPOTPK.InitTPOTPKViewModel
@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.PlanningTPOTPK
@using SKTISWebsite.Helper

@{ Html.SetPageTitle("Target Production of Groups (TPK)"); }
<style>
    .red-text {
        color: #f00 !important;
    }
</style>
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">@PlanningTPOTPK.lblFilterLocation</label>
            <div class="col-lg-2">

                <select id="ddlFilterLocationCode"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterLocationCode, optionsText: 'LocationCode', optionsValue : 'LocationCode',
                        optionsAfterRender: locationDesc, selectPickerOptions: { optionsArray: $root.menuItemLocations },
                        event : { change : $root.onLocationCodeChange}, isDisabled: $root.isLoading()"></select>
            </div>
            <div class="col-lg-5">
                <input type="text" class="form-control" readonly="readonly" data-bind="value:$root.filterLocationName">
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">@PlanningTPOTPK.lblFilterBrand</label>
            <div class="col-lg-7">
                <select id="ddlFilterBrandCode" class="show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterBrandCode, optionsText: 'Text', optionsValue : 'Value',
                        selectPickerOptions: { optionsArray: $root.BrandCodeSelectList }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">@PlanningTPOTPK.lblFilterTPK</label>
            <div class="col-lg-7">
                <span data-bind="text: $root.filterTPKCode"></span>
                @*<input type="text" id="txtFilterTPKCode" class="form-control" readonly="readonly" data-bind="value:$root.filterTPKCode">*@
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">@PlanningTPOTPK.lblFilterYear</label>
            <div class="col-lg-4">
                @Html.DropDownList("ddlFilterKPSYear", Model.YearSelectList,
                new
                {
                    @class = "selectpicker show-tick form-control",
                    id = "ddlFilterKPSYear",
                    data_live_search = "true",
                    data_bind = "value:$root.filterKPSYear, event : { change : $root.onKPSYearChange }, isDisabled: $root.isLoading()"
                })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">@PlanningTPOTPK.lblFilterWeek</label>
            <div class="col-lg-4">
                <select id="ddlKPSWeekFilter" class="show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterKPSWeek, optionsText: 'Text', optionsValue : 'Value',
                    selectPickerOptions: { optionsArray: $root.KPSWeekSelectList }, event: { change: $root.onKPSWeekChange }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                <input type="checkbox" data-bind="checked: $root.isFilterCurrentDayForward, enable: $root.filterCurrenDayEnabled, click: $root.onCurrentDayForwardChange($root.isFilterCurrentDayForward)">
                Current Day Forward
            </label>
            <div class="col-lg-4">
                <div id="filterCurrentDayForward" class='input-group date time' data-bind="dateTimePicker: $root.filterCurrentDayForward, value: $root.filterCurrentDayForward, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true}">
                    <input id="dtFilterFrom" class="form-control" readonly="readonly" />
                    <span class="input-group-addon" data-bind="visible: $root.filterCurrenDayEnabled">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <p class="bg-primary">WPP Information: In Stick <span data-bind="decimal:$root.InStickCalculation"></span>, In Box <span data-bind="decimal:$root.InBoxCalculation"></span></p>
        </div>
    </div>
    <div class="col-lg-12">
        <div class="row">
            <div class="action-btn">
                <button type="button" class="btn btn-primary" data-bind="click:$root.search ">@CommonLabel.btnView</button>
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData, enable:$root.ButtonSave,event:{click:$root.SavedButton}">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.WIPStock.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#WipStock" data-bind="enable:$root.ButtonWIP">@PlanningTPOTPK.btnWIP</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.JKProses.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#JKProcess" data-bind="enable:$root.ButtonJK">@PlanningTPOTPK.btnProcess</button>
                }
                
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString()))
                {
                    using (Html.BeginForm("GenerateExcel", "PlanningTPOTPK", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="locationCode">
                        <input type="hidden" name="brandCode">
                        <input type="hidden" name="tpkCode">
                        <input type="hidden" name="year">
                        <input type="hidden" name="week">
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Submit.ToString()))
                {
                    <button type="button" class="btn btn-success" data-bind="click:$root.submitData, enable:$root.ButtonSubmit">Submit</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Calculate.ToString()))
                {
                    <button class="btn btn-success" type="button" data-bind="click:$root.CalculateData, enable:$root.ButtonCalculate">Calculate</button>
                }
                
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#selectGroup" data-bind="click:$root.ShowGroupSelection, enable:$root.ButtonSelectGroup">Select Group</button>
            </div>
        </div>
    </div>

    <div class="table-overflow">
        <table class="table table-striped sticktable">
            <thead>
                <tr class="head">
                    <th colspan="5">@PlanningTPOTPK.lblTitleDate</th>
                    <th colspan="4">Monday</th>
                    <th colspan="4">Tuesday</th>
                    <th colspan="4">Wednesday</th>
                    <th colspan="4">Thursday</th>
                    <th colspan="4">Friday</th>
                    <th colspan="4">Saturday</th>
                    <th colspan="4">Sunday</th>
                    <th colspan="2" rowspan="2">@PlanningTPOTPK.lblTitleTotal</th>
                </tr>
                <tr class="head">
                    <th colspan="5">@PlanningTPOTPK.lblTitleDate</th>
                    <th colspan="4"><span data-bind="text:$root.mondayDate"></span></th>
                    <th colspan="4"><span data-bind="text:$root.tuesdayDate"></span></th>
                    <th colspan="4"><span data-bind="text:$root.wednesdayDate"></span></th>
                    <th colspan="4"><span data-bind="text:$root.thursdayDate"></span></th>
                    <th colspan="4"><span data-bind="text:$root.fridayDate"></span></th>
                    <th colspan="4"><span data-bind="text:$root.saturdayDate"></span></th>
                    <th colspan="4"><span data-bind="text:$root.sundayDate"></span></th>
                </tr>
                <tr class="head">
                    <th colspan="5">@PlanningTPOTPK.lblTitleWH</th>

                    <th colspan="4" class="current" data-bind="visible: $root.mondayEditable() == true"><input type="text" style="text-align:center;" class="form-control transparent right" data-bind="value:$root.HeaderProcessWorkHours1.Value, event:{change: $root.onJKPChange($root.HeaderProcessWorkHours1)}" data-sktis-validation="decimal-dot"></th>
                    <th colspan="4" data-bind="visible: $root.mondayEditable() == false"><span data-bind="text:$root.HeaderProcessWorkHours1.Value"></span></th>
                   
                    <th colspan="4" class="current" data-bind="visible: $root.tuesdayEditable() == true">
                        <input type="text" style="text-align:center;" class="form-control transparent right" data-bind="value:$root.HeaderProcessWorkHours2.Value, event:{change: $root.onJKPChange($root.HeaderProcessWorkHours2)}" data-sktis-validation="decimal-dot">
                    </th>
                    <th colspan="4" data-bind="visible: $root.tuesdayEditable() == false">
                        <span data-bind="text:$root.HeaderProcessWorkHours2.Value"></span>
                    </th>

                    <th colspan="4" class="current" data-bind="visible: $root.wednesdayEditable() == true"><input type="text" style="text-align:center;" class="form-control transparent right" data-bind="value:$root.HeaderProcessWorkHours3.Value, event:{change: $root.onJKPChange($root.HeaderProcessWorkHours3)}" data-sktis-validation="decimal-dot"></th>
                    <th colspan="4" data-bind="visible: $root.wednesdayEditable() == false"><span data-bind="text:$root.HeaderProcessWorkHours3.Value"></span></th>

                    <th colspan="4" class="current" data-bind="visible: $root.thursdayEditable() == true"><input type="text" style="text-align:center;" class="form-control transparent right" data-bind="value:$root.HeaderProcessWorkHours4.Value, event:{change: $root.onJKPChange($root.HeaderProcessWorkHours4)}" data-sktis-validation="decimal-dot"></th>
                    <th colspan="4" data-bind="visible: $root.thursdayEditable() == false"><span data-bind="text:$root.HeaderProcessWorkHours4.Value"></span></th>

                    <th colspan="4" class="current" data-bind="visible: $root.fridayEditable() == true"><input type="text" style="text-align:center;" class="form-control transparent right" data-bind="value:$root.HeaderProcessWorkHours5.Value, event:{change: $root.onJKPChange($root.HeaderProcessWorkHours5)}" data-sktis-validation="decimal-dot"></th>
                    <th colspan="4" data-bind="visible: $root.fridayEditable() == false"><span data-bind="text:$root.HeaderProcessWorkHours5.Value"></span></th>

                    <th colspan="4" class="current" data-bind="visible: $root.saturdayEditable() == true"><input type="text" style="text-align:center;" class="form-control transparent right" data-bind="value:$root.HeaderProcessWorkHours6.Value, event:{change: $root.onJKPChange($root.HeaderProcessWorkHours6)}" data-sktis-validation="decimal-dot"></th>
                    <th colspan="4" data-bind="visible: $root.saturdayEditable() == false"><span data-bind="text:$root.HeaderProcessWorkHours6.Value"></span></th>

                    <th colspan="4" class="current" data-bind="visible: $root.sundayEditable() == true"><input type="text" style="text-align:center;" class="form-control transparent right" data-bind="value:$root.HeaderProcessWorkHours7.Value, event:{change: $root.onJKPChange($root.HeaderProcessWorkHours7)}" data-sktis-validation="decimal-dot"></th>
                    <th colspan="4" data-bind="visible: $root.sundayEditable() == false"><span data-bind="text:$root.HeaderProcessWorkHours7.Value"></span></th>

                    <th colspan="2"><span data-bind="text:$root.totalWorkHours"></span></th>
                </tr>
                <tr class="head">
                    <th colspan="5">@PlanningTPOTPK.lblTitleAttendance</th>
                    <th colspan="4"><span data-bind="decimal:$root.attendancePercentageMon"></span>%</th>
                    <th colspan="4"><span data-bind="decimal:$root.attendancePercentageTue"></span>%</th>
                    <th colspan="4"><span data-bind="decimal:$root.attendancePercentageWed"></span>%</th>
                    <th colspan="4"><span data-bind="decimal:$root.attendancePercentageThu"></span>%</th>
                    <th colspan="4"><span data-bind="decimal:$root.attendancePercentageFri"></span>%</th>
                    <th colspan="4"><span data-bind="decimal:$root.attendancePercentageSat"></span>%</th>
                    <th colspan="4"><span data-bind="decimal:$root.attendancePercentageSun"></span>%</th>
                    <th colspan="2"><span data-bind="decimal:$root.totalAttendancePercentage"></span>%</th>
                </tr>
                <tr class="head">
                    <th rowspan="2">@PlanningTPOTPK.lblTitleProcess</th>
                    <th rowspan="2">@PlanningTPOTPK.lblTitleGroup</th>
                    <th rowspan="2">@PlanningTPOTPK.lblTitleRegistered</th>
                    <th rowspan="2">@PlanningTPOTPK.lblTitleAvailable</th>
                    <th rowspan="2">@PlanningTPOTPK.lblTitleAllocation</th>
                    <th rowspan="2" colspan="2">@PlanningTPOTPK.lblTitleHistorical</th>
                    <th colspan="2">@PlanningTPOTPK.lblTitleTarget</th>
                    <th rowspan="2" colspan="2">@PlanningTPOTPK.lblTitleHistorical</th>
                    <th colspan="2">@PlanningTPOTPK.lblTitleTarget</th>
                    <th rowspan="2" colspan="2">@PlanningTPOTPK.lblTitleHistorical</th>
                    <th colspan="2">@PlanningTPOTPK.lblTitleTarget</th>
                    <th rowspan="2" colspan="2">@PlanningTPOTPK.lblTitleHistorical</th>
                    <th colspan="2">@PlanningTPOTPK.lblTitleTarget</th>
                    <th rowspan="2" colspan="2">@PlanningTPOTPK.lblTitleHistorical</th>
                    <th colspan="2">@PlanningTPOTPK.lblTitleTarget</th>
                    <th rowspan="2" colspan="2">@PlanningTPOTPK.lblTitleHistorical</th>
                    <th colspan="2">@PlanningTPOTPK.lblTitleTarget</th>
                    <th rowspan="2" colspan="2">@PlanningTPOTPK.lblTitleHistorical</th>
                    <th colspan="2">@PlanningTPOTPK.lblTitleTarget</th>
                    <th colspan="2">@PlanningTPOTPK.lblTitleTarget</th>
                </tr>
                <tr class="head">
                    <th>@PlanningTPOTPK.lblTitleSystem</th>
                    <th>@PlanningTPOTPK.lblTitleMasnual</th>
                    <th>@PlanningTPOTPK.lblTitleSystem</th>
                    <th>@PlanningTPOTPK.lblTitleMasnual</th>
                    <th>@PlanningTPOTPK.lblTitleSystem</th>
                    <th>@PlanningTPOTPK.lblTitleMasnual</th>
                    <th>@PlanningTPOTPK.lblTitleSystem</th>
                    <th>@PlanningTPOTPK.lblTitleMasnual</th>
                    <th>@PlanningTPOTPK.lblTitleSystem</th>
                    <th>@PlanningTPOTPK.lblTitleMasnual</th>
                    <th>@PlanningTPOTPK.lblTitleSystem</th>
                    <th>@PlanningTPOTPK.lblTitleMasnual</th>
                    <th>@PlanningTPOTPK.lblTitleSystem</th>
                    <th>@PlanningTPOTPK.lblTitleMasnual</th>
                    <th>@PlanningTPOTPK.lblTitleSystem</th>
                    <th>@PlanningTPOTPK.lblTitleMasnual</th>
                </tr>
                <tr class="insertRow" data-bind="click: cancelInline.bind(),inlineAddProccess:[$data, $root.newData]" style="display: none">
                    <th colspan="41">
                        <input type="text" />
                    </th>
                </tr>
            </thead>
            <tbody data-bind="visible: listDataItems().length, foreach: listDataItems">
                <!-- ko foreach: $data.PlanTPOTPK -->
                <tr data-bind="visible: $data.Allocation">
                    <!-- ko if: $index() == 0 -->
                    <td><span data-bind="text:$parent.ProcessGroup"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $index() != 0 -->
                    <td><span data-bind="text:$parent.ProcessGroup"></span></td>
                    <!-- /ko -->
                    <td class="right"><span data-bind="text:$data.ProdGroup, visible: $data.Allocation"></span></td>
                    <td class="right"><span data-bind="decimal:$data.WorkerRegister, precision: 0"></span></td>
                    <td class="right"><span data-bind="decimal:$data.WorkerAvailable, precision: 0"></span></td>
                    @*<td class="right"><span data-bind="text:$data.Allocation"></span></td>*@
                    <td class="right current">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.Allocation, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="digit">
                    </td>
                    @*monday*@
                    <td class="right" colspan="2"><span data-bind="decimal: $root.GenProductivity($data, 1)"></span></td>
                    <td class="right"><span data-bind="decimal:$data.TargetSystem1"></span></td>
                    @*<td class="right"><span data-bind="decimal:$data.TargetManualMon"></span></td>*@
                    <!-- ko if: $root.mondayEditable() == true -->
                    <td class="right current">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManualMon , event:{change:$root.confirmSave}" data-sktis-validation="decimal-dot" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.mondayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualMon"></span>
                    </td>
                    <!-- /ko -->
                    @*Tuesday*@
                    <td class="right" colspan="2"><span data-bind="decimal: $root.GenProductivity($data, 2)"></span></td>
                    <td class="right"><span data-bind="decimal:$data.TargetSystem2"></span></td>
                    @*<td class="right"><span data-bind="decimal:$data.TargetManualTue"></span></td>*@
                    <!-- ko if: $root.tuesdayEditable() == true -->
                    <td class="right current">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManualTue, event:{change:$root.confirmSave}" data-sktis-validation="decimal-dot" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.tuesdayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualTue"></span>
                    </td>
                    <!-- /ko -->
                    @*Wednesday*@
                    <td class="right" colspan="2"><span data-bind="decimal: $root.GenProductivity($data, 3)"></span></td>
                    <td class="right"><span data-bind="decimal:$data.TargetSystem3"></span></td>
                    @*<td class="right"><span data-bind="decimal:$data.TargetManualWed"></span></td>*@
                    <!-- ko if: $root.wednesdayEditable() == true -->
                    <td class="right current">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManualWed, event:{change:$root.confirmSave}" data-sktis-validation="decimal-dot" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.wednesdayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualWed"></span>
                    </td>
                    <!-- /ko -->
                    @*Thursday*@
                    <td class="right" colspan="2"><span data-bind="decimal: $root.GenProductivity($data, 4)"></span></td>
                    <td class="right"><span data-bind="decimal:$data.TargetSystem4"></span></td>
                    @*<td class="right"><span data-bind="decimal:$data.TargetManualThu"></span></td>*@
                    <!-- ko if: $root.thursdayEditable() == true -->
                    <td class="right current">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManualThu, event:{change:$root.confirmSave}" data-sktis-validation="decimal-dot" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.thursdayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualThu"></span>
                    </td>
                    <!-- /ko -->
                    @*Friday*@
                    <td class="right" colspan="2"><span data-bind="decimal: $root.GenProductivity($data, 5)"></span></td>
                    <td class="right"><span data-bind="decimal:$data.TargetSystem5"></span></td>
                    @*<td class="right"><span data-bind="decimal:$data.TargetManualFri"></span></td>*@
                    <!-- ko if: $root.fridayEditable() == true -->
                    <td class="right current">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManualFri, event:{change:$root.confirmSave}" data-sktis-validation="decimal-dot" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.fridayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualFri"></span>
                    </td>
                    <!-- /ko -->
                    @*Saturday*@
                    <td class="right" colspan="2"><span data-bind="decimal: $root.GenProductivity($data, 6)"></span></td>
                    <td class="right"><span data-bind="decimal:$data.TargetSystem6"></span></td>
                    @*<td class="right"><span data-bind="decimal:$data.TargetManualSat"></span></td>*@
                    <!-- ko if: $root.saturdayEditable() == true -->
                    <td class="right current">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManualSat, event:{change:$root.confirmSave}" data-sktis-validation="decimal-dot" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.saturdayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualSat"></span>
                    </td>
                    <!-- /ko -->
                    @*Sunday*@
                    <td class="right" colspan="2"><span data-bind="decimal: $root.GenProductivity($data, 7)"></span></td>
                    <td class="right"><span data-bind="decimal:$data.TargetSystem7"></span></td>
                    @*<td class="right"><span data-bind="decimal:$data.TargetManualSun"></span></td>*@
                    <!-- ko if: $root.sundayEditable() == true -->
                    <td class="right current">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManualSun, event:{change:$root.confirmSave}" data-sktis-validation="decimal-dot" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.sundayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualSun"></span>
                    </td>
                    <!-- /ko -->
                    <td class="right"><span data-bind="decimal:$data.TotalTargetSystem"></span></td>
                    <td class="right"><span data-bind="decimal:$data.TotalTargetManual"></span></td>
                </tr>
                <!-- /ko -->
                <tr class="total">
                    <td class="right">Total</td>
                    <td class="right" data-bind="decimal: $data.TotalRow"></td>
                    <td class="right" data-bind="decimal: $data.SubTotalWorkerRegister"></td>
                    <td class="right" data-bind="decimal: $data.SubTotalWorkerAvailable"></td>
                    <td class="right" data-bind="decimal: $data.SubTotal"></td>
                    <td colspan="2"></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalSytem1"></span></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalManual1"></span></td>
                    <td colspan="2"></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalSytem2"></span></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalManual2"></span></td>
                    <td colspan="2"></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalSytem3"></span></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalManual3"></span></td>
                    <td colspan="2"></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalSytem4"></span></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalManual4"></span></td>
                    <td colspan="2"></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalSytem5"></span></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalManual5"></span></td>
                    <td colspan="2"></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalSytem6"></span></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalManual6"></span></td>
                    <td colspan="2"></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalSytem7"></span></td>
                    <td class="right"><span data-bind="decimal: $data.SubTotalManual7"></span></td>
                    <td class="right"><span data-bind="decimal: $data.TargetSystemTotal"></span></td>
                    <td class="right"><span data-bind="decimal: $data.TargetManualTotal"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="35" class="empty-row-message">
                        <div class="loader"></div>
                    </td>
                </tr>
            </tbody>
            <tfoot data-bind="visible: listDataItems().length">
                <!-- ko foreach: CustomResults -->
                <tr class="total">
                    <td class="right">
                        <!-- ko if: $index() == 0 --><span>Total Stick</span><!-- /ko -->
                        <!-- ko if: $index() == 1 --><span>Total Box</span><!-- /ko -->
                    </td>
                    <td class="right"></td>
                    <td class="right"></td>
                    <td class="right"></td>
                    <td class="right"></td>
                    <td class="right"></td>
                    <td class="right"></td>
                    <td class="right" data-bind="decimal: $data.TargetSystem1"></td>
                    <!-- ko if: $index() == 0 -->
                    @*<input type="text" class="form-control transparent right" data-bind="value:$data.Allocation, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="digit">*@
                    <td class="right" data-bind="decimal: $data.TargetManual1.extend({numeric:0})"></td><!-- /ko -->
                    <!-- ko if: $index() == 1 -->
                    <td class="right current" data-bind="visible: $root.mondayEditable() == true">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManual1, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" />
                    </td>
                    <td data-bind="visible: $root.mondayEditable() == false"><span data-bind="decimal:$data.TargetManual1"></span></td>
                    <!-- /ko -->
                    <td></td>
                    <td></td>
                    <td class="right" data-bind="decimal: $data.TargetSystem2"></td>
                    <!-- ko if: $index() == 0 -->
                    <td class="right" data-bind="decimal: $data.TargetManual2.extend({numeric:0})"></td><!-- /ko -->
                    <!-- ko if: $index() == 1 -->
                    <td class="right current" data-bind="visible: $root.tuesdayEditable() == true">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManual2, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" />
                    </td>
                    <td data-bind="visible: $root.tuesdayEditable() == false"><span data-bind="decimal:$data.TargetManual2"></span></td>
                    <!-- /ko -->
                    <td></td>
                    <td></td>
                    <td class="right" data-bind="decimal: $data.TargetSystem3"></td>
                    <!-- ko if: $index() == 0 -->
                    <td class="right" data-bind="decimal: $data.TargetManual3.extend({numeric:0})"></td><!-- /ko -->
                    <!-- ko if: $index() == 1 -->
                    <td class="right current" data-bind="visible: $root.wednesdayEditable() == true">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManual3, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" />
                    </td>
                    <td data-bind="visible: $root.wednesdayEditable() == false"><span data-bind="decimal:$data.TargetManual3"></span></td>
                    <!-- /ko -->
                    <td></td>
                    <td></td>
                    <td class="right" data-bind="decimal: $data.TargetSystem4"></td>
                    <!-- ko if: $index() == 0 -->
                    <td class="right" data-bind="decimal: $data.TargetManual4.extend({numeric:0})"></td><!-- /ko -->
                    <!-- ko if: $index() == 1 -->
                    <td class="right current" data-bind="visible: $root.thursdayEditable() == true">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManual4, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" />
                    </td>
                    <td data-bind="visible: $root.thursdayEditable() == false"><span data-bind="decimal:$data.TargetManual4"></span></td>
                    <!-- /ko -->
                    <td></td>
                    <td></td>
                    <td class="right" data-bind="decimal: $data.TargetSystem5"></td>
                    <!-- ko if: $index() == 0 -->
                    <td class="right" data-bind="decimal: $data.TargetManual5.extend({numeric:0})"></td><!-- /ko -->
                    <!-- ko if: $index() == 1 -->
                    <td class="right current" data-bind="visible: $root.fridayEditable() == true">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManual5, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" />
                    </td>
                    <td data-bind="visible: $root.fridayEditable() == false"><span data-bind="decimal:$data.TargetManual5"></span></td>
                    <!-- /ko -->
                    <td></td>
                    <td></td>
                    <td class="right" data-bind="decimal: $data.TargetSystem6"></td>
                    <!-- ko if: $index() == 0 -->
                    <td class="right" data-bind="decimal: $data.TargetManual6.extend({numeric:0})"></td><!-- /ko -->
                    <!-- ko if: $index() == 1 -->
                    <td class="right current" data-bind="visible: $root.saturdayEditable() == true">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManual6, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" />
                    </td>
                    <td data-bind="visible: $root.saturdayEditable() == false"><span data-bind="decimal:$data.TargetManual6"></span></td>
                    <!-- /ko -->
                    <td></td>
                    <td></td>
                    <td class="right" data-bind="decimal: $data.TargetSystem7"></td>
                    <!-- ko if: $index() == 0 -->
                    <td class="right" data-bind="decimal: $data.TargetManual7.extend({numeric:0})"></td><!-- /ko -->
                    <!-- ko if: $index() == 1 -->
                    <td class="right current" data-bind="visible: $root.sundayEditable() == true">
                        <input type="text" class="form-control transparent right" data-bind="value:$data.TargetManual7, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" />
                    </td>
                    <td data-bind="visible: $root.sundayEditable() == false"><span data-bind="decimal:$data.TargetManual7"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $index() == 0 -->
                    <td class="right" data-bind="decimal: $data.TotalTargetSystem"></td>
                    <!-- /ko -->
                    <!-- ko if: $index() == 1 -->
                    <td class="right" data-bind="decimal: $data.TotalTargetSystem.extend({numerics: 3})"></td>
                    <!-- /ko -->
                    <td class="right" data-bind="decimal: $data.TotalTargetManual, css:{ 'red-text' : $data.TotalTargetManual() != $data.TotalTargetSystem() }"></td>
                </tr>
                <!-- /ko -->
            </tfoot>
        </table>
        <!-- Modal -->
        <div class="modal fade" id="WipStock" role="dialog">
            <div class="modal-dialog modal-lg">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">WIP Stock</h4>
                    </div>
                    <div class="modal-body">
                        <div class="table-overflow">
                            <table class="table table-striped" id="wips">
                                <thead>
                                    <tr class="head">
                                        <th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                        <th>Previous</th>
                                        <th>Monday</th>
                                        <th>Tuesday</th>
                                        <th>Wednesday</th>
                                        <th>Thursday</th>
                                        <th>Friday</th>
                                        <th>Saturday</th>
                                        <th>Sunday</th>
                                    </tr>
                                </thead>
                                <tbody data-bind="foreach: listDataItems">
                                    <!-- ko if: $data.ShowInWIPStock -->
                                    <tr>
                                        <td class="head"><span data-bind="text:$data.ProcessGroup"></span></td>
                                        <td class="right"><span data-bind="decimal:$data.WIPPreviousValue"></span></td>

                                        <!-- ko if: $root.mondayEditable() == true -->
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.WIPStock1, event:{change:$root.EditedHeaderCalculate.bind($parent,$data), keyup:$root.EditedHeaderCalculate.bind($parent,$data.WIPStock1)}" data-sktis-validation="number"></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.mondayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.WIPStock1"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.tuesdayEditable() == true -->
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.WIPStock2, event:{change:$root.EditedHeaderCalculate.bind($parent,$data), keyup:$root.EditedHeaderCalculate.bind($parent,$data.WIPStock2)}" data-sktis-validation="number"></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.tuesdayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.WIPStock2"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.wednesdayEditable() == true -->
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.WIPStock3, event:{change:$root.EditedHeaderCalculate.bind($parent,$data)}" data-sktis-validation="number"></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.wednesdayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.WIPStock3"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.thursdayEditable() == true -->
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.WIPStock4, event:{change:$root.EditedHeaderCalculate.bind($parent,$data)}" data-sktis-validation="number"></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.thursdayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.WIPStock4"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.fridayEditable() == true -->
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.WIPStock5, event:{change:$root.EditedHeaderCalculate.bind($parent,$data)}" data-sktis-validation="number"></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.fridayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.WIPStock5"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.saturdayEditable() == true -->
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.WIPStock6, event:{change:$root.EditedHeaderCalculate.bind($parent,$data)}" data-sktis-validation="number"></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.saturdayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.WIPStock6"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.sundayEditable() == true -->
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.WIPStock7, event:{change:$root.EditedHeaderCalculate.bind($parent,$data)}" data-sktis-validation="number"></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.sundayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.WIPStock7"></span></td>
                                        <!-- /ko -->
                                    </tr>
                                    <!-- /ko -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal" data-bind="click:$root.saveWIPStock">Save</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal" data-bind="click:$root.closeWIPStock">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Modal -->
        <!-- Modal -->
        <div class="modal fade" id="JKProcess" role="dialog">
            <div class="modal-dialog modal-lg">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">JK Process</h4>
                    </div>
                    <div class="modal-body">
                        <div class="table-overflow">
                            <table class="table table-striped" id="wips">
                                <thead>
                                    <tr class="head">
                                        <th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                                        <th>Monday</th>
                                        <th>Tuesday</th>
                                        <th>Wednesday</th>
                                        <th>Thursday</th>
                                        <th>Friday</th>
                                        <th>Saturday</th>
                                        <th>Sunday</th>
                                    </tr>
                                </thead>
                                <tbody data-bind="foreach: listDataItems">
                                    <tr>
                                        <td class="head"><span data-bind="text:$data.ProcessGroup"></span></td>

                                        <!-- ko if: $root.mondayEditable() == true -->
                                        @*<td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess1, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" /></td>*@
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess1, event:{change:$root.EditedWorkHourProcess.bind($parent,$data,$data.JKProcess1,$data.ProcessGroup,1)}" data-sktis-validation="decimal-dot" /></td>
                                        @*<input data-bind="value: $data.ProcessWorkHoursMon,                                                                    event:{change:$root.EditedWorkUnitHour.bind($parent,$data,$data.ProcessWorkHoursMon, $data.UnitCode, 1), click:$root.confirmSave}" type="text" class="form-control transparent right" data-sktis-validation="decimal-dot" />*@
                                        <!-- /ko -->
                                        <!-- ko if: $root.mondayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.JKProcess1"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.tuesdayEditable() == true -->
                                        @*<td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess2, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" /></td>*@
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess2, event:{change:$root.EditedWorkHourProcess.bind($parent,$data,$data.JKProcess2,$data.ProcessGroup,2)}" data-sktis-validation="decimal-dot" /></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.tuesdayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.JKProcess2"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.wednesdayEditable() == true -->
                                        @*<td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess3, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" /></td>*@
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess3, event:{change:$root.EditedWorkHourProcess.bind($parent,$data,$data.JKProcess3,$data.ProcessGroup,3)}" data-sktis-validation="decimal-dot" /></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.wednesdayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.JKProcess3"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.thursdayEditable() == true -->
                                        @*<td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess4, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" /></td>*@
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess4, event:{change:$root.EditedWorkHourProcess.bind($parent,$data,$data.JKProcess4,$data.ProcessGroup,4)}" data-sktis-validation="decimal-dot" /></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.thursdayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.JKProcess4"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.fridayEditable() == true -->
                                        @*<td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess5, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" /></td>*@
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess5, event:{change:$root.EditedWorkHourProcess.bind($parent,$data,$data.JKProcess5,$data.ProcessGroup,5)}" data-sktis-validation="decimal-dot" /></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.fridayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.JKProcess5"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.saturdayEditable() == true -->
                                        @*<td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess6, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" /></td>*@
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess6, event:{change:$root.EditedWorkHourProcess.bind($parent,$data,$data.JKProcess6,$data.ProcessGroup,6)}" data-sktis-validation="decimal-dot" /></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.saturdayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.JKProcess6"></span></td>
                                        <!-- /ko -->

                                        <!-- ko if: $root.sundayEditable() == true -->
                                        @*<td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess7, event:{change:$root.EditedRowCalculate.bind($parent,$data)}" data-sktis-validation="decimal-dot" /></td>*@
                                        <td class="current right"><input type="text" class="form-control transparent right" data-bind="value:$data.JKProcess7, event:{change:$root.EditedWorkHourProcess.bind($parent,$data,$data.JKProcess7,$data.ProcessGroup,7)}" data-sktis-validation="decimal-dot" /></td>
                                        <!-- /ko -->
                                        <!-- ko if: $root.sundayEditable() == false -->
                                        <td class="right"><span data-bind="decimal:$data.JKProcess7"></span></td>
                                        <!-- /ko -->

                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-bind="click:$root.saveJKProcess">Save</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal" data-bind="click:$root.closeJKProcess">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Modal -->
        <!-- Modal -->
        <div class="modal fade" id="selectGroup" role="dialog">
            <div class="modal-dialog">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Group Select</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="panel panel-default ">
                                    <div class="panel-heading">
                                        <div class="checkbox nomargin">
                                            <label><input type="checkbox" data-bind="click: $root.selectAll, checked: $root.allSelected" name="check_all">Check All</label>
                                        </div>
                                    </div>
                                    <div class="panel-body scrolled" data-bind="foreach: $root.groupList">
                                        <div class="checkbox">
                                            <label>
                                                <input type="checkbox" data-bind="checked: Status , click: $root.checkedAllorNot" name="checked">
                                                <span data-bind="text:$data.GroupId"></span>
                                            </label>
                                        </div>

                                    </div>
                                </div>
                                <p>Total group checked : <span data-bind="text:$root.totalChecked"></span></p>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal" data-bind="click: $root.saveAllocations">Save</button>
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Modal -->
    </div>
    @Html.Partial("TransactionHistory")

</div>
@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
<script src="~/Scripts/common/app.Extenders.js" type="text/javascript"></script>
    <script type="text/javascript">
    (function(app) {
        app.EditGrid = function() {
            var self = this;
            //Filter
            self.menuItemLocations = ko.observableArray(@Html.Raw(Json.Encode(@Model.TPOChildLocationLookupList)));
            self.firstInit = true;
            self.itemLocations = @Html.Raw(Json.Encode(@Model.TPOChildLocationLookupList));
            self.filterLocationCode = ko.observable($("#ddlFilterLocationCode").val());
            self.filterLocationName = ko.observable();
            self.filterBrandCode = ko.observable('@Model.DefaultBrandCode');
            @*self.filterTPKCode = ko.observable(@Model.DefaultTPK);*@
            self.filterKPSYear = ko.observable(@Model.DefaultYear);
            self.filterKPSWeek = ko.observable(@Model.DefaultWeek);
            self.BrandCodeSelectList = ko.observableArray([]);
            self.KPSWeekSelectList = ko.observableArray([]);
            self.isFilterCurrentDayForward = ko.observable(false);
            self.filterCurrentDayForward = ko.observable(moment().toDate());
            self.fromPopup = ko.observable(false);
            self.ButtonCalculate = ko.observable(false);
            self.ButtonSubmit = ko.observable(false);
            self.ButtonWIP = ko.observable(false);
            self.ButtonJK = ko.observable(false);
            self.ButtonSelectGroup = ko.observable(false);
            self.ButtonSave = ko.observable(false);
            self.TargetWPP = ko.observable();
            self.StickPerBox = ko.observable(0);
            self.totalChecked = ko.observable(0);
            self.EditedWIPStock = ko.observable(false);
            self.EditedAllocation = ko.observable(false);
            self.EditedTotalBox = ko.observable(false);
            self.EditedJkp = ko.observable(false);
            self.filterCurrenDayEnabled = ko.observable(false);
            self.isLoading = ko.observable(false);
            self.isAlreadySubmitted = ko.observable(false);
            self.enableRow = ko.observable(true);
            var currentDate = new Date();
            var day = currentDate.getDate();
            var month = currentDate.getMonth() + 1;
            var year = currentDate.getFullYear();

            //Group Select List
            self.groupList = ko.observableArray([]);
            self.oldGroupList = ko.observableArray([]);
            self.getGroupList = function(cb)
            {
                var filter = {
                    LocationCode: self.filterLocationCode(),
                    BrandCode: self.filterBrandCode(),
                    TPKCode: self.filterTPKCode(),
                    KPSYear: self.filterKPSYear(),
                    KPSWeek: self.filterKPSWeek()
                };
                ////console.log(JSON.stringify(filter));
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/GetGroupList"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    dataType: 'json',
                    data: filter,
                    success: function(data) {
                        // console.log(data);
                        self.allSelected(true);
                        var list = [];
                        $.each(data, function(index, value) {
                            $.each(value.PlanTPOTPK, function(index, value) {
                                list.push({
                                    "GroupId": value.ProdGroup,
                                    "Status" : value.WorkerAlocation>0?ko.observable(true):ko.observable(false)
                                });
                            });
                        });
                        self.groupList(list);

                        //console.log(list);
                        //if (self.groupList().length == 0) {
                        //    self.groupList(list);
                        //}

                        //buat data untuk old group tidak pakai observable
                        var listOld = [];
                        $.each(data, function(index, value) {
                            $.each(value.PlanTPOTPK, function(index, value) {
                                listOld.push({
                                    "GroupId": value.ProdGroup,
                                    "Status" : value.WorkerAlocation>0?true:false
                                });
                            });
                        });
                        self.oldGroupList(listOld);

                        self.checkedAllorNot();
                    },complete: function() {
                        if (typeof cb != 'undefined') cb();
                    }
                });
            };
            self.ShowGroupSelection = function()
            {
                if (self.firstLoad || self.isLoading()) return;

                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.getGroupList(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
            };

            // observe variable jang togle all checked
            self.allSelected = ko.observable('');

            // pungsi buat toggle all checked atau unchecked
            self.selectAll = function() {
                var all = self.allSelected();
                var numCheck = 0;
                ko.utils.arrayForEach(self.groupList(), function(item) {
                    item.Status(!all);
                    if (all != true) {
                        numCheck++;
                    }
                });
                self.totalChecked(numCheck);
                return true;
            };

            // Child check's will affect the parent Check All control
            self.checkedAllorNot = function(){
                var check = true;
                var numCheck = 0;
                ko.utils.arrayForEach(self.groupList(), function(item) {
                    check = check && item.Status();
                    if (item.Status() == true) {
                        numCheck++;
                    }
                });
                self.totalChecked(numCheck);
                if(check)
                    self.allSelected(true);
                else
                    self.allSelected(false);
                return true;
            };

            
            self.expelledGroup = ko.observableArray([]);
            self.restoredGroup = ko.observableArray([]);
            self.saveAllocations = function(datas, fromPopup){
                
                self.expelledGroup([]);
                self.restoredGroup([]);

                $.each(self.groupList(), function(k, value) {
                    if (value.Status() == false) {
                        self.expelledGroup.push(value.GroupId);
                    }
                });

                for (var i = 0; i < self.groupList().length; i++) {
                    //console.log(self.groupList()[i].Status());
                    //console.log(self.oldGroupList()[i].Status);
                    if (self.groupList()[i].Status() != self.oldGroupList()[i].Status) {
                        if(self.groupList()[i].Status()==true)
                        {
                            self.restoredGroup.push(self.groupList()[i].GroupId);
                        }
                    }
                }

                //console.log(self.groupList());
                //console.log(self.oldGroupList());
                //console.log(self.restoredGroup());
                //console.log(self.gridView.listDataItems());
                $.each(self.gridView.listDataItems(), function(k, value) {
                    $.each(value.PlanTPOTPK, function(k, value) {
                        $.each(self.expelledGroup(), function(idx, dt) {
                            if (dt == value.ProdGroup()) {
                                //console.log(value);
                                value.Allocation(0);
                                self.ButtonCalculate(true);
                            }
                        });
                        $.each(self.restoredGroup(), function(idx, dt) {
                            if (dt == value.ProdGroup()) {
                                //console.log(value);
                                value.Allocation(value.WorkerRegister());
                                self.ButtonCalculate(true);
                            }
                        });
                    });
                });

                self.ButtonSelectGroup(false);
                //console.log(self.expelledGroup());
                //self.fromPopup(true);
                //self.search();
                //console.log(data);
            };

            self.onCurrentDayForwardChange = function(item) {
                if (self.filterCurrenDayEnabled() == true && item() == true){
                    var date = self.filterCurrentDayForward();
                    var day = moment(date, "DD/MM/YYYY").weekday();
                    switch(day)
                    {
                        case 0:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(false);
                            self.thursdayEditable(false);
                            self.fridayEditable(false);
                            self.saturdayEditable(false);
                            self.sundayEditable(false);
                            break;
                        case 1:
                            self.mondayEditable(true);
                            self.tuesdayEditable(true);
                            self.wednesdayEditable(true);
                            self.thursdayEditable(true);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 2:
                            self.mondayEditable(false);
                            self.tuesdayEditable(true);
                            self.wednesdayEditable(true);
                            self.thursdayEditable(true);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 3:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(true);
                            self.thursdayEditable(true);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 4:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(false);
                            self.thursdayEditable(true);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 5:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(false);
                            self.thursdayEditable(false);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 6:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(false);
                            self.thursdayEditable(false);
                            self.fridayEditable(false);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                    }
                }
                else if(self.filterCurrenDayEnabled() == true && item() == false){
                    self.mondayEditable(true);
                    self.tuesdayEditable(true);
                    self.wednesdayEditable(true);
                    self.thursdayEditable(true);
                    self.fridayEditable(true);
                    self.saturdayEditable(true);
                    self.sundayEditable(true);
                }
                //return true;
            }

            // State
            self.KPSWeekReady = ko.observable(false);

            self.InBoxCalculation = ko.pureComputed(function() {
                return (self.TargetWPP() / self.StickPerBox());
            }, self);
            self.InStickCalculation = ko.pureComputed(function() {
                return Math.round(self.TargetWPP());
            }, self);

            self.filterTPKCode = ko.computed(function() {
                return 'TPK/' + self.filterLocationCode() + '/' + self.filterBrandCode() + '/' + self.filterKPSYear() + '/' + self.filterKPSWeek();
            });

            self.GenProductivity = function($data, day)
            {
                var value = 0;

                return ko.computed(function() {
                    switch (day)
                    {
                        case 1:
                            value = parseFloat( $data.Allocation() * $data.HistoricalCapacityWorker1() );
                            $data.HistoricalCapacityGroup1(value);
                            break;
                        case 2:
                            value = parseFloat( $data.Allocation() * $data.HistoricalCapacityWorker2() );
                            $data.HistoricalCapacityGroup2(value);
                            break;
                        case 3:
                            value = parseFloat( $data.Allocation() * $data.HistoricalCapacityWorker3() );
                            $data.HistoricalCapacityGroup3(value);
                            break;
                        case 4:
                            value = parseFloat( $data.Allocation() * $data.HistoricalCapacityWorker4() );
                            $data.HistoricalCapacityGroup4(value);
                            break;
                        case 5:
                            value = parseFloat( $data.Allocation() * $data.HistoricalCapacityWorker5() );
                            $data.HistoricalCapacityGroup5(value);
                            break;
                        case 6:
                            value = parseFloat( $data.Allocation() * $data.HistoricalCapacityWorker6() );
                            $data.HistoricalCapacityGroup6(value);
                            break;
                        case 7:
                            value = parseFloat( $data.Allocation() * $data.HistoricalCapacityWorker7() );
                            $data.HistoricalCapacityGroup7(value);
                            break;
                    }

                    return value.toFixed(2);
                });
            };

            self.MaximumJPKValue = 10;

            self.onJKPChange = function($JPK)
            {
                if(self.EditedWIPStock() == true) {
                    noty({
                        text: 'Save WIP Stock ?',
                        type: 'confirm',
                        modal: true,
                        buttons: [
                            {
                                addClass: 'btn btn-primary', text: 'Save', onClick: function ($noty) {
                                    $noty.close();
                                    self.saveData();
                                    self.ButtonSubmit(true);
                                    self.EditedWIPStock(false);
                                }
                            },
                            {
                                addClass: 'btn btn-danger', text: 'Cancel', onClick: function ($noty) {
                                    $noty.close();
                                    self.EditedWIPStock(false);
                                    self.search();
                                }
                            }
                        ],
                        theme: 'relax',
                        template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
                    });
                }else{
                    //if(self.EditedAllocation() == true || self.EditedTotalBox() == true) {
                    //noty({
                    //    text: 'Calculate first ?',
                    //    type: 'confirm',
                    //    modal: true,
                    //    buttons: [
                    //        {
                    //            addClass: 'btn btn-primary', text: 'Calculate', onClick: function ($noty) {
                    //                $noty.close();
                    //                self.EditedAllocation(false);
                    //                self.EditedTotalBox(false);
                    //                self.CalculateData();
                    //            }
                    //        },
                    //        {
                    //            addClass: 'btn btn-danger', text: 'Cancel', onClick: function ($noty) {
                    //                $noty.close();
                    //                self.EditedAllocation(false);
                    //                self.EditedTotalBox(false);
                    //                self.search();
                    //            }
                    //        }
                    //    ],
                    //    theme: 'relax',
                    //    template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
                    //});
                    //}else{
                    //console.log('2');
                    var value = $JPK.Value();

                    if (value > self.MaximumJPKValue)
                        value = self.MaximumJPKValue;
                    else if (value < 0 || isNaN(value))
                        value = 0;

                    $.each(self.historyGridView.listDataItems(), function(i, item) {
                        if(item.action() == 'Submit'){
                            self.isAlreadySubmitted(true);
                        }
                    });
                    if(self.isAlreadySubmitted()){
                        self.filterCurrenDayEnabled(true);
                        self.isFilterCurrentDayForward(true);
                    }

                    // Re-enable button calculate
                    self.ButtonCalculate(true);
                    self.filterCurrenDayEnabled(true);
                    self.ButtonSave(false);
                    self.EditedJkp(true);
                    ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                        item[$JPK.Deps()]( parseFloat(value) );
                    });

                    $JPK.Value( parseFloat(value) );
                    self.saveJKProcess();
                    //}
                }
            }

            function JKP(val, deps)
            {
                this.Value = ko.observable(val);
                this.Deps = ko.observable(deps);
            }

            //Process Work Hour Header
            self.HeaderProcessWorkHours1 = new JKP(0, 'JKProcess1');
            self.HeaderProcessWorkHours2 = new JKP(0, 'JKProcess2');
            self.HeaderProcessWorkHours3 = new JKP(0, 'JKProcess3');
            self.HeaderProcessWorkHours4 = new JKP(0, 'JKProcess4');
            self.HeaderProcessWorkHours5 = new JKP(0, 'JKProcess5');
            self.HeaderProcessWorkHours6 = new JKP(0, 'JKProcess6');
            self.HeaderProcessWorkHours7 = new JKP(0, 'JKProcess7');

            //excel
            self.filterExcelLocationCode = self.filterLocationCode();
            self.filterExcelBrandCode = self.filterBrandCode();
            self.filterExcelKPSYear = self.filterKPSYear();
            self.filterExcelKPSWeek = self.filterKPSWeek();
            self.filterExcelTPKCode = self.filterTPKCode();

            self.onLocationCodeChange = function(cb) {
                if (self.firstLoad || self.isLoading()) return;

                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.getLocationNameFilter(cb);
                    },
                    function(cb) {
                        self.getBrandCodeList(cb)
                    }
                ], function() {
                    self.isLoading(false);
                });
            };

            //get location name by location code
            self.getLocationNameFilter = function(cb) {
                for (var i = 0; i < self.itemLocations.length; i++) {
                    if (self.itemLocations[i].LocationCode == self.filterLocationCode()) {
                        self.filterLocationName(self.itemLocations[i].LocationName);
                        $('option:selected', $("#ddlFilterLocationCode")).text(self.itemLocations[i].LocationCode);
                        if (typeof cb == 'function') cb();
                        break;
                    }
                }
            };

            self.confirmSave = function(){
                self.ButtonSave(true);
                //if(!self.EditedTargetManual())
                //    return;
                //if(confirm("Save All Target Manual?")){
                //    self.saveData();
                //}else{
                //    self.search();
                //    self.EditedTargetManual(false);
                //}
            }


            self.gridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 99999,
                    PageIndex: 1,
                    //SortExpression: "ProcessGroup",
                    SortExpression: "ProcessOrder",
                    SortOrder: "ASC",
                    LocationCode: self.filterLocationCode,
                    BrandCode: self.filterBrandCode,
                    TPKCode: self.filterTPKCode,
                    KPSYear: self.filterKPSYear,
                    KPSWeek: self.filterKPSWeek,
                    FromPopup: self.fromPopup,
                    ExpelledGroup: self.expelledGroup
                },
                DataSourceUrl: @Html.BaseUrl("PlanningTPOTPK/GetTPOTPK"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 0
            });

            //calculate historical capacity group
            function getHistoricalCapacityGroup(totalActualProductionPrev3Weeks, totalWorkHoursPrev3Weeks, workerAlocation) {
                var result = parseToFloat((totalActualProductionPrev3Weeks/totalWorkHoursPrev3Weeks) * workerAlocation);
                return result;
            };

            function getTargetSystemByBobot(bobot, totalBobot, totalTarget) {
                return parseToFloat((bobot / totalBobot) * totalTarget);
            };

            function isFunction(functionToCheck) {
                var getType = {};
                return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
            }

            function getTotalBobotSystemAllGroupInOneWeek() {
                var result = 0;
                ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                    $.each(item.PlanTPOTPK, function(k, value) {
                        var totalBobotPerGroupInOneDay = parseToFloat(value.bobotPerGroup1()) + parseToFloat(value.bobotPerGroup2())
                            + parseToFloat(value.bobotPerGroup3()) + parseToFloat(value.bobotPerGroup4())
                            + parseToFloat(value.bobotPerGroup5()) + parseToFloat(value.bobotPerGroup6())
                            + parseToFloat(value.bobotPerGroup7());

                        result += totalBobotPerGroupInOneDay;
                    });
                });
                return result;
            };

            //calculate target system and manual
            function setTarget() {
                if (self.gridView.listDataItems().length < 1)
                    return;

                //get total bobot system all group in one week
                var totalBobotSystemAllGroupInOneWeek = getTotalBobotSystemAllGroupInOneWeek();

                //rolling
                var rolling = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                    return item.ProcessGroup().toLowerCase() === SKTIS.Constant.ProcessGroup.ROLLING;
                });

                var totalTargetSystemRolling = 0;

                if (rolling != null) {
                    //calculate target system rolling
                    $.each(rolling.PlanTPOTPK, function(k, value) {
                        var targetSystemMon = getTargetSystemByBobot(value.bobotPerGroup1(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                        //value.TargetSystem1(targetSystemMon);
                        value.TargetManual1(targetSystemMon);

                        var targetSystemTue = getTargetSystemByBobot(value.bobotPerGroup2(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                        // value.TargetSystem2(targetSystemTue);
                        value.TargetManual2(targetSystemTue);

                        var targetSystemWed = getTargetSystemByBobot(value.bobotPerGroup3(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                        // value.TargetSystem3(targetSystemWed);
                        value.TargetManual3(targetSystemWed);

                        var targetSystemThu = getTargetSystemByBobot(value.bobotPerGroup4(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                        // value.TargetSystem4(targetSystemThu);
                        value.TargetManual4(targetSystemThu);

                        var targetSystemFri = getTargetSystemByBobot(value.bobotPerGroup5(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                        // value.TargetSystem5(targetSystemFri);
                        value.TargetManual5(targetSystemFri);

                        var targetSystemSat = getTargetSystemByBobot(value.bobotPerGroup6(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                        // value.TargetSystem6(targetSystemSat);
                        value.TargetManual6(targetSystemSat);

                        var targetSystemSun = getTargetSystemByBobot(value.bobotPerGroup7(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                        // value.TargetSystem7(targetSystemSun);
                        value.TargetManual7(targetSystemSun);
                    });

                    totalTargetSystemRolling = rolling.TargetSystemTotal();
                };

                var processBesidesRolling = ko.utils.arrayFilter(self.gridView.listDataItems(), function(item) {
                    return item.ProcessGroup().toLowerCase() !== SKTIS.Constant.ProcessGroup.ROLLING;
                });

                if (processBesidesRolling.length > 0) {
                    $.each(processBesidesRolling, function(k, item) {
                        $.each(item.PlanTPOTPK, function(k, value) {
                            var targetSystemMon = getTargetSystemByBobot(value.bobotPerGroup1(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                            //value.TargetSystem1(targetSystemMon);
                            value.TargetManual1(targetSystemMon);

                            var targetSystemTue = getTargetSystemByBobot(value.bobotPerGroup2(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                            // value.TargetSystem2(targetSystemTue);
                            value.TargetManual2(targetSystemTue);

                            var targetSystemWed = getTargetSystemByBobot(value.bobotPerGroup3(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                            // value.TargetSystem3(targetSystemWed);
                            value.TargetManual3(targetSystemWed);

                            var targetSystemThu = getTargetSystemByBobot(value.bobotPerGroup4(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                            //value.TargetSystem4(targetSystemThu);
                            value.TargetManual4(targetSystemThu);

                            var targetSystemFri = getTargetSystemByBobot(value.bobotPerGroup5(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                            // value.TargetSystem5(targetSystemFri);
                            value.TargetManual5(targetSystemFri);

                            var targetSystemSat = getTargetSystemByBobot(value.bobotPerGroup6(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                            //value.TargetSystem6(targetSystemSat);
                            value.TargetManual6(targetSystemSat);

                            var targetSystemSun = getTargetSystemByBobot(value.bobotPerGroup7(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                            // value.TargetSystem7(targetSystemSun);
                            value.TargetManual7(targetSystemSun);
                        });
                    });
                };
            };



            function recalculateAllTarget() {
                if (self.gridView.listDataItems().length < 1)
                    return;

                //get total bobot system all group in one week
                var totalBobotSystemAllGroupInOneWeek = getTotalBobotSystemAllGroupInOneWeek();

                //rolling
                var rolling = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                    return item.ProcessGroup().toLowerCase() === SKTIS.Constant.ProcessGroup.ROLLING;
                });

                var totalTargetSystemRolling = 0;

                if (rolling != null) {
                    //calculate target system rolling
                    //$.each(rolling.PlanTPOTPK, function(k, value) {
                    //    var targetSystemMon = getTargetSystemByBobot(value.TargetManual1(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                    //    //value.TargetSystem1(targetSystemMon);
                    //    value.TargetManual1(targetSystemMon);

                    //    var targetSystemTue = getTargetSystemByBobot(value.TargetManual2(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                    //   // value.TargetSystem2(targetSystemTue);
                    //    value.TargetManual2(targetSystemTue);

                    //    var targetSystemWed = getTargetSystemByBobot(value.TargetManual3(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                    //    //value.TargetSystem3(targetSystemWed);
                    //    value.TargetManual3(targetSystemWed);

                    //    var targetSystemThu = getTargetSystemByBobot(value.TargetManual4(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                    //    //value.TargetSystem4(targetSystemThu);
                    //    value.TargetManual4(targetSystemThu);

                    //    var targetSystemFri = getTargetSystemByBobot(value.TargetManual5(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                    //   // value.TargetSystem5(targetSystemFri);
                    //    value.TargetManual5(targetSystemFri);

                    //    var targetSystemSat = getTargetSystemByBobot(value.TargetManual6(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                    //    //value.TargetSystem6(targetSystemSat);
                    //    value.TargetManual6(targetSystemSat);

                    //    var targetSystemSun = getTargetSystemByBobot(value.TargetManual7(), totalBobotSystemAllGroupInOneWeek, self.TargetWPP());
                    //   // value.TargetSystem7(targetSystemSun);
                    //    value.TargetManual7(targetSystemSun);
                    //});

                    // totalTargetSystemRolling = rolling.TargetSystemTotal();
                };

                var processBesidesRolling = ko.utils.arrayFilter(self.gridView.listDataItems(), function(item) {
                    return item.ProcessGroup().toLowerCase() !== SKTIS.Constant.ProcessGroup.ROLLING;
                });

                if (processBesidesRolling.length > 0) {
                    //$.each(processBesidesRolling, function(k, item) {
                    //    $.each(item.PlanTPOTPK, function(k, value) {
                    //        var targetSystemMon = getTargetSystemByBobot(value.TargetManual1(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                    //        //value.TargetSystem1(targetSystemMon);
                    //        value.TargetManual1(targetSystemMon);

                    //        var targetSystemTue = getTargetSystemByBobot(value.TargetManual2(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                    //       // value.TargetSystem2(targetSystemTue);
                    //        value.TargetManual2(targetSystemTue);

                    //        var targetSystemWed = getTargetSystemByBobot(value.TargetManual3(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                    //       // value.TargetSystem3(targetSystemWed);
                    //        value.TargetManual3(targetSystemWed);

                    //        var targetSystemThu = getTargetSystemByBobot(value.TargetManual4(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                    //        //value.TargetSystem4(targetSystemThu);
                    //        value.TargetManual4(targetSystemThu);

                    //        var targetSystemFri = getTargetSystemByBobot(value.TargetManual5(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                    //       // value.TargetSystem5(targetSystemFri);
                    //        value.TargetManual5(targetSystemFri);

                    //        var targetSystemSat = getTargetSystemByBobot(value.TargetManual6(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                    //       // value.TargetSystem6(targetSystemSat);
                    //        value.TargetManual6(targetSystemSat);

                    //        var targetSystemSun = getTargetSystemByBobot(value.TargetManual7(), totalBobotSystemAllGroupInOneWeek, totalTargetSystemRolling);
                    //        //value.TargetSystem7(targetSystemSun);
                    //        value.TargetManual7(targetSystemSun);
                    //    });
                    //});
                };
            };

            //custom mapping knockout
            function planTPOTPK(data) {
                selfModel = this;
                ko.mapping.fromJS(data, {}, selfModel);
            };

            function planTPOTPKChild(data) {

                ko.mapping.fromJS(data, {}, this);

                //data
                var targetsystem1Value = ko.isObservable(data.TargetSystem1) ? data.TargetSystem1() : data.TargetSystem1;
                var targetsystem2Value = ko.isObservable(data.TargetSystem2) ? data.TargetSystem2() : data.TargetSystem2;
                var targetsystem3Value = ko.isObservable(data.TargetSystem3) ? data.TargetSystem3() : data.TargetSystem3;
                var targetsystem4Value = ko.isObservable(data.TargetSystem4) ? data.TargetSystem4() : data.TargetSystem4;
                var targetsystem5Value = ko.isObservable(data.TargetSystem5) ? data.TargetSystem5() : data.TargetSystem5;
                var targetsystem6Value = ko.isObservable(data.TargetSystem6) ? data.TargetSystem6() : data.TargetSystem6;
                var targetsystem7Value = ko.isObservable(data.TargetSystem7) ? data.TargetSystem7() : data.TargetSystem7;

                var targetmanual1Value = ko.isObservable(data.TargetManual1) ? data.TargetManual1() : data.TargetManual1;
                var targetmanual2Value = ko.isObservable(data.TargetManual2) ? data.TargetManual2() : data.TargetManual2;
                var targetmanual3Value = ko.isObservable(data.TargetManual3) ? data.TargetManual3() : data.TargetManual3;
                var targetmanual4Value = ko.isObservable(data.TargetManual4) ? data.TargetManual4() : data.TargetManual4;
                var targetmanual5Value = ko.isObservable(data.TargetManual5) ? data.TargetManual5() : data.TargetManual5;
                var targetmanual6Value = ko.isObservable(data.TargetManual6) ? data.TargetManual6() : data.TargetManual6;
                var targetmanual7Value = ko.isObservable(data.TargetManual7) ? data.TargetManual7() : data.TargetManual7;

                //rounded value
                this.TargetSystem1 = ko.observable(targetsystem1Value).extend({ numeric: 0 });
                this.TargetSystem2 = ko.observable(targetsystem2Value).extend({ numeric: 0 });
                this.TargetSystem3 = ko.observable(targetsystem3Value).extend({ numeric: 0 });
                this.TargetSystem4 = ko.observable(targetsystem4Value).extend({ numeric: 0 });
                this.TargetSystem5 = ko.observable(targetsystem5Value).extend({ numeric: 0 });
                this.TargetSystem6 = ko.observable(targetsystem6Value).extend({ numeric: 0 });
                this.TargetSystem7 = ko.observable(targetsystem7Value).extend({ numeric: 0 });

                this.TargetManual1 = ko.observable(targetmanual1Value).extend({ numeric: 0 });
                this.TargetManual2 = ko.observable(targetmanual2Value).extend({ numeric: 0 });
                this.TargetManual3 = ko.observable(targetmanual3Value).extend({ numeric: 0 });
                this.TargetManual4 = ko.observable(targetmanual4Value).extend({ numeric: 0 });
                this.TargetManual5 = ko.observable(targetmanual5Value).extend({ numeric: 0 });
                this.TargetManual6 = ko.observable(targetmanual6Value).extend({ numeric: 0 });
                this.TargetManual7 = ko.observable(targetmanual7Value).extend({ numeric: 0 });

                this.HistoricalCapacityGroup1 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityGroup1)).extend({ numeric: 3});
                this.HistoricalCapacityGroup2 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityGroup2)).extend({ numeric: 3});
                this.HistoricalCapacityGroup3 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityGroup3)).extend({ numeric: 3});
                this.HistoricalCapacityGroup4 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityGroup4)).extend({ numeric: 3});
                this.HistoricalCapacityGroup5 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityGroup5)).extend({ numeric: 3});
                this.HistoricalCapacityGroup6 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityGroup6)).extend({ numeric: 3});
                this.HistoricalCapacityGroup7 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityGroup7)).extend({ numeric: 3});

                this.HistoricalCapacityWorker1 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityWorker1)).extend({ numeric: 3});
                this.HistoricalCapacityWorker2 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityWorker2)).extend({ numeric: 3});
                this.HistoricalCapacityWorker3 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityWorker3)).extend({ numeric: 3});
                this.HistoricalCapacityWorker4 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityWorker4)).extend({ numeric: 3});
                this.HistoricalCapacityWorker5 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityWorker5)).extend({ numeric: 3});
                this.HistoricalCapacityWorker6 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityWorker6)).extend({ numeric: 3});
                this.HistoricalCapacityWorker7 = ko.observable(ko.utils.unwrapObservable(data.HistoricalCapacityWorker7)).extend({ numeric: 3});

                //calculate historical capacity group
                //this.HistoricalCapacityGroup1 = ko.pureComputed({
                //    read: function() {
                //        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.TotalActualProductionPrev3Weeks(), this.TotalWorkHours1Prev3Weeks(), this.WorkerAlocation())).extend({ numeric: 2 });
                //        return formattedResult();
                //    },
                //    write: function(value) {

                //    }
                //}, this);

                //this.HistoricalCapacityGroup2 = ko.pureComputed({
                //    read: function() {
                //        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.TotalActualProductionPrev3Weeks(), this.TotalWorkHours2Prev3Weeks(), this.WorkerAlocation())).extend({ numeric: 2 });
                //        return formattedResult();
                //    },
                //    write: function(value) {

                //    }
                //}, this);

                //this.HistoricalCapacityGroup3 = ko.pureComputed({
                //    read: function() {
                //        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.TotalActualProductionPrev3Weeks(), this.TotalWorkHours3Prev3Weeks(), this.WorkerAlocation())).extend({ numeric: 2 });
                //        return formattedResult();
                //    },
                //    write: function(value) {

                //    }
                //}, this);

                //this.HistoricalCapacityGroup4 = ko.pureComputed({
                //    read: function() {
                //        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.TotalActualProductionPrev3Weeks(), this.TotalWorkHours4Prev3Weeks(), this.WorkerAlocation())).extend({ numeric: 2 });
                //        return formattedResult();
                //    },
                //    write: function(value) {

                //    }
                //}, this);

                //this.HistoricalCapacityGroup5 = ko.pureComputed({
                //    read: function() {
                //        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.TotalActualProductionPrev3Weeks(), this.TotalWorkHours5Prev3Weeks(), this.WorkerAlocation())).extend({ numeric: 2 });
                //        return formattedResult();
                //    },
                //    write: function(value) {

                //    }
                //}, this);

                //this.HistoricalCapacityGroup6 = ko.pureComputed({
                //    read: function() {
                //        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.TotalActualProductionPrev3Weeks(), this.TotalWorkHours6Prev3Weeks(), this.WorkerAlocation())).extend({ numeric: 2 });
                //        return formattedResult();
                //    },
                //    write: function(value) {

                //    }
                //}, this);

                //this.HistoricalCapacityGroup7 = ko.pureComputed({
                //    read: function() {
                //        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.TotalActualProductionPrev3Weeks(), this.TotalWorkHours7Prev3Weeks(), this.WorkerAlocation())).extend({ numeric: 2 });
                //        return formattedResult();
                //    },
                //    write: function(value) {

                //    }
                //}, this);

                //calculate bobot per group
                this.bobotPerGroup1 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup1()) * parseToFloat(this.PercentAttendance1()) * parseToFloat(this.ProcessWorkHours1());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerGroup2 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup2()) * parseToFloat(this.PercentAttendance2()) * parseToFloat(this.ProcessWorkHours2());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();

                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerGroup3 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup3()) * parseToFloat(this.PercentAttendance3()) * parseToFloat(this.ProcessWorkHours3());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerGroup4 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup4()) * parseToFloat(this.PercentAttendance4()) * parseToFloat(this.ProcessWorkHours4());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerGroup5 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup5()) * parseToFloat(this.PercentAttendance5()) * parseToFloat(this.ProcessWorkHours5());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerGroup6 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup6()) * parseToFloat(this.PercentAttendance6()) * parseToFloat(this.ProcessWorkHours6());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerGroup7 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup7()) * parseToFloat(this.PercentAttendance7()) * parseToFloat(this.ProcessWorkHours7());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                //Allocation
                this.Allocation = ko.computed({
                    read: function() {
                        return this.WorkerAlocation();
                    },
                    write: function(value) {
                        this.WorkerAlocation(parseToFloat(value));
                        //if (value != '') {
                        //    setTarget();
                        //}
                        return value;
                    }
                }, this);

                //target manual
                this.TargetManualMon = ko.computed({
                    read: function() {
                        return this.TargetManual1();
                    },
                    write: function(value) {
                        this.TargetManual1(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualTue = ko.computed({
                    read: function() {
                        return this.TargetManual2();
                    },
                    write: function(value) {
                        this.TargetManual2(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualWed = ko.computed({
                    read: function() {
                        return this.TargetManual3();
                    },
                    write: function(value) {
                        this.TargetManual3(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualThu = ko.computed({
                    read: function() {
                        return this.TargetManual4();
                    },
                    write: function(value) {
                        this.TargetManual4(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualFri = ko.computed({
                    read: function() {
                        return this.TargetManual5();
                    },
                    write: function(value) {
                        this.TargetManual5(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualSat = ko.computed({
                    read: function() {
                        return this.TargetManual6();
                    },
                    write: function(value) {
                        this.TargetManual6(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualSun = ko.computed({
                    read: function() {
                        return this.TargetManual7();
                    },
                    write: function(value) {
                        this.TargetManual7(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TotalTargetSystem = ko.pureComputed({
                    read: function() {
                        return parseToFloat(this.TargetSystem1()) + parseToFloat(this.TargetSystem2())
                            + parseToFloat(this.TargetSystem3()) + parseToFloat(this.TargetSystem4())
                            + parseToFloat(this.TargetSystem5()) + parseToFloat(this.TargetSystem6())
                            + parseToFloat(this.TargetSystem7());
                    },
                    write: function(value) {

                    }
                }, this);

                this.TotalTargetManual = ko.pureComputed({
                    read: function() {
                        return parseToFloat(this.TargetManual1()) + parseToFloat(this.TargetManual2())
                            + parseToFloat(this.TargetManual3()) + parseToFloat(this.TargetManual4())
                            + parseToFloat(this.TargetManual5()) + parseToFloat(this.TargetManual6())
                            + parseToFloat(this.TargetManual7());
                    },
                    write: function(value) {

                    }
                }, this);
            };

            self.gridView.mapping = {
                create: function(options) {
                    var parent = new planTPOTPK(options.data);

                    parent.PlanTPOTPK = ko.utils.arrayMap(parent.PlanTPOTPK() || [], function(item) {
                        return new planTPOTPKChild(item);
                    });

                    parent.TotalRow = ko.pureComputed(function() {
                        var totalRow = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            totalRow += 1;
                        });
                        return totalRow;
                    }).extend({ notify: 'always' });

                    parent.totalTargetSystemBox1 = ko.pureComputed(function() {
                        //var totalRow = 0;
                        //$.each(parent.PlanTPOTPK, function(k, v) {
                        //    totalRow += 1;
                        //});
                        //console.log(10000)
                        return 10000;
                    }).extend({ notify: 'always' });

                    parent.SubTotalWorkerRegister = ko.pureComputed(function() {
                        var subTotal = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotal += parseToFloat(v.WorkerRegister());
                        });
                        return subTotal;
                    }).extend({ notify: 'always' });

                    parent.SubTotalWorkerAvailable = ko.pureComputed(function() {
                        var subTotal = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotal += parseToFloat(v.WorkerAvailable());
                        });
                        return subTotal;
                    }).extend({ notify: 'always' });

                    parent.SubTotal = ko.pureComputed(function() {
                        var subTotal = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotal += parseToFloat(v.WorkerAlocation());
                        });
                        return subTotal;
                    }).extend({ notify: 'always' });

                    parent.SubTotalSytem1 = ko.pureComputed(function() {
                        var subTotalSytem1 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalSytem1 += parseToFloat(v.TargetSystem1());
                        });
                        return subTotalSytem1;
                    }).extend({ notify: 'always' });

                    parent.SubTotalManual1 = ko.pureComputed(function() {
                        var subTotalManual1 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalManual1 += parseToFloat(v.TargetManual1());
                        });
                        return subTotalManual1;
                    }).extend({ notify: 'always' });

                    parent.SubTotalSytem2 = ko.pureComputed(function() {
                        var subTotalSytem2 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalSytem2 += parseToFloat(v.TargetSystem2());
                        });
                        return subTotalSytem2;
                    }).extend({ notify: 'always' });

                    parent.SubTotalManual2 = ko.pureComputed(function() {
                        var subTotalManual2 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalManual2 += parseToFloat(v.TargetManual2());
                        });
                        return subTotalManual2;
                    }).extend({ notify: 'always' });

                    parent.SubTotalSytem3 = ko.pureComputed(function() {
                        var subTotalSytem3 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalSytem3 += parseToFloat(v.TargetSystem3());
                        });
                        return subTotalSytem3;
                    }).extend({ notify: 'always' });

                    parent.SubTotalManual3 = ko.pureComputed(function() {
                        var subTotalManual3 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalManual3 += parseToFloat(v.TargetManual3());
                        });
                        return subTotalManual3;
                    }).extend({ notify: 'always' });

                    parent.SubTotalSytem4 = ko.pureComputed(function() {
                        var subTotalSytem4 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalSytem4 += parseToFloat(v.TargetSystem4());
                        });
                        return subTotalSytem4;
                    }).extend({ notify: 'always' });

                    parent.SubTotalManual4 = ko.pureComputed(function() {
                        var subTotalManual4 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalManual4 += parseToFloat(v.TargetManual4());
                        });
                        return subTotalManual4;
                    }).extend({ notify: 'always' });

                    parent.SubTotalSytem5 = ko.pureComputed(function() {
                        var subTotalSytem5 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalSytem5 += parseToFloat(v.TargetSystem5());
                        });
                        return subTotalSytem5;
                    }).extend({ notify: 'always' });

                    parent.SubTotalManual5 = ko.pureComputed(function() {
                        var subTotalManual5 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalManual5 += parseToFloat(v.TargetManual5());
                        });
                        return subTotalManual5;
                    }).extend({ notify: 'always' });

                    parent.SubTotalSytem6 = ko.pureComputed(function() {
                        var subTotalSytem6 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalSytem6 += parseToFloat(v.TargetSystem6());
                        });
                        return subTotalSytem6;
                    }).extend({ notify: 'always' });

                    parent.SubTotalManual6 = ko.pureComputed(function() {
                        var subTotalManual6 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalManual6 += parseToFloat(v.TargetManual6());
                        });
                        return subTotalManual6;
                    }).extend({ notify: 'always' });

                    parent.SubTotalSytem7 = ko.pureComputed(function() {
                        var subTotalSytem7 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalSytem7 += parseToFloat(v.TargetSystem7());
                        });
                        return subTotalSytem7;
                    }).extend({ notify: 'always' });

                    parent.SubTotalManual7 = ko.pureComputed(function() {
                        var subTotalManual7 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalManual7 += parseToFloat(v.TargetManual7());
                        });
                        return subTotalManual7;
                    }).extend({ notify: 'always' });

                    // Target Total
                    parent.TargetSystemTotal = ko.pureComputed(function() {
                        var targetSystemTotal = 0;
                        targetSystemTotal += parent.SubTotalSytem1();
                        targetSystemTotal += parent.SubTotalSytem2();
                        targetSystemTotal += parent.SubTotalSytem3();
                        targetSystemTotal += parent.SubTotalSytem4();
                        targetSystemTotal += parent.SubTotalSytem5();
                        targetSystemTotal += parent.SubTotalSytem6();
                        targetSystemTotal += parent.SubTotalSytem7();
                        return targetSystemTotal;
                    });

                    parent.TargetManualTotal = ko.pureComputed(function() {
                        var targetManualTotal = 0;
                        targetManualTotal += parent.SubTotalManual1();
                        targetManualTotal += parent.SubTotalManual2();
                        targetManualTotal += parent.SubTotalManual3();
                        targetManualTotal += parent.SubTotalManual4();
                        targetManualTotal += parent.SubTotalManual5();
                        targetManualTotal += parent.SubTotalManual6();
                        targetManualTotal += parent.SubTotalManual7();
                        return targetManualTotal;
                    });

                    //attendance percentage
                    parent.SubTotalPercentageAttendance1 = ko.pureComputed(function() {
                        var subTotalPercentAttendance1 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalPercentAttendance1 += parseToFloat(v.PercentAttendance1());
                        });
                        return subTotalPercentAttendance1;
                    }).extend({ notify: 'always' });

                    parent.SubTotalPercentageAttendance2 = ko.pureComputed(function() {
                        var subTotalPercentAttendance2 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalPercentAttendance2 += parseToFloat(v.PercentAttendance2());
                        });
                        return subTotalPercentAttendance2;
                    }).extend({ notify: 'always' });

                    parent.SubTotalPercentageAttendance3 = ko.pureComputed(function() {
                        var subTotalPercentAttendance3 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalPercentAttendance3 += parseToFloat(v.PercentAttendance3());
                        });
                        return subTotalPercentAttendance3;
                    }).extend({ notify: 'always' });

                    parent.SubTotalPercentageAttendance4 = ko.pureComputed(function() {
                        var subTotalPercentAttendance4 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalPercentAttendance4 += parseToFloat(v.PercentAttendance4());
                        });
                        return subTotalPercentAttendance4;
                    }).extend({ notify: 'always' });

                    parent.SubTotalPercentageAttendance5 = ko.pureComputed(function() {
                        var subTotalPercentAttendance5 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalPercentAttendance5 += parseToFloat(v.PercentAttendance5());
                        });
                        return subTotalPercentAttendance5;
                    }).extend({ notify: 'always' });

                    parent.SubTotalPercentageAttendance6 = ko.pureComputed(function() {
                        var subTotalPercentAttendance6 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalPercentAttendance6 += parseToFloat(v.PercentAttendance6());
                        });
                        return subTotalPercentAttendance6;
                    }).extend({ notify: 'always' });

                    parent.SubTotalPercentageAttendance7 = ko.pureComputed(function() {
                        var subTotalPercentAttendance7 = 0;
                        $.each(parent.PlanTPOTPK, function(k, v) {
                            subTotalPercentAttendance7 += parseToFloat(v.PercentAttendance7());
                        });
                        return subTotalPercentAttendance7;
                    }).extend({ notify: 'always' });
                    return parent;
                }
            };

            //get production date header
            function getProductionDate(days) {
                return ko.computed(function() {
                    //console.log(self.mondayDate());
                    if (self.mondayDate() != null) {
                        var firstDay = moment(self.mondayDate(), "DD/MM/YYYY");

                        self.DisableDays(firstDay,days);

                        return moment(firstDay).add(days, 'days').format("DD/MM/YYYY");
                    }
                    return '';
                });
            };

            // Computed production date on header
            self.getProductionStartDate = function() {
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/GetProductionStartDate"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { year: self.filterKPSYear(), week: self.filterKPSWeek(), brandCode: self.filterBrandCode, locationCode: self.filterLocationCode },
                    dataType: 'json',
                    success: function(data) {
                        self.mondayDate(data.startDate);
                        self.alreadySubmit(data.alreadySubmit);
                        self.EditedAllocation(!data.alreadySubmit);
                        self.mondayEditable(!data.alreadySubmit);
                        self.tuesdayEditable(!data.alreadySubmit);
                        self.wednesdayEditable(!data.alreadySubmit);
                        self.thursdayEditable(!data.alreadySubmit);
                        self.fridayEditable(!data.alreadySubmit);
                        self.saturdayEditable(!data.alreadySubmit);
                        self.sundayEditable(!data.alreadySubmit);

                        if(data.alreadySubmit){

                            //var submitDate = moment(data.startEnableDate, "DD/MM/YYYY");
                            //var EditableDate = submitDate.diff(moment(data.startDate, "DD/MM/YYYY")) > 0 ? false : true;
                            //self.EditedAllocation(!data.alreadySubmit);
                            //self.mondayEditable(EditableDate);
                            //self.startEnableDate(data.startEnableDate);
                            //self.tuesdayDate = getProductionDate(1);
                            //self.wednesdayDate = getProductionDate(2);
                            //self.thursdayDate = getProductionDate(3);
                            //self.fridayDate = getProductionDate(4);
                            //self.saturdayDate = getProductionDate(5);
                            //self.sundayDate = getProductionDate(6);
                            //console.log('mondayEditable = '+self.mondayEditable());
                            //var CurrentDateWeekDay = moment(Date.now(), "DD/MM/YYYY").weekday();
                            //switch(CurrentDateWeekDay)
                            //console.log(currentDate.getYear()+''+currentDate.getMonth(),currentDate.getDay())
                            var currentWeek = week(year,month,day);
                            //console.log(self.filterKPSWeek() +' / '+currentWeek)
                            if(self.filterKPSWeek() < currentWeek){
                                self.mondayEditable(false);
                                self.tuesdayEditable(false);
                                self.wednesdayEditable(false);
                                self.thursdayEditable(false);
                                self.fridayEditable(false);
                                self.saturdayEditable(false);
                                self.sundayEditable(false);
                            }else{
                                switch(currentDate.getDay())
                                {
                                    case 0:
                                        self.mondayEditable(false);
                                        self.tuesdayEditable(false);
                                        self.wednesdayEditable(false);
                                        self.thursdayEditable(false);
                                        self.fridayEditable(false);
                                        self.saturdayEditable(false);
                                        self.sundayEditable(false);
                                        break;
                                    case 1:
                                        self.mondayEditable(true);
                                        self.tuesdayEditable(true);
                                        self.wednesdayEditable(true);
                                        self.thursdayEditable(true);
                                        self.fridayEditable(true);
                                        self.saturdayEditable(true);
                                        self.sundayEditable(true);
                                        break;
                                    case 2:
                                        self.mondayEditable(false);
                                        self.tuesdayEditable(true);
                                        self.wednesdayEditable(true);
                                        self.thursdayEditable(true);
                                        self.fridayEditable(true);
                                        self.saturdayEditable(true);
                                        self.sundayEditable(true);
                                        break;
                                    case 3:
                                        self.mondayEditable(false);
                                        self.tuesdayEditable(false);
                                        self.wednesdayEditable(true);
                                        self.thursdayEditable(true);
                                        self.fridayEditable(true);
                                        self.saturdayEditable(true);
                                        self.sundayEditable(true);
                                        break;
                                    case 4:
                                        self.mondayEditable(false);
                                        self.tuesdayEditable(false);
                                        self.wednesdayEditable(false);
                                        self.thursdayEditable(true);
                                        self.fridayEditable(true);
                                        self.saturdayEditable(true);
                                        self.sundayEditable(true);
                                        break;
                                    case 5:
                                        self.mondayEditable(false);
                                        self.tuesdayEditable(false);
                                        self.wednesdayEditable(false);
                                        self.thursdayEditable(false);
                                        self.fridayEditable(true);
                                        self.saturdayEditable(true);
                                        self.sundayEditable(true);
                                        break;
                                    case 6:
                                        self.mondayEditable(false);
                                        self.tuesdayEditable(false);
                                        self.wednesdayEditable(false);
                                        self.thursdayEditable(false);
                                        self.fridayEditable(false);
                                        self.saturdayEditable(true);
                                        self.sundayEditable(true);
                                        break;
                                }
                            }


                        }
                    }
                });
            };

            self.mondayDate = ko.observable();
            self.startEnableDate = ko.observable();
            self.alreadySubmit = ko.observable();
            self.tuesdayDate = getProductionDate(1);
            self.wednesdayDate = getProductionDate(2);
            self.thursdayDate = getProductionDate(3);
            self.fridayDate = getProductionDate(4);
            self.saturdayDate = getProductionDate(5);
            self.sundayDate = getProductionDate(6);

            // Computed Days Disabled
            self.mondayEditable = ko.observable(false);
            self.tuesdayEditable = ko.observable(false);
            self.wednesdayEditable = ko.observable(false);
            self.thursdayEditable = ko.observable(false);
            self.fridayEditable = ko.observable(false);
            self.saturdayEditable = ko.observable(false);
            self.sundayEditable = ko.observable(false);

            self.DisableDays = function(firstDay,days){
                var today = moment(self.startEnableDate(),"DD/MM/YYYY"); // Force for date only, extend 1 day for minimal editable day
                var productionDate = moment(firstDay).add(days, 'days');
                var EditableDate = today.diff(productionDate) > 0 ? false : true;

                if(self.filterCurrenDayEnabled() && self.isFilterCurrentDayForward())
                    self.onCurrentDayForwardChange(self.isFilterCurrentDayForward);
                else if(!self.alreadySubmit()){
                    EditableDate = true;
                }
                // Check for Disable Day
                // No checking condition for monday, because the minimal locked date is : current day + 1 day
                //console.log('days = '+days)
                //switch(days){
                //    case 1:
                //        // tuesday
                //        self.tuesdayEditable(EditableDate);
                //        break;
                //    case 2:
                //        // wednesday
                //        self.wednesdayEditable(EditableDate);
                //        break;
                //    case 3:
                //        // thursday
                //        self.thursdayEditable(EditableDate);
                //        break;
                //    case 4:
                //        // friday
                //        self.fridayEditable(EditableDate);
                //        break;
                //    case 5:
                //        // saturday
                //        self.saturdayEditable(EditableDate);
                //        break;
                //    case 6:
                //        // sunday
                //        self.sundayEditable(EditableDate);
                //        break;
                //}
                //console.log(self.fridayEditable());
                // End of Check
            }

            // get workhours
            self.workHoursMon = getLargestStandardHour('JKProcess1');
            self.workHoursTue = getLargestStandardHour('JKProcess2');
            self.workHoursWed = getLargestStandardHour('JKProcess3');
            self.workHoursThu = getLargestStandardHour('JKProcess4');
            self.workHoursFri = getLargestStandardHour('JKProcess5');
            self.workHoursSat = getLargestStandardHour('JKProcess6');
            self.workHoursSun = getLargestStandardHour('JKProcess7');

            self.totalWorkHours = ko.computed(function() {
                var result =
                    parseFloat(self.HeaderProcessWorkHours1.Value()) +
                    parseFloat(self.HeaderProcessWorkHours2.Value()) +
                    parseFloat(self.HeaderProcessWorkHours3.Value()) +
                    parseFloat(self.HeaderProcessWorkHours4.Value()) +
                    parseFloat(self.HeaderProcessWorkHours5.Value()) +
                    parseFloat(self.HeaderProcessWorkHours6.Value()) +
                    parseFloat(self.HeaderProcessWorkHours7.Value());

                return parseFloat(result);
            });

            self.getWorkHours = function(cb) {
                if (self.gridView.listDataItems().length > 0) {
                    var firstProcessGroup = self.gridView.listDataItems()[0];
                    var firstTpk = firstProcessGroup.PlanTPOTPK[0];
                    if (firstTpk != null) {
                        self.workHoursMon(firstTpk.ProcessWorkHours1());
                        self.workHoursTue(firstTpk.ProcessWorkHours2());
                        self.workHoursWed(firstTpk.ProcessWorkHours3());
                        self.workHoursThu(firstTpk.ProcessWorkHours4());
                        self.workHoursFri(firstTpk.ProcessWorkHours5());
                        self.workHoursSat(firstTpk.ProcessWorkHours6());
                        self.workHoursSun(firstTpk.ProcessWorkHours7());
                        //self.totalWorkHours(firstTpk.TotalWorkhours());
                    }
                }
            };

            self.calculateWorkHoursChange = function() {
                $.each(self.gridView.listDataItems(), function(k, value) {
                    value.JKProcess1(self.workHoursMon());
                    value.JKProcess2(self.workHoursTue());
                    value.JKProcess3(self.workHoursWed());
                    value.JKProcess4(self.workHoursThu());
                    value.JKProcess5(self.workHoursFri());
                    value.JKProcess6(self.workHoursSat());
                    value.JKProcess7(self.workHoursSun());
                });
                self.saveJKProcess();
            };

            function getLargestStandardHour(fieldName) {
                return ko.computed({
                    read: function() {
                        var result = 0;
                        if (self.gridView.listDataItems().length > 0) {
                            result = Math.max.apply(Math, self.gridView.listDataItems().map(function(item) {
                                return ko.isObservable(item[fieldName]) ? item[fieldName]() : item[fieldName];
                            }));
                            result = result < 0 ? 0 : result;
                        }
                        return result;
                    },
                    write: function(value) {
                        // This piece of code is the cause of this bug http://tp.voxteneo.co.id/entity/2952
                        //ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                        //    item[fieldName](value);
                        //});

                        //self.saveJKProcess();
                    }
                });
            };

            //get brand group code by location
            self.getBrandCodeList = function(cb) {
                return $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/GetBrandCodeByLocationYearWeek"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: {
                        locationCode: self.filterLocationCode(),
                        KPSYear: self.filterKPSYear,
                        KPSWeek: self.filterKPSWeek
                    },
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlFilterBrandCode').find('option').remove();
                        $('#ddlFilterBrandCode').selectpicker('refresh');
                        var brandCodeModel = [];
                        $.each(data, function(index, value) {
                            brandCodeModel.push({ "Text": value, "Value": value });
                        });
                        if (brandCodeModel.length >= 2) {
                            self.ButtonSelectGroup(true);
                        } else {
                            self.ButtonSelectGroup(false);
                        }
                        self.BrandCodeSelectList(brandCodeModel);
                        if(self.brandFromUrl)
                        {
                            self.filterBrandCode("@Model.DefaultBrandCode");
                            self.brandFromUrl= false;
                        } else{
                            self.filterBrandCode(self.BrandCodeSelectList()[0]);
                        }

                    },complete: function() {
                        if (typeof cb != 'undefined') cb();
                    }
                });
            };

            self.onKPSYearChange = function() {
                if (self.firstLoad || self.isLoading() || !self.KPSWeekReady()) return;

                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.getBrandCodeList(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
            }

            self.onKPSWeekChange = function()
            {
                if (self.firstLoad || self.isLoading() || !self.KPSWeekReady()) return;

                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.getBrandCodeList(cb);
                    },
                    function(cb) {
                        cektransactionLog();
                        cb();
                    },
                    function(cb) {
                        self.setDateRange(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
            }

            self.getKpsWeek = function(cb){
                if (self.firstLoad || self.isLoading()) return;
                self.isLoading(true);
                async.series([
                    function(cb) {
                        self.getKPSWeekList(cb);
                    },
                    function(cb) {
                        self.setDateRange(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
            }

            //get kpsweek by year
            self.getKPSWeekList = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/GetKPSWeek"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { year: self.filterKPSYear() },
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlKPSWeekFilter').find('option').remove();
                        $('#ddlKPSWeekFilter').selectpicker('refresh');
                        var kpsWeekModel = [];
                        $.each(data, function(index, value) {
                            kpsWeekModel.push({ "Text": value, "Value": value });
                        });
                        self.KPSWeekSelectList(kpsWeekModel);
                        self.filterKPSWeek(@Model.DefaultWeek);
                        self.KPSWeekReady(true);
                        //self.getTPKList();
                        //self.setDateRange(cb);
                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
            };

            self.getTargetWPP = function() {
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/GetTargetWPP"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { locationCode: self.filterLocationCode(), brandCode: self.filterBrandCode(), year: self.filterKPSYear(), week: self.filterKPSWeek() },
                    dataType: 'json',
                    success: function(data) {
                        //console.log(typeof data);
                        self.TargetWPP(data);
                        //console.log(self.TargetWPP());
                    }
                });
            };

            //get Stick PerBox By Brand COde
            self.getStickPerBox = function() {
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/GetStickPerBox"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { brandCode: self.filterBrandCode() },
                    dataType: 'json',
                    success: function(data) {
                        self.StickPerBox(data);
                    }
                });
            };

            self.getWorkHourHeaders = function() {
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/GetWorkHourHeaders"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { locationCode: self.filterLocationCode(), brandCode: self.filterBrandCode(), year: self.filterKPSYear(), week: self.filterKPSWeek() },
                    dataType: 'json',
                    success: function(data) {
                        self.HeaderProcessWorkHours1.Value(data.ProcessWorkHours1);
                        self.HeaderProcessWorkHours2.Value(data.ProcessWorkHours2);
                        self.HeaderProcessWorkHours3.Value(data.ProcessWorkHours3);
                        self.HeaderProcessWorkHours4.Value(data.ProcessWorkHours4);
                        self.HeaderProcessWorkHours5.Value(data.ProcessWorkHours5);
                        self.HeaderProcessWorkHours6.Value(data.ProcessWorkHours6);
                        self.HeaderProcessWorkHours7.Value(data.ProcessWorkHours7);
                    }
                });
            };

            // Save Action
            self.saveData = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                //if (self.gridView.listEditItems().length < 1)
                //    return;

                //if (self.targetWPP() < self.totalTargetManual()) {
                //    SKTIS.Helper.Notification('Total target manual (' + self.totalTargetManual() + ') cannot be larger than target wpp (' + self.targetWPP() + ')!', 'warning');
                //    return;
                //}

                // Prevent Edited new Row data for triggering Edited message
                // Primary Key : ListGroup, ListDetail (need to compare both of arrays using unique key[s])
                //var newItemLength = self.gridView.listNewItems().length;
                //$.each(self.gridView.listNewItems(),function(k,v){
                //    var shouldBeAsNew = ko.utils.arrayFirst(self.gridView.listEditItems(),function(editItem){
                //        if(editItem){
                //            return editItem['ItemCode'] == v['ItemCode'];
                //        }
                //    });
                //    if(shouldBeAsNew){
                //        self.gridView.listNewItems()[k] = shouldBeAsNew;
                //    }
                //    self.gridView.listEditItems.remove(function(data) {
                //        if(data){
                //            return data['ItemCode'] == v['ItemCode'];
                //        }
                //    });
                //});

                self.ButtonCalculate(false);

                var datas = {"Parameters": {
                    "LocationCode": self.filterLocationCode(),
                    'BrandCode': self.filterBrandCode(),
                    'KPSYear': self.filterKPSYear(),
                    'KPSWeek': self.filterKPSWeek(),
                    "HeaderProcessWorkHour1": parseFloat(self.HeaderProcessWorkHours1.Value()),
                    "HeaderProcessWorkHour2": parseFloat(self.HeaderProcessWorkHours2.Value()),
                    "HeaderProcessWorkHour3": parseFloat(self.HeaderProcessWorkHours3.Value()),
                    "HeaderProcessWorkHour4": parseFloat(self.HeaderProcessWorkHours4.Value()),
                    "HeaderProcessWorkHour5": parseFloat(self.HeaderProcessWorkHours5.Value()),
                    "HeaderProcessWorkHour6": parseFloat(self.HeaderProcessWorkHours6.Value()),
                    "HeaderProcessWorkHour7": parseFloat(self.HeaderProcessWorkHours7.Value())
                },
                    "edit": ko.mapping.toJS(self.gridView.listDataItems()),
                    "total": ko.mapping.toJS(self.gridView.CustomResults())
                };

                datas = JSON.stringify(datas);

                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/SaveAllTPOTPKs"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        if (data.Edit) {
                            $.each(data.Edit, function(k, value) {
                                if (value)
                                    SKTIS.Helper.ResponseNotification(value, "Save TPK",
                                        value.ProcessGroup);
                            });
                        }

                        self.gridView.search();
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();

                        self.EditedAllocation(false);
                        self.EditedWIPStock(false);
                        self.EditedJkp(false);
                        self.ButtonSave(false);
                    }
                });
            };

            self.CalculateData = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                self.gridView.CustomResults()[1].TargetManual1(parseToFloat(self.gridView.CustomResults()[1].TargetManual1()));
                self.gridView.CustomResults()[1].TargetManual2(parseToFloat(self.gridView.CustomResults()[1].TargetManual2()));
                self.gridView.CustomResults()[1].TargetManual3(parseToFloat(self.gridView.CustomResults()[1].TargetManual3()));
                self.gridView.CustomResults()[1].TargetManual4(parseToFloat(self.gridView.CustomResults()[1].TargetManual4()));
                self.gridView.CustomResults()[1].TargetManual5(parseToFloat(self.gridView.CustomResults()[1].TargetManual5()));
                self.gridView.CustomResults()[1].TargetManual6(parseToFloat(self.gridView.CustomResults()[1].TargetManual6()));
                self.gridView.CustomResults()[1].TargetManual7(parseToFloat(self.gridView.CustomResults()[1].TargetManual7()));

                var datas = {"Parameters": {
                    "LocationCode": self.filterLocationCode(),
                    'BrandCode': self.filterBrandCode(),
                    'KPSYear': self.filterKPSYear(),
                    'KPSWeek': self.filterKPSWeek(),
                    'IsFilterCurrentDayForward': self.isFilterCurrentDayForward(),
                    'IsWhChanged': self.EditedJkp(),
                    'FilterCurrentDayForward': self.filterCurrentDayForward(),
                    "HeaderProcessWorkHour1": self.HeaderProcessWorkHours1.Value(),
                    "HeaderProcessWorkHour2": self.HeaderProcessWorkHours2.Value(),
                    "HeaderProcessWorkHour3": self.HeaderProcessWorkHours3.Value(),
                    "HeaderProcessWorkHour4": self.HeaderProcessWorkHours4.Value(),
                    "HeaderProcessWorkHour5": self.HeaderProcessWorkHours5.Value(),
                    "HeaderProcessWorkHour6": self.HeaderProcessWorkHours6.Value(),
                    "HeaderProcessWorkHour7": self.HeaderProcessWorkHours7.Value()
                },
                    "edit": ko.mapping.toJS(self.gridView.listDataItems()),
                    "total": ko.mapping.toJS(self.gridView.CustomResults()),
                    'ExpelledGroup': self.expelledGroup()
                };
                datas = JSON.stringify(datas);

                var status = true;
                $.each(self.gridView.listDataItems(), function(i,val) {
                    $.each(val.PlanTPOTPK, function(j,value){
                        if(value.Allocation() > value.WorkerAvailable()) {
                            // Remove condition on http://tp.voxteneo.co.id/entity/13065
                            //status = false;
                        }
                    });
                });

                if(status == true) {
                    $.ajax({
                        url: @Html.BaseUrl("PlanningTPOTPK/CalculateTPOTPK"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {
                            self.ButtonCalculate(false);
                            var convertObjectToObervable = [];
                            $.each(data.Results, function (k, v) {
                                var obj = ko.mapping.fromJS(v, self.gridView.mapping);
                                convertObjectToObervable.push(obj);
                            });

                            self.gridView.listDataItems(convertObjectToObervable);

                            var customResultObj = [];
                            $.each(data.CustomResults, function (k, v) {
                                var obj = ko.mapping.fromJS(v);
                                customResultObj.push(obj);
                            });
                            self.gridView.CustomResults(customResultObj);
                            self.EditedAllocation(false);
                            self.EditedWIPStock(false);
                            self.EditedJkp(false);
                            self.ButtonSave(true);
                        },
                        error: function(xhr,status,error){
                            //console.log(xhr,status,error);
                        }
                    });
                }else{
                    SKTIS.Helper.Notification("Allocation cannot bigger than available");
                    self.search();
                }

            };

            function getWIPDeviation(prevValue, currentValue) {
                return currentValue - prevValue;
            };

            function getBobotSystem(capacityGroup, percentAttendance, jkProcess) {
                return capacityGroup * percentAttendance * jkProcess;
            };

            function getBobotManual(targetManual, allocation, jkProcess) {
                return targetManual * allocation * jkProcess;
            };

            function recalculateWIP(i, targetManual, wipDeviation, totalPergroup, selisihwip) {
                //OLD One
                //recalculateWIP(capacityGroup, percentAttendance, jkProcess, wipDeviation)
                //var bobot = getBobotSystem(capacityGroup, percentAttendance, jkProcess);
                //var result = bobot * wipDeviation;
                var result = 0;
                if(totalPergroup > 0) {
                    result = (targetManual/totalPergroup * wipDeviation);
                    if(i == 1 && typeof selisihwip != 'undefined') {
                        result = result + (wipDeviation - selisihwip);
                    }

                }

                return Math.round(result);
            };

            function recalculateTargetOnWIPChange(target, subTotalTarget, wipDeviation) {
                //Old One
                //var result = (target * (subTotalTarget + wipDeviation)) / subTotalTarget;
                var result = target + wipDeviation;
                return parseToFloat(result);
            };

            //wip stock
            self.tempWIPStocks = [];

            $('#WipStock').on('shown.bs.modal', function() {
                if (self.gridView.listDataItems().length < 1)
                    return;

                self.tempWIPStocks = [];

                $.each(self.gridView.listDataItems(), function(k, value) {
                    if (value.ShowInWIPStock()) {
                        self.tempWIPStocks.push({
                            "ProcessGroup": value.ProcessGroup().toLowerCase(),
                            "WIPStock1": value.WIPStock1(),
                            "WIPStock2": value.WIPStock2(),
                            "WIPStock3": value.WIPStock3(),
                            "WIPStock4": value.WIPStock4(),
                            "WIPStock5": value.WIPStock5(),
                            "WIPStock6": value.WIPStock6(),
                            "WIPStock7": value.WIPStock7()
                        });
                    };
                });
            });

            self.WIPDataCleansing = function(){
                // WIP data cleansing
                $.each(self.gridView.listDataItems(), function(k, value) {
                    var clean1 = self.gridView.listDataItems()[k].WIPStock1();
                    clean1 = clean1 === "" || clean1 === null ? "0" : clean1;
                    if(typeof clean1 === 'string')
                        self.gridView.listDataItems()[k].WIPStock1(parseInt(clean1.replace(/\.|\,/g, "")));

                    var clean2 = self.gridView.listDataItems()[k].WIPStock2();
                    clean2 = clean2 === "" || clean2 === null ? "0" : clean2;
                    if(typeof clean2 === 'string')
                        self.gridView.listDataItems()[k].WIPStock2(parseInt(clean2.replace(/\.|\,/g, "")));

                    var clean3 = self.gridView.listDataItems()[k].WIPStock3();
                    clean3 = clean3 === "" || clean3 === null ? "0" : clean3;
                    if(typeof clean3 === 'string')
                        self.gridView.listDataItems()[k].WIPStock3(parseInt(clean3.replace(/\.|\,/g, "")));

                    var clean4 = self.gridView.listDataItems()[k].WIPStock4();
                    clean4 = clean4 === "" || clean4 === null ? "0" : clean4;
                    if(typeof clean4 === 'string')
                        self.gridView.listDataItems()[k].WIPStock4(parseInt(clean4.replace(/\.|\,/g, "")));

                    var clean5 = self.gridView.listDataItems()[k].WIPStock5();
                    clean5 = clean5 === "" || clean5 === null ? "0" : clean5;
                    if(typeof clean5 === 'string')
                        self.gridView.listDataItems()[k].WIPStock5(parseInt(clean5.replace(/\.|\,/g, "")));

                    var clean6 = self.gridView.listDataItems()[k].WIPStock6();
                    clean6 = clean6 === "" || clean6 === null ? "0" : clean6;
                    if(typeof clean6 === 'string')
                        self.gridView.listDataItems()[k].WIPStock6(parseInt(clean6.replace(/\.|\,/g, "")));

                    var clean7 = self.gridView.listDataItems()[k].WIPStock7();
                    clean7 = clean7 === "" || clean7 === null ? "0" : clean7;
                    if(typeof clean7 === 'string')
                        self.gridView.listDataItems()[k].WIPStock7(parseInt(clean7.replace(/\.|\,/g, "")));
                });
            }

            self.saveWIPStock = function() {
                self.WIPDataCleansing();
                var datas = {"Parameters": {
                    "LocationCode": self.filterLocationCode(),
                    'BrandCode': self.filterBrandCode(),
                    'KPSYear': self.filterKPSYear(),
                    'KPSWeek': self.filterKPSWeek(),
                    "HeaderProcessWorkHour1": self.HeaderProcessWorkHours1.Value(),
                    "HeaderProcessWorkHour2": self.HeaderProcessWorkHours2.Value(),
                    "HeaderProcessWorkHour3": self.HeaderProcessWorkHours3.Value(),
                    "HeaderProcessWorkHour4": self.HeaderProcessWorkHours4.Value(),
                    "HeaderProcessWorkHour5": self.HeaderProcessWorkHours5.Value(),
                    "HeaderProcessWorkHour6": self.HeaderProcessWorkHours6.Value(),
                    "HeaderProcessWorkHour7": self.HeaderProcessWorkHours7.Value()
                },
                    "edit": ko.mapping.toJS(self.gridView.listDataItems()),
                    "total": ko.mapping.toJS(self.gridView.CustomResults())
                };

                datas = JSON.stringify(datas);

                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/SaveAllTPOTPKs"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        if (data.Edit) {
                            SKTIS.Helper.ResponseNotification("Success", "Save and Calculate","WIP");
                            self.CalculateData();
                        }

                    }
                });

                //Jadi nya ga dipake mann ....
                //console.log(self.gridView.listDataItems());
                //if (self.gridView.listDataItems().length < 1)
                //    return;

                //var selisihWIPPackingMon = 0;
                //var selisihWIPPackingTue = 0;
                //var selisihWIPPackingWed = 0;
                //var selisihWIPPackingThu = 0;
                //var selisihWIPPackingFri = 0;
                //var selisihWIPPackingSat = 0;
                //var selisihWIPPackingSun = 0;

                //var selisihWIPStickWrappingMon = 0;
                //var selisihWIPStickWrappingTue = 0;
                //var selisihWIPStickWrappingWed = 0;
                //var selisihWIPStickWrappingThu = 0;
                //var selisihWIPStickWrappingFri = 0;
                //var selisihWIPStickWrappingSat = 0;
                //var selisihWIPStickWrappingSun = 0;

                //var selisihWIPCuttingMon = 0;
                //var selisihWIPCuttingTue = 0;
                //var selisihWIPCuttingWed = 0;
                //var selisihWIPCuttingThu = 0;
                //var selisihWIPCuttingFri = 0;
                //var selisihWIPCuttingSat = 0;
                //var selisihWIPCuttingSun = 0;

                ////calculate packing
                //var packing = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                //    return item.ProcessGroup().toLowerCase() === 'packing';
                //});

                //if (packing != null) {
                //    //get selisih wip
                //    selisihWIPPackingMon = getWIPDeviation(packing.WIPPreviousValue(), packing.WIPStock1());
                //    selisihWIPPackingTue = getWIPDeviation(packing.WIPStock1(), packing.WIPStock2());
                //    selisihWIPPackingWed = getWIPDeviation(packing.WIPStock2(), packing.WIPStock3());
                //    selisihWIPPackingThu = getWIPDeviation(packing.WIPStock3(), packing.WIPStock4());
                //    selisihWIPPackingFri = getWIPDeviation(packing.WIPStock4(), packing.WIPStock5());
                //    selisihWIPPackingSat = getWIPDeviation(packing.WIPStock5(), packing.WIPStock6());
                //    selisihWIPPackingSun = getWIPDeviation(packing.WIPStock6(), packing.WIPStock7());

                //    //calculate
                //    var i = 1;
                //    var SubTotalManual1 = packing.SubTotalManual1();
                //    var SubTotalManual2 = packing.SubTotalManual2();
                //    var SubTotalManual3 = packing.SubTotalManual3();
                //    var SubTotalManual4 = packing.SubTotalManual4();
                //    var SubTotalManual5 = packing.SubTotalManual5();
                //    var SubTotalManual6 = packing.SubTotalManual6();
                //    var SubTotalManual7 = packing.SubTotalManual7();

                //    var Twip1 = 0;
                //    var Twip2 = 0;
                //    var Twip3 = 0;
                //    var Twip4 = 0;
                //    var Twip5 = 0;
                //    var Twip6 = 0;
                //    var Twip7 = 0;
                //    $.each(packing.PlanTPOTPK, function(k, value) {
                //        var wip1 = recalculateWIP(i, value.TargetManual1(), selisihWIPPackingMon, SubTotalManual1);
                //        Twip1 += wip1;
                //        var wip2 = recalculateWIP(i, value.TargetManual2(), selisihWIPPackingTue, SubTotalManual2);
                //        Twip2 += wip2;
                //        var wip3 = recalculateWIP(i, value.TargetManual3(), selisihWIPPackingWed, SubTotalManual3);
                //        Twip3 += wip3;
                //        var wip4 = recalculateWIP(i, value.TargetManual4(), selisihWIPPackingThu, SubTotalManual4);
                //        Twip4 += wip4;
                //        var wip5 = recalculateWIP(i, value.TargetManual5(), selisihWIPPackingFri, SubTotalManual5);
                //        Twip5 += wip5;
                //        var wip6 = recalculateWIP(i, value.TargetManual6(), selisihWIPPackingSat, SubTotalManual6);
                //        Twip6 += wip6;
                //        var wip7 = recalculateWIP(i, value.TargetManual7(), selisihWIPPackingSun, SubTotalManual7);
                //        Twip7 += wip7;
                //    });
                //    $.each(packing.PlanTPOTPK, function(k, value) {
                //        //wip
                //        value.WIP1(recalculateWIP(i, value.TargetManual1(), selisihWIPPackingMon, SubTotalManual1,Twip1));
                //        value.WIP2(recalculateWIP(i, value.TargetManual2(), selisihWIPPackingTue, SubTotalManual2,Twip2));
                //        value.WIP3(recalculateWIP(i, value.TargetManual3(), selisihWIPPackingWed, SubTotalManual3,Twip3));
                //        value.WIP4(recalculateWIP(i, value.TargetManual4(), selisihWIPPackingThu, SubTotalManual4,Twip4));
                //        value.WIP5(recalculateWIP(i, value.TargetManual5(), selisihWIPPackingFri, SubTotalManual5,Twip5));
                //        value.WIP6(recalculateWIP(i, value.TargetManual6(), selisihWIPPackingSat, SubTotalManual6,Twip6));
                //        value.WIP7(recalculateWIP(i, value.TargetManual7(), selisihWIPPackingSun, SubTotalManual7,Twip7));

                //        //target system
                //        value.TargetSystem1(recalculateTargetOnWIPChange(value.TargetSystem1(), packing.SubTotalSytem1(), value.WIP1()));
                //        value.TargetSystem2(recalculateTargetOnWIPChange(value.TargetSystem2(), packing.SubTotalSytem2(), value.WIP2()));
                //        value.TargetSystem3(recalculateTargetOnWIPChange(value.TargetSystem3(), packing.SubTotalSytem3(), value.WIP3()));
                //        value.TargetSystem4(recalculateTargetOnWIPChange(value.TargetSystem4(), packing.SubTotalSytem4(), value.WIP4()));
                //        value.TargetSystem5(recalculateTargetOnWIPChange(value.TargetSystem5(), packing.SubTotalSytem5(), value.WIP5()));
                //        value.TargetSystem6(recalculateTargetOnWIPChange(value.TargetSystem6(), packing.SubTotalSytem6(), value.WIP6()));
                //        value.TargetSystem7(recalculateTargetOnWIPChange(value.TargetSystem7(), packing.SubTotalSytem7(), value.WIP7()));

                //        //target Manual mon
                //        value.TargetManual1(recalculateTargetOnWIPChange(value.TargetManual1(), packing.SubTotalManual1(), value.WIP1()));
                //        value.TargetManual2(recalculateTargetOnWIPChange(value.TargetManual2(), packing.SubTotalManual2(), value.WIP2()));
                //        value.TargetManual3(recalculateTargetOnWIPChange(value.TargetManual3(), packing.SubTotalManual3(), value.WIP3()));
                //        value.TargetManual4(recalculateTargetOnWIPChange(value.TargetManual4(), packing.SubTotalManual4(), value.WIP4()));
                //        value.TargetManual5(recalculateTargetOnWIPChange(value.TargetManual5(), packing.SubTotalManual5(), value.WIP5()));
                //        value.TargetManual6(recalculateTargetOnWIPChange(value.TargetManual6(), packing.SubTotalManual6(), value.WIP6()));
                //        value.TargetManual7(recalculateTargetOnWIPChange(value.TargetManual7(), packing.SubTotalManual7(), value.WIP7()));
                //        i ++;
                //    });
                //    SKTIS.Helper.ResponseNotification("Success", "Save TPO - TPK",packing.ProcessGroup());
                //}

                ////calculate stickwrapping
                //var stickWrapping = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                //    return item.ProcessGroup().toLowerCase() === 'stickwrapping';
                //});

                //if (stickWrapping != null) {
                //    //get selisih wip
                //    //Old One
                //    //selisihWIPStickWrappingMon = getWIPDeviation(stickWrapping.WIPPreviousValue(), stickWrapping.WIPStock1());
                //    //selisihWIPStickWrappingTue = getWIPDeviation(stickWrapping.WIPPreviousValue(), stickWrapping.WIPStock2());
                //    //selisihWIPStickWrappingWed = getWIPDeviation(stickWrapping.WIPPreviousValue(), stickWrapping.WIPStock3());
                //    //selisihWIPStickWrappingThu = getWIPDeviation(stickWrapping.WIPPreviousValue(), stickWrapping.WIPStock4());
                //    //selisihWIPStickWrappingFri = getWIPDeviation(stickWrapping.WIPPreviousValue(), stickWrapping.WIPStock5());
                //    //selisihWIPStickWrappingSat = getWIPDeviation(stickWrapping.WIPPreviousValue(), stickWrapping.WIPStock6());
                //    //selisihWIPStickWrappingSun = getWIPDeviation(stickWrapping.WIPPreviousValue(), stickWrapping.WIPStock7());
                //    selisihWIPStickWrappingMon = getWIPDeviation(stickWrapping.WIPPreviousValue(), stickWrapping.WIPStock1());
                //    selisihWIPStickWrappingTue = getWIPDeviation(stickWrapping.WIPStock1(), stickWrapping.WIPStock2());
                //    selisihWIPStickWrappingWed = getWIPDeviation(stickWrapping.WIPStock2(), stickWrapping.WIPStock3());
                //    selisihWIPStickWrappingThu = getWIPDeviation(stickWrapping.WIPStock3(), stickWrapping.WIPStock4());
                //    selisihWIPStickWrappingFri = getWIPDeviation(stickWrapping.WIPStock4(), stickWrapping.WIPStock5());
                //    selisihWIPStickWrappingSat = getWIPDeviation(stickWrapping.WIPStock5(), stickWrapping.WIPStock6());
                //    selisihWIPStickWrappingSun = getWIPDeviation(stickWrapping.WIPStock6(), stickWrapping.WIPStock7());

                //    //calculate
                //    var i = 1;
                //    var count = stickWrapping.PlanTPOTPK.length;
                //    var SubTotalManual1 = stickWrapping.SubTotalManual1();
                //    var SubTotalManual2 = stickWrapping.SubTotalManual2();
                //    var SubTotalManual3 = stickWrapping.SubTotalManual3();
                //    var SubTotalManual4 = stickWrapping.SubTotalManual4();
                //    var SubTotalManual5 = stickWrapping.SubTotalManual5();
                //    var SubTotalManual6 = stickWrapping.SubTotalManual6();
                //    var SubTotalManual7 = stickWrapping.SubTotalManual7();

                //    var Twip1 = 0;
                //    var Twip2 = 0;
                //    var Twip3 = 0;
                //    var Twip4 = 0;
                //    var Twip5 = 0;
                //    var Twip6 = 0;
                //    var Twip7 = 0;
                //    $.each(stickWrapping.PlanTPOTPK, function(k, value) {
                //        var wip1 = recalculateWIP(i, value.TargetManual1(), selisihWIPStickWrappingMon, SubTotalManual1);
                //        Twip1 += wip1;
                //        var wip2 = recalculateWIP(i, value.TargetManual2(), selisihWIPStickWrappingTue, SubTotalManual2);
                //        Twip2 += wip2;
                //        var wip3 = recalculateWIP(i, value.TargetManual3(), selisihWIPStickWrappingWed, SubTotalManual3);
                //        Twip3 += wip3;
                //        var wip4 = recalculateWIP(i, value.TargetManual4(), selisihWIPStickWrappingThu, SubTotalManual4);
                //        Twip4 += wip4;
                //        var wip5 = recalculateWIP(i, value.TargetManual5(), selisihWIPStickWrappingFri, SubTotalManual5);
                //        Twip5 += wip5;
                //        var wip6 = recalculateWIP(i, value.TargetManual6(), selisihWIPStickWrappingSat, SubTotalManual6);
                //        Twip6 += wip6;
                //        var wip7 = recalculateWIP(i, value.TargetManual7(), selisihWIPStickWrappingSun, SubTotalManual7);
                //        Twip7 += wip7;
                //    });

                //    $.each(stickWrapping.PlanTPOTPK, function(k, value) {
                //        //wip
                //        //Old one
                //        //value.WIP1(recalculateWIP(value.HistoricalCapacityGroup1(), value.PercentAttendance1(), stickWrapping.JKProcess1(), selisihWIPStickWrappingMon));
                //        //value.WIP2(recalculateWIP(value.HistoricalCapacityGroup2(), value.PercentAttendance2(), stickWrapping.JKProcess2(), selisihWIPStickWrappingTue));
                //        //value.WIP3(recalculateWIP(value.HistoricalCapacityGroup3(), value.PercentAttendance3(), stickWrapping.JKProcess3(), selisihWIPStickWrappingWed));
                //        //value.WIP4(recalculateWIP(value.HistoricalCapacityGroup4(), value.PercentAttendance4(), stickWrapping.JKProcess4(), selisihWIPStickWrappingThu));
                //        //value.WIP5(recalculateWIP(value.HistoricalCapacityGroup5(), value.PercentAttendance5(), stickWrapping.JKProcess5(), selisihWIPStickWrappingFri));
                //        //value.WIP6(recalculateWIP(value.HistoricalCapacityGroup6(), value.PercentAttendance6(), stickWrapping.JKProcess6(), selisihWIPStickWrappingSat));
                //        //value.WIP7(recalculateWIP(value.HistoricalCapacityGroup7(), value.PercentAttendance7(), stickWrapping.JKProcess7(), selisihWIPStickWrappingSun));
                //        value.WIP1(recalculateWIP(i, value.TargetManual1(), selisihWIPStickWrappingMon,SubTotalManual1,Twip1));
                //        value.WIP2(recalculateWIP(i, value.TargetManual2(), selisihWIPStickWrappingTue,SubTotalManual2,Twip2));
                //        value.WIP3(recalculateWIP(i, value.TargetManual3(), selisihWIPStickWrappingWed,SubTotalManual3,Twip3));
                //        value.WIP4(recalculateWIP(i, value.TargetManual4(), selisihWIPStickWrappingThu,SubTotalManual4,Twip4));
                //        value.WIP5(recalculateWIP(i, value.TargetManual5(), selisihWIPStickWrappingFri,SubTotalManual5,Twip5));
                //        value.WIP6(recalculateWIP(i, value.TargetManual6(), selisihWIPStickWrappingSat,SubTotalManual6,Twip6));
                //        value.WIP7(recalculateWIP(i, value.TargetManual7(), selisihWIPStickWrappingSun,SubTotalManual7,Twip7));

                //        //target system
                //        value.TargetSystem1(recalculateTargetOnWIPChange(value.TargetSystem1(), stickWrapping.SubTotalSytem1(), value.WIP1()));
                //        value.TargetSystem2(recalculateTargetOnWIPChange(value.TargetSystem2(), stickWrapping.SubTotalSytem2(), value.WIP2()));
                //        value.TargetSystem3(recalculateTargetOnWIPChange(value.TargetSystem3(), stickWrapping.SubTotalSytem3(), value.WIP3()));
                //        value.TargetSystem4(recalculateTargetOnWIPChange(value.TargetSystem4(), stickWrapping.SubTotalSytem4(), value.WIP4()));
                //        value.TargetSystem5(recalculateTargetOnWIPChange(value.TargetSystem5(), stickWrapping.SubTotalSytem5(), value.WIP5()));
                //        value.TargetSystem6(recalculateTargetOnWIPChange(value.TargetSystem6(), stickWrapping.SubTotalSytem6(), value.WIP6()));
                //        value.TargetSystem7(recalculateTargetOnWIPChange(value.TargetSystem7(), stickWrapping.SubTotalSytem7(), value.WIP7()));

                //        //target Manual mon
                //        value.TargetManual1(recalculateTargetOnWIPChange(value.TargetManual1(), stickWrapping.SubTotalManual1(), value.WIP1()));
                //        value.TargetManual2(recalculateTargetOnWIPChange(value.TargetManual2(), stickWrapping.SubTotalManual2(), value.WIP2()));
                //        value.TargetManual3(recalculateTargetOnWIPChange(value.TargetManual3(), stickWrapping.SubTotalManual3(), value.WIP3()));
                //        value.TargetManual4(recalculateTargetOnWIPChange(value.TargetManual4(), stickWrapping.SubTotalManual4(), value.WIP4()));
                //        value.TargetManual5(recalculateTargetOnWIPChange(value.TargetManual5(), stickWrapping.SubTotalManual5(), value.WIP5()));
                //        value.TargetManual6(recalculateTargetOnWIPChange(value.TargetManual6(), stickWrapping.SubTotalManual6(), value.WIP6()));
                //        value.TargetManual7(recalculateTargetOnWIPChange(value.TargetManual7(), stickWrapping.SubTotalManual7(), value.WIP7()));

                //        i++;
                //    });
                //    SKTIS.Helper.ResponseNotification("Success", "Save TPO - TPK",stickWrapping.ProcessGroup());
                //}

                ////calculate cutting and rolling
                //var cuttingAndRolling = ko.utils.arrayFilter(self.gridView.listDataItems(), function(item) {
                //    return item.ProcessGroup().toLowerCase() === 'cutting' || item.ProcessGroup().toLowerCase() === 'rolling';
                //});

                //if (cuttingAndRolling.length > 0) {
                //    var count = cuttingAndRolling[cuttingAndRolling.length - 1].PlanTPOTPK.length;
                //    $.each(cuttingAndRolling, function(k, item) {
                //        if (item != null) {
                //            //get selisih wip
                //            //OLD One
                //            //selisihWIPCuttingMon = getWIPDeviation(item.WIPPreviousValue(), item.WIPStock1()) + (packing ? selisihWIPPackingMon : selisihWIPStickWrappingMon);
                //            //selisihWIPCuttingTue = getWIPDeviation(item.WIPPreviousValue(), item.WIPStock2()) + (packing ? selisihWIPPackingTue : selisihWIPStickWrappingTue);
                //            //selisihWIPCuttingWed = getWIPDeviation(item.WIPPreviousValue(), item.WIPStock3()) + (packing ? selisihWIPPackingWed : selisihWIPStickWrappingWed);
                //            //selisihWIPCuttingThu = getWIPDeviation(item.WIPPreviousValue(), item.WIPStock4()) + (packing ? selisihWIPPackingThu : selisihWIPStickWrappingThu);
                //            //selisihWIPCuttingFri = getWIPDeviation(item.WIPPreviousValue(), item.WIPStock5()) + (packing ? selisihWIPPackingFri : selisihWIPStickWrappingFri);
                //            //selisihWIPCuttingSat = getWIPDeviation(item.WIPPreviousValue(), item.WIPStock6()) + (packing ? selisihWIPPackingSat : selisihWIPStickWrappingSat);
                //            //selisihWIPCuttingSun = getWIPDeviation(item.WIPPreviousValue(), item.WIPStock7()) + (packing ? selisihWIPPackingSun : selisihWIPStickWrappingSun);
                //            selisihWIPCuttingMon = getWIPDeviation(item.WIPPreviousValue(), item.WIPStock1());
                //            selisihWIPCuttingTue = getWIPDeviation(item.WIPStock1(), item.WIPStock2());
                //            selisihWIPCuttingWed = getWIPDeviation(item.WIPStock2(), item.WIPStock3());
                //            selisihWIPCuttingThu = getWIPDeviation(item.WIPStock3(), item.WIPStock4());
                //            selisihWIPCuttingFri = getWIPDeviation(item.WIPStock4(), item.WIPStock5());
                //            selisihWIPCuttingSat = getWIPDeviation(item.WIPStock5(), item.WIPStock6());
                //            selisihWIPCuttingSun = getWIPDeviation(item.WIPStock6(), item.WIPStock7());


                //            //calculate
                //            var i = 1;
                //            var SubTotalManual1 = item.SubTotalManual1();
                //            var SubTotalManual2 = item.SubTotalManual2();
                //            var SubTotalManual3 = item.SubTotalManual3();
                //            var SubTotalManual4 = item.SubTotalManual4();
                //            var SubTotalManual5 = item.SubTotalManual5();
                //            var SubTotalManual6 = item.SubTotalManual6();
                //            var SubTotalManual7 = item.SubTotalManual7();

                //            var Twip1 = 0;
                //            var Twip2 = 0;
                //            var Twip3 = 0;
                //            var Twip4 = 0;
                //            var Twip5 = 0;
                //            var Twip6 = 0;
                //            var Twip7 = 0;
                //            $.each(item.PlanTPOTPK, function(k, value) {
                //                var wip1 = recalculateWIP(i, value.TargetManual1(), selisihWIPCuttingMon, SubTotalManual1);
                //                Twip1 += wip1;
                //                var wip2 = recalculateWIP(i, value.TargetManual2(), selisihWIPCuttingTue, SubTotalManual2);
                //                Twip2 += wip2;
                //                var wip3 = recalculateWIP(i, value.TargetManual3(), selisihWIPCuttingWed, SubTotalManual3);
                //                Twip3 += wip3;
                //                var wip4 = recalculateWIP(i, value.TargetManual4(), selisihWIPCuttingThu, SubTotalManual4);
                //                Twip4 += wip4;
                //                var wip5 = recalculateWIP(i, value.TargetManual5(), selisihWIPCuttingFri, SubTotalManual5);
                //                Twip5 += wip5;
                //                var wip6 = recalculateWIP(i, value.TargetManual6(), selisihWIPCuttingSat, SubTotalManual6);
                //                Twip6 += wip6;
                //                var wip7 = recalculateWIP(i, value.TargetManual7(), selisihWIPCuttingSun, SubTotalManual7);
                //                Twip7 += wip7;
                //            });
                //            $.each(item.PlanTPOTPK, function(k, value) {
                //                //wip
                //                //Old One
                //                //value.WIP1(recalculateWIP(value.HistoricalCapacityGroup1(), value.PercentAttendance1(), item.JKProcess1(), selisihWIPCuttingMon));
                //                //value.WIP2(recalculateWIP(value.HistoricalCapacityGroup2(), value.PercentAttendance2(), item.JKProcess2(), selisihWIPCuttingTue));
                //                //value.WIP3(recalculateWIP(value.HistoricalCapacityGroup3(), value.PercentAttendance3(), item.JKProcess3(), selisihWIPCuttingWed));
                //                //value.WIP4(recalculateWIP(value.HistoricalCapacityGroup4(), value.PercentAttendance4(), item.JKProcess4(), selisihWIPCuttingThu));
                //                //value.WIP5(recalculateWIP(value.HistoricalCapacityGroup5(), value.PercentAttendance5(), item.JKProcess5(), selisihWIPCuttingFri));
                //                //value.WIP6(recalculateWIP(value.HistoricalCapacityGroup6(), value.PercentAttendance6(), item.JKProcess6(), selisihWIPCuttingSat));
                //                //value.WIP7(recalculateWIP(value.HistoricalCapacityGroup7(), value.PercentAttendance7(), item.JKProcess7(), selisihWIPCuttingSun));
                //                value.WIP1(recalculateWIP(i, value.TargetManual1(), selisihWIPCuttingMon,SubTotalManual1,Twip1));
                //                value.WIP2(recalculateWIP(i, value.TargetManual2(), selisihWIPCuttingTue,SubTotalManual2,Twip2));
                //                value.WIP3(recalculateWIP(i, value.TargetManual3(), selisihWIPCuttingWed,SubTotalManual3,Twip3));
                //                value.WIP4(recalculateWIP(i, value.TargetManual4(), selisihWIPCuttingThu,SubTotalManual4,Twip4));
                //                value.WIP5(recalculateWIP(i, value.TargetManual5(), selisihWIPCuttingFri,SubTotalManual5,Twip5));
                //                value.WIP6(recalculateWIP(i, value.TargetManual6(), selisihWIPCuttingSat,SubTotalManual6,Twip6));
                //                value.WIP7(recalculateWIP(i, value.TargetManual7(), selisihWIPCuttingSun,SubTotalManual7,Twip7));

                //                //target system
                //                value.TargetSystem1(recalculateTargetOnWIPChange(value.TargetSystem1(), item.SubTotalSytem1(), value.WIP1()));
                //                value.TargetSystem2(recalculateTargetOnWIPChange(value.TargetSystem2(), item.SubTotalSytem2(), value.WIP2()));
                //                value.TargetSystem3(recalculateTargetOnWIPChange(value.TargetSystem3(), item.SubTotalSytem3(), value.WIP3()));
                //                value.TargetSystem4(recalculateTargetOnWIPChange(value.TargetSystem4(), item.SubTotalSytem4(), value.WIP4()));
                //                value.TargetSystem5(recalculateTargetOnWIPChange(value.TargetSystem5(), item.SubTotalSytem5(), value.WIP5()));
                //                value.TargetSystem6(recalculateTargetOnWIPChange(value.TargetSystem6(), item.SubTotalSytem6(), value.WIP6()));
                //                value.TargetSystem7(recalculateTargetOnWIPChange(value.TargetSystem7(), item.SubTotalSytem7(), value.WIP7()));

                //                //target Manual mon
                //                value.TargetManual1(recalculateTargetOnWIPChange(value.TargetManual1(), item.SubTotalManual1(), value.WIP1()));
                //                value.TargetManual2(recalculateTargetOnWIPChange(value.TargetManual2(), item.SubTotalManual2(), value.WIP2()));
                //                value.TargetManual3(recalculateTargetOnWIPChange(value.TargetManual3(), item.SubTotalManual3(), value.WIP3()));
                //                value.TargetManual4(recalculateTargetOnWIPChange(value.TargetManual4(), item.SubTotalManual4(), value.WIP4()));
                //                value.TargetManual5(recalculateTargetOnWIPChange(value.TargetManual5(), item.SubTotalManual5(), value.WIP5()));
                //                value.TargetManual6(recalculateTargetOnWIPChange(value.TargetManual6(), item.SubTotalManual6(), value.WIP6()));
                //                value.TargetManual7(recalculateTargetOnWIPChange(value.TargetManual7(), item.SubTotalManual7(), value.WIP7()));
                //                i++;
                //            });
                //        }
                //    });
                //    SKTIS.Helper.ResponseNotification("Success", "Save TPO - TPK","CUTTING");
                //}
            };

            self.closeWIPStock = function() {
                if (self.gridView.listDataItems().length < 1)
                    return;
                $.each(self.tempWIPStocks, function(k, value) {
                    var model = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                        return item.ProcessGroup().toLowerCase() === value.ProcessGroup;
                    });

                    if (model != null) {
                        model.WIPStock1(value.WIPStock1);
                        model.WIPStock2(value.WIPStock2);
                        model.WIPStock3(value.WIPStock3);
                        model.WIPStock4(value.WIPStock4);
                        model.WIPStock5(value.WIPStock5);
                        model.WIPStock6(value.WIPStock6);
                        model.WIPStock7(value.WIPStock7);
                    };
                });
            };



            //jk process
            self.tempJKProcess = [];

            $('#JKProcess').on('shown.bs.modal', function() {
                if (self.gridView.listDataItems().length < 1)
                    return;

                self.tempJKProcess = [];

                $.each(self.gridView.listDataItems(), function(k, value) {
                    self.tempJKProcess.push({
                        "ProcessGroup": value.ProcessGroup().toLowerCase(),
                        "JKProcess1": value.JKProcess1(),
                        "JKProcess2": value.JKProcess2(),
                        "JKProcess3": value.JKProcess3(),
                        "JKProcess4": value.JKProcess4(),
                        "JKProcess5": value.JKProcess5(),
                        "JKProcess6": value.JKProcess6(),
                        "JKProcess7": value.JKProcess7()
                    });
                });
            });

            self.saveJKProcess = function() {
                if (self.gridView.listDataItems().length < 1)
                    return;

                var rolling = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                    return item.ProcessGroup().toLowerCase() === SKTIS.Constant.ProcessGroup.ROLLING;
                });

                var cutting = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                    return item.ProcessGroup().toLowerCase() === SKTIS.Constant.ProcessGroup.CUTTING;
                });

                if((rolling.JKProcess1() != cutting.JKProcess1()) || (rolling.JKProcess2() != cutting.JKProcess2()) || (rolling.JKProcess3() != cutting.JKProcess3()) || (rolling.JKProcess4() != cutting.JKProcess4()) || (rolling.JKProcess5() != cutting.JKProcess5()) || (rolling.JKProcess6() != cutting.JKProcess6()) || (rolling.JKProcess7() != cutting.JKProcess7())){
                    window.alert("JK Value between Rolling and Cutting doesn't match");
                }else{
                    $("#JKProcess").modal("hide");

                    $.each(self.gridView.listDataItems(), function(i, item) {
                        $.each(item.PlanTPOTPK, function(j, value) {

                            item.JKProcess1( parseFloat(item.JKProcess1()) );
                            item.JKProcess2( parseFloat(item.JKProcess2()) );
                            item.JKProcess3( parseFloat(item.JKProcess3()) );
                            item.JKProcess4( parseFloat(item.JKProcess4()) );
                            item.JKProcess5( parseFloat(item.JKProcess5()) );
                            item.JKProcess6( parseFloat(item.JKProcess6()) );
                            item.JKProcess7( parseFloat(item.JKProcess7()) );

                            value.ProcessWorkHours1(item.JKProcess1());
                            value.ProcessWorkHours2(item.JKProcess2());
                            value.ProcessWorkHours3(item.JKProcess3());
                            value.ProcessWorkHours4(item.JKProcess4());
                            value.ProcessWorkHours5(item.JKProcess5());
                            value.ProcessWorkHours6(item.JKProcess6());
                            value.ProcessWorkHours7(item.JKProcess7());
                            //console.log(value.ProcessWorkHours1())
                        });
                    });
                    //setTarget();
                }
            };

            self.closeJKProcess = function() {
                if (self.gridView.listDataItems().length < 1)
                    return;
                $.each(self.tempJKProcess, function(k, value) {
                    var model = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                        return item.ProcessGroup().toLowerCase() === value.ProcessGroup;
                    });

                    if (model != null) {
                        model.JKProcess1(value.JKProcess1);
                        model.JKProcess2(value.JKProcess2);
                        model.JKProcess3(value.JKProcess3);
                        model.JKProcess4(value.JKProcess4);
                        model.JKProcess5(value.JKProcess5);
                        model.JKProcess6(value.JKProcess6);
                        model.JKProcess7(value.JKProcess7);
                    };
                });
            };

            //get percentage attendance
            self.attendancePercentageMon = ko.observable(0);
            self.attendancePercentageTue = ko.observable(0);
            self.attendancePercentageWed = ko.observable(0);
            self.attendancePercentageThu = ko.observable(0);
            self.attendancePercentageFri = ko.observable(0);
            self.attendancePercentageSat = ko.observable(0);
            self.attendancePercentageSun = ko.observable(0);
            self.totalAttendancePercentage = ko.pureComputed(function() {
                var result = (parseToFloat(self.attendancePercentageMon()) + parseToFloat(self.attendancePercentageTue()) + parseToFloat(self.attendancePercentageWed())
                    + parseToFloat(self.attendancePercentageThu()) + parseToFloat(self.attendancePercentageFri()) + parseToFloat(self.attendancePercentageSat())
                    + parseToFloat(self.attendancePercentageSun())) / 7;
                return parseToFloat(result).toFixed(2);
            });

            self.getAttendancePercentage = function() {
                var totalAttendance1 = 0;
                var totalAttendance2 = 0;
                var totalAttendance3 = 0;
                var totalAttendance4 = 0;
                var totalAttendance5 = 0;
                var totalAttendance6 = 0;
                var totalAttendance7 = 0;

                var totalRow = 0;

                $.each(self.gridView.listDataItems(), function(k, v) {
                    totalAttendance1 += parseToFloat(v.SubTotalPercentageAttendance1());
                    totalAttendance2 += parseToFloat(v.SubTotalPercentageAttendance2());
                    totalAttendance3 += parseToFloat(v.SubTotalPercentageAttendance3());
                    totalAttendance4 += parseToFloat(v.SubTotalPercentageAttendance4());
                    totalAttendance5 += parseToFloat(v.SubTotalPercentageAttendance5());
                    totalAttendance6 += parseToFloat(v.SubTotalPercentageAttendance6());
                    totalAttendance7 += parseToFloat(v.SubTotalPercentageAttendance7());
                    totalRow += parseToInt(v.TotalRow());
                });

                self.attendancePercentageMon(parseToFloat(totalAttendance1 / totalRow).toFixed(2));
                self.attendancePercentageTue(parseToFloat(totalAttendance2 / totalRow).toFixed(2));
                self.attendancePercentageWed(parseToFloat(totalAttendance3 / totalRow).toFixed(2));
                self.attendancePercentageThu(parseToFloat(totalAttendance4 / totalRow).toFixed(2));
                self.attendancePercentageFri(parseToFloat(totalAttendance5 / totalRow).toFixed(2));
                self.attendancePercentageSat(parseToFloat(totalAttendance6 / totalRow).toFixed(2));
                self.attendancePercentageSun(parseToFloat(totalAttendance7 / totalRow).toFixed(2));

            };

            self.submitData = function() {
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/SubmitData"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ 'year': self.filterKPSYear(), 'week': self.filterKPSWeek(), 'locationCode': self.filterLocationCode(), 'brandCode': self.filterBrandCode()}),
                    dataType: 'json',
                    success: function(data) {
                        if(data.length > 1){
                            SKTIS.Helper.Notification(data[0]);
                            SKTIS.Helper.Notification(data[1], 'error');
                        }else{
                            SKTIS.Helper.Notification(data[0]);
                        }

                        self.search();
                        self.ButtonSubmit(false);
                    }
                });
            };
            self.maximumWorkHour = ko.observable(10);
            self.EditedWorkHourProcess = function(event, value, process, day)
            {
                if (value() > self.maximumWorkHour())
                    value(self.maximumWorkHour());
                else if (value() < 0)
                    value(0);

                var monday = [];
                var tuesday = [];
                var wednesday = [];
                var thursday = [];
                var friday = [];
                var saturday = [];
                var sunday = [];
                $.each(self.gridView.listDataItems(), function(i, item) {
                    monday[item.JKProcess1()] = (monday[item.JKProcess1()] || 0)+1;
                    tuesday[item.JKProcess2()] = (tuesday[item.JKProcess2()] || 0)+1;
                    wednesday[item.JKProcess3()] = (wednesday[item.JKProcess3()] || 0)+1;
                    thursday[item.JKProcess4()] = (thursday[item.JKProcess4()] || 0)+1;
                    friday[item.JKProcess5()] = (friday[item.JKProcess5()] || 0)+1;
                    saturday[item.JKProcess6()] = (saturday[item.JKProcess6()] || 0)+1;
                    sunday[item.JKProcess7()] = (sunday[item.JKProcess7()] || 0)+1;
                    if(item.ProcessGroup() == process())
                    {
                        switch(day)
                        {
                            case 1:
                                item.JKProcess1(value());
                                break;
                            case 2:
                                item.JKProcess2(value());
                                break;
                            case 3:
                                item.JKProcess3(value());
                                break;
                            case 4:
                                item.JKProcess4(value());
                                break;
                            case 5:
                                item.JKProcess5(value());
                                break;
                            case 6:
                                item.JKProcess6(value());
                                break;
                            case 7:
                                item.JKProcess7(value());
                                break;
                        }
                    }

                });

                var max_monday = getMaxKeyOfArray(monday);
                monday.forEach(function(i,v) {
                    if(i == max_monday) {
                        self.HeaderProcessWorkHours1.Value(v);
                    }

                });

                var max_tuesday = getMaxKeyOfArray(tuesday);
                tuesday.forEach(function(i,v) {
                    if(i == max_tuesday) {
                        self.HeaderProcessWorkHours2.Value(v);
                    }

                });

                var max_wednesday = getMaxKeyOfArray(wednesday);
                wednesday.forEach(function(i,v) {
                    if(i == max_wednesday) {
                        self.HeaderProcessWorkHours3.Value(v);
                    }

                });

                var max_thursday = getMaxKeyOfArray(thursday);
                thursday.forEach(function(i,v) {
                    if(i == max_thursday) {
                        self.HeaderProcessWorkHours4.Value(v);
                    }

                });

                var max_friday = getMaxKeyOfArray(friday);
                friday.forEach(function(i,v) {
                    if(i == max_friday) {
                        self.HeaderProcessWorkHours5.Value(v);
                    }

                });

                var max_saturday = getMaxKeyOfArray(saturday);
                saturday.forEach(function(i,v) {
                    if(i == max_saturday) {
                        self.HeaderProcessWorkHours6.Value(v);
                    }

                });

                var max_sunday = getMaxKeyOfArray(sunday);
                sunday.forEach(function(i,v) {
                    if(i == max_sunday) {
                        self.HeaderProcessWorkHours7.Value(v);
                    }

                });
                console.log(self.filterCurrenDayEnabled(),
                self.isFilterCurrentDayForward());
                if((self.filterCurrenDayEnabled() == true) && self.isFilterCurrentDayForward() == true)
                {
                    $.each(self.historyGridView.listDataItems(), function(i, item) {
                        if(item.action() == 'Submit'){
                            self.isAlreadySubmitted(true);
                        }
                    });
                    if(self.isAlreadySubmitted()){
                        self.filterCurrenDayEnabled(true);
                        self.isFilterCurrentDayForward(true);
                    }
                }

                self.ButtonCalculate(true);
                self.ButtonSave(false);
                self.ButtonSubmit(false);
                self.EditedWIPStock(true);
                event.Message('true');
            }

            self.EditedRowCalculate = function(event, data) {
                if(isFunction(event.Allocation) == true) {
                    self.EditedAllocation(true);
                }else{
                    if(isFunction(event.TargetManual1) == true || isFunction(event.TargetManual2) == true || isFunction(event.TargetManual3) == true || isFunction(event.TargetManual4) == true || isFunction(event.TargetManual5) == true || isFunction(event.TargetManual6) == true || isFunction(event.TargetManual7) == true) {
                        self.EditedTotalBox(true);
                    }
                    if(isFunction(event.JKProcess1) == true || isFunction(event.JKProcess2) == true || isFunction(event.JKProcess3) == true || isFunction(event.JKProcess4) == true || isFunction(event.JKProcess5) == true || isFunction(event.JKProcess6) == true || isFunction(event.JKProcess7) == true) {
                        self.EditedJkp(true);
                    }
                }

                if(self.EditedWIPStock() == true) {
                    //console.log('true');
                    noty({
                        text: 'Save WIP Stock ?',
                        type: 'confirm',
                        modal: true,
                        buttons: [
                            {
                                addClass: 'btn btn-primary', text: 'Save', onClick: function ($noty) {
                                    $noty.close();
                                    self.saveData();
                                    self.ButtonSubmit(true);
                                    self.EditedWIPStock(false);
                                }
                            },
                            {
                                addClass: 'btn btn-danger', text: 'Cancel', onClick: function ($noty) {
                                    $noty.close();
                                    self.EditedWIPStock(false);
                                    self.search();
                                }
                            }
                        ],
                        theme: 'relax',
                        template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
                    });
                }else{
                    if((self.EditedAllocation() == true && self.EditedTotalBox() == true) || (self.EditedJkp() == true && self.EditedAllocation() == true || self.EditedJkp() == true && self.EditedTotalBox() == true)) {
                        //console.log('1');
                        //$('.modal').modal('hide');
                        //noty({
                        //    text: 'Calculate first ?',
                        //    type: 'confirm',
                        //    modal: true,
                        //    buttons: [
                        //        {

                        //            addClass: 'btn btn-primary', text: 'Calculate', onClick: function ($noty) {
                        //                $noty.close();
                        //                console.log('2');
                        //                self.EditedAllocation(false);
                        //                self.EditedTotalBox(false);
                        //                self.CalculateData();
                        //            }
                        //        },
                        //        {
                        //            addClass: 'btn btn-danger', text: 'Cancel', onClick: function ($noty) {
                        //                $noty.close();
                        //                console.log('3');
                        //                self.EditedAllocation(false);
                        //                self.EditedTotalBox(false);
                        //                self.search();
                        //            }
                        //        }
                        //    ],
                        //    theme: 'relax',
                        //    template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
                        //});
                    }else{
                        console.log('4');

                        $.each(self.historyGridView.listDataItems(), function(i, item) {
                            if(item.action() == 'Submit'){
                                self.isAlreadySubmitted(true);
                            }
                        });
                        if(self.isAlreadySubmitted()){
                            self.filterCurrenDayEnabled(true);
                            self.isFilterCurrentDayForward(true);
                        }

                        self.ButtonCalculate(true);
                        self.ButtonSave(false);
                        self.ButtonSubmit(false);
                    }
                }
            };

            self.EditedHeaderCalculate = function(event) {
                if(self.EditedAllocation() == true || self.EditedTotalBox() == true || self.EditedJkp() == true) {
                    //$('.modal').modal('hide');
                    //noty({
                    //    text: 'Calculate first ?',
                    //    type: 'confirm',
                    //    modal: true,
                    //    buttons: [
                    //        {
                    //            addClass: 'btn btn-primary', text: 'Calculate', onClick: function ($noty) {
                    //                $noty.close();
                    //                self.EditedAllocation(false);
                    //                self.EditedTotalBox(false);
                    //                self.CalculateData();
                    //            }
                    //        },
                    //        {
                    //            addClass: 'btn btn-danger', text: 'Cancel', onClick: function ($noty) {
                    //                $noty.close();
                    //                self.EditedAllocation(false);
                    //                self.EditedTotalBox(false);
                    //                self.search();
                    //            }
                    //        }
                    //    ],
                    //    theme: 'relax',
                    //    template: '<div class="noty_message"><span class="noty_text"></span><div class="noty_close"></div></div>',
                    //});
                }else{
                    $.each(self.historyGridView.listDataItems(), function(i, item) {
                        if(item.action() == 'Submit'){
                            self.isAlreadySubmitted(true);
                        }
                    });
                    if(self.isAlreadySubmitted()){
                        self.filterCurrenDayEnabled(true);
                        self.isFilterCurrentDayForward(true);
                    }

                    self.ButtonCalculate(true);
                    self.ButtonSave(false);
                    self.ButtonSubmit(false);
                    self.EditedWIPStock(true);
                }

            };

            self.SubmitedButton =  function(event) {
                self.ButtonSave(true);
            }



            //self.SavedButton =  function(event) {
            //    ValidateSubmittedEntry();
            //    console.log('ValidateSubmittedEntry = '+ ValidateSubmittedEntry());
            //}

            self.SavedButton =  function(event) {
                //hakim
                // based on ticket http://tp.voxteneo.co.id/entity/10079 point 1 & 2
                var ebl = 'EBL/' + self.filterLocationCode() + '/%/' + self.filterBrandCode() + '/' + self.filterKPSYear() + '/' + self.filterKPSWeek() + '/%';
                var valid = false;
                if((week(year, month, day)-1) <= self.filterKPSWeek()){
                    valid = true;
                }
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/ValidateSubmittedEntry"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ 'data': ebl}),
                    dataType: 'json',
                    success: function(data) {
                        //console.log(data.notification.Message);
                        if((!data.isAlreadySubmitted)&& (valid == true)){
                            self.ButtonSubmit(true);
                        }else{
                            self.ButtonSubmit(false);
                            //SKTIS.Helper.Notification(data.notification.Message);
                            SKTIS.Helper.Notification(data.notification.Message);
                        }
                    }
                });
            }

            function week(year,month,day) {
                function serial(days) { return 86400000*days; }
                function dateserial(year,month,day) { return (new Date(year,month-1,day).valueOf()); }
                function weekday(date) { return (new Date(date)).getDay()+1; }
                function yearserial(date) { return (new Date(date)).getFullYear(); }
                var date = year instanceof Date ? year.valueOf() : typeof year === "string" ? new Date(year).valueOf() : dateserial(year,month,day),
                    date2 = dateserial(yearserial(date - serial(weekday(date-serial(1))) + serial(4)),1,3);
                return ~~((date - date2 + serial(weekday(date2) + 5))/ serial(7));
            }

            // TRANSACTION HISTORY AND FLOW
            self.historyGridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "UpdatedDate",
                    SortOrder: "DESC",
                    code_1: 'TPK',
                    code_2: self.filterLocationCode,
                    code_3: self.filterBrandCode,
                    code_4: self.filterKPSYear,
                    code_5: self.filterKPSWeek
                },
                DataSourceUrl: @Html.BaseUrl("PlanningTPOTPK/GetHistory"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });
            self.flowGridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "IDFlow",
                    SortOrder: "ASC",
                    FunctionName: 'TPOTargetProductionGroup'
                },
                DataSourceUrl: @Html.BaseUrl("PlanningTPOTPK/GetFlow"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            self.loadHistory = function(){
                self.historyGridView.search({}, function (response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message,'error');
                        $('.empty-row-message').html(response.message);
                    }else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });
            };
            self.loadFlow = function(){
                self.flowGridView.search({}, function (response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message,'error');
                        $('.empty-row-message').html(response.message);
                    }else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });
            };
            // END OF TRANSACTION HISTORY AND FLOW

            self.brandFromUrl = false;
            // Load Data

            self.search = function() {
                //ValidateSubmittedEntry();
                cektransactionLog();

                if (self.firstInit) {
                    self.firstInit = false;
                    self.brandFromUrl= true
                }

                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {

                    return;
                } else {

                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }

                self.filterExcelLocationCode = self.filterLocationCode();
                self.filterExcelBrandCode = self.filterBrandCode();
                self.filterExcelKPSYear = self.filterKPSYear();
                self.filterExcelKPSWeek = self.filterKPSWeek();
                self.filterExcelTPKCode = self.filterTPKCode();
                self.ButtonCalculate(false);

                self.getProductionStartDate();

                self.getTargetWPP();
                self.getStickPerBox();
                self.getWorkHourHeaders();

                //self.filterExcelListGroup = self.filterListGroup();
                self.gridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        self.ButtonWIP(false);
                        self.ButtonJK(false);
                        self.ButtonSelectGroup(false);
                    }

                    self.getWorkHours();
                    self.getAttendancePercentage();

                    $(".total").each(function() {
                        //$(this).removeAttr("data-bind");
                    });

                    self.loadHistory();
                    self.loadFlow();

                    self.EditedAllocation(false);
                    self.EditedWIPStock(false);
                    self.EditedJkp(false);
                });

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };

                if (self.BrandCodeSelectList().length >= 2) {
                    self.ButtonSelectGroup(true);
                } else {
                    self.ButtonSelectGroup(false);
                }
            };

            self.setDateRange = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/GetDateByYearWeek"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { year: self.filterKPSYear(), week: self.filterKPSWeek() },
                    dataType: 'json',
                    success: function(data) {
                        if((self.filterKPSWeek() > @Model.DefaultWeek) || (self.filterKPSWeek() < @Model.DefaultWeek)){
                            $('#filterCurrentDayForward').data("DateTimePicker").options({
                                //date: moment(data.StartDate),
                                maxDate: moment(data.EndDate),
                                minDate: moment(data.StartDate),
                            });
                        } else if((self.filterKPSWeek() === @Model.DefaultWeek)) {
                            if(moment(moment(data.EndDate).format('YYYY-MM-DD')) > moment(moment(data.TodayDate).format('YYYY-MM-DD')))
                            {
                                $('#filterCurrentDayForward').data("DateTimePicker").options({
                                    //date: moment(data.StartDate),
                                    maxDate: moment(data.EndDate),
                                    minDate: moment(data.TodayDate),
                                });
                            }
                        }
                        if ((self.filterKPSWeek() === @Model.DefaultWeek)){
                            if(moment(moment(data.EndDate).format('YYYY-MM-DD')).isSame(moment().format('YYYY-MM-DD')))
                                self.filterCurrentDayForward(moment(data.EndDate).format("DD/MM/YYYY"));
                            else
                                self.filterCurrentDayForward('@Model.TodayDate');
                        }else{
                            self.filterCurrentDayForward(moment(data.StartDate).format("DD/MM/YYYY"));
                        };
                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
                //$('#filterCurrentDayForward').data("DateTimePicker").options({
                //    minDate: moment().add(1, 'days').toDate()
                //});
            };



            //self.getKPSWeekList();
            //self.onKPSWeekChange();
            //self.getProductionStartDate();
            //self.getWorkHours();

            //async.series([
            //    function(callback){
            //        self.onLocationCodeChange(function() {
            //            callback(null);
            //        });
            //    }
            //],
            //function(err, results){
            //    self.search();
            //});



            function cektransactionLog() {

                //var wppno = 'WPP/' + self.filterKPSYear() + '/' + 2;
                //var tpkno = 'TPK/IDAA/FA054514.03/2016/5';
                var wppno = 'WPP/' + self.filterKPSYear() + '/' + self.filterKPSWeek();
                var tpkno = 'TPK/' + self.filterLocationCode() + '/' + self.filterBrandCode() + '/' + self.filterKPSYear() + '/' + self.filterKPSWeek();
                var datas = tpkno + "," + wppno ;
                //console.log(datas);
                $.ajax({
                    url: @Html.BaseUrl("PlanningTPOTPK/CheckSubmittedWpp"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ 'data': datas}),
                    dataType: 'json',
                    success: function(data) {
                        //console.log(data);
                        if(data.readyToSubmit != true){
                            self.ButtonSubmit(false); // see this http://tp.voxteneo.co.id/entity/2951 read the comment
                            self.ButtonWIP(true);
                            self.ButtonJK(true);
                            self.ButtonSave(false);
                            self.isFilterCurrentDayForward(false);
                            self.filterCurrenDayEnabled(false);
                        }else{
                            self.ButtonSubmit(true);
                            self.ButtonWIP(true);
                            self.ButtonJK(true);
                            self.ButtonSave(false);
                            if(data.reSubmit){
                                self.filterCurrenDayEnabled(true);
                                self.isFilterCurrentDayForward(true);
                            }else{
                                self.filterCurrenDayEnabled(false);
                                self.isFilterCurrentDayForward(false);
                            }
                        }
                    }
                });
            };
            // Generate excel
            self.generateExcel = function(formElement) {
                $(formElement).find("input[name=locationCode]").val(self.filterExcelLocationCode);
                $(formElement).find("input[name=brandCode]").val(self.filterExcelBrandCode);
                $(formElement).find("input[name=tpkCode]").val(self.filterExcelTPKCode);
                $(formElement).find("input[name=year]").val(self.filterExcelKPSYear);
                $(formElement).find("input[name=week]").val(self.filterExcelKPSWeek);
                return true;
            };

            // execute when first load
            //self.getKPSWeekList();
            //self.onKPSWeekChange();
            ko.extenders.numerics = function(target, precision) {
                var result = ko.computed({
                    read: function() {
                        return target().toFixed(precision);
                    },
                    write: target
                });

                result.raw = target;
                return result;
            };

            $(document).ready(function() {
                //open for develop
                self.init();
            });

            //self.search();

            self.init = function() {
                //Asynch setting
                //if (self.filterLocationCode() == null)
                //    self.filterLocationCode(self.locationSelectList()[0].LocationCode);
                self.isLoading(true);
                async.series([
                    function(cb) {
                        self.getKPSWeekList(cb);
                    },
                    function(cb) {
                        self.setDateRange(cb);
                    },
                    function(cb) {
                        self.getBrandCodeList(cb);
                    },
                    function(cb) {
                        self.getLocationNameFilter(cb);
                    },
                    //function(cb) {
                    //    cektransactionLog(cb);
                    //},
                    //function(cb) {
                    //    self.getProductionStartDate(cb);
                    //},
                    //function(cb) {
                    //    self.getStickPerBox(cb);
                    //},
                    //function(cb) {
                    //    self.getWorkHourHeaders(cb);
                    //},
                    //function(cb) {
                    //    self.getTargetWPP(cb);
                    //},
                    function(cb) {
                        // Since below request no need to wait another request to trigger, exclude them from series
                        //self.loadHistory();
                        //self.loadFlow();
                        cb();
                    }
                ], function() {
                    $(document).on('keydown','table div.bootstrap-select button',function(e){
                        if(e.keyCode == 13)
                            e.preventDefault();
                    });

                    self.firstLoad = false;
                    self.search();
                    self.isLoading(false);
                });
            };
        };

        ko.applyBindings(new app.EditGrid());
    })(app = this.app || {});
</script>
}