@model SKTISWebsite.Models.MasterTPOProductionGroup.InitMasterTPOProductionGroup
@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MasterTPOProductionGroup
@using SKTISWebsite.Controllers
@using SKTISWebsite.Helper

@{ Html.SetPageTitle(@MasterTPOProductionGroup.PageTitle); }
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">@MasterTPOProductionGroup.lblFilterLocation</label>
            <div class="col-lg-3">
                @*@Html.DropDownList("ddlLocationFilter", Model.LocationLists,
                    new Dictionary<string, object> { { "data-bind", "value:$root.filterLocation, event : { change : $root.GetLocationNameFilter}" },
                        { "class", "selectpicker show-tick form-controlt" },
                        {"data-live-search","true"},{"id","ddlLocationFilter"} })*@

                <select id="ddlLocationFilter"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterLocation, optionsText: 'Text', optionsValue : 'Value', optionsAfterRender: $root.afterRender, selectPickerOptions: { optionsArray: $root.menuItemLocations}, event : { change : $root.GetLocationNameFilter}"></select>

            </div>
            <div class="col-lg-4">
                <span id="spLocationNameFilter" class="form-control" data-bind="text:$root.filters.LocationName" />
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                @MasterTPOProductionGroup.lblFilterProcess
            </label>
            <div class="col-lg-7">
                <select class="selectpicker show-tick form-control" id="ddlProcessFilter"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterProcess, optionsText: 'Text' ,optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ListProcessSelectList }, event : { change : $root.SetProcessValue}"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                @MasterTPOProductionGroup.lblFilterStatus
            </label>
            <div class="col-lg-7">
                <select class="selectpicker show-tick form-control" id="ddlStatusFilter"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterStatus, optionsText: 'Text' ,optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ListStatusSelectList }, event : { change : $root.SetStatusValue}"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    using (Html.BeginForm("GenerateExcel", "MasterTPOProductionGroup", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="locationCode" />
                        <input type="hidden" name="status" />
                        <input type="hidden" name="process" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div id="master-item-location" class="table-overflow">
        <table class="table table-striped table-hover">
            <thead>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'ProdGroup'), css:sortCss('ListGroup', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@MasterTPOProductionGroup.lblTitleGroupID</th>
                    <th data-bind="click:sortBy.bind($data,'WorkerCount'), css:sortCss('ListDetail', $data.sortExpression(), $data.sortOrder())">@MasterTPOProductionGroup.lblTItleRegistered</th>
                    <th data-bind="click:sortBy.bind($data,'StatusActive'), css:sortCss('StatusActive', $data.sortExpression(), $data.sortOrder())">@MasterTPOProductionGroup.lblTitleStatusActive</th>
                    <th data-bind="click:sortBy.bind($data,'Remark'), css:sortCss('Remark', $data.sortExpression(), $data.sortOrder())">@MasterTPOProductionGroup.lblTitleRemark</th>
                    <th data-bind="click:sortBy.bind($data,'UpdatedBy'), css:sortCss('UpdatedBy', $data.sortExpression(), $data.sortOrder())">@MasterTPOProductionGroup.lblTitleUpdatedBy</th>
                    <th data-bind="click:sortBy.bind($data,'UpdatedDate'), css:sortCss('UpdatedDate', $data.sortExpression(), $data.sortOrder())">@MasterTPOProductionGroup.lblTitleUpdatedDate</th>
                </tr>
                <tr class="insertRow" data-bind="click: cancelInline.bind(),inlineAddProccess:[$data, $root.newData]">
                    <th class="widthsmall">
                        <span id="GroupIdProcess" data-bind="text:$root.ProcessGroupID"></span>
                        <span id="GroupIdStatus" data-bind="text:$root.StatusEmpID"></span>
                        <input id="txtProdGroup" data-bind="value:$root.ProdGroupCode, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="2" style="display: inline-block; width: 80%" />
                        @*<input data-bind="text:$root.newData.ProdGroupComputed, valueUpdate:'propertyChange'" id="ProdGroupComputedId" class="form-control transparent" maxlength="2" style="display: inline-block; width: 20%" />*@
                    </th>
                    <th><input data-bind="value:$root.newData.WorkerCount, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1" /></th>
                    <th class="center"><input type="checkbox" data-bind="checked:$root.newData.StatusActive" /></th>
                    <th><input data-bind="value:$root.newData.Remark, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th><span data-bind="text:$root.newData.UpdatedBy"></span></th>
                    <th><span data-bind="text:$root.newData.UpdatedDate"></span></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                @*item template*@
                <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                   click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.ProdGroupComputed"></span></td>
                    <td class="current"><span data-bind="text:$data.WorkerCount"></span></td>
                    <td class="current center"><input type="checkbox" data-bind="checked:$data.StatusActive, enable: false" /></td>
                    <td class="current"><span data-bind="text:$data.Remark"></span></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
                @*edit template*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index()),
                                   click: $parent.selectRow.bind($data, $index()),
                                    event: {keydown:$parent.keydown}">
                    <td><span data-bind="text:$data.ProdGroupComputed"></span></td>
                    <td class="current"><input data-bind="value:$data.WorkerCount, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1" /></td>
                    <td class="current center"><input type="checkbox" data-bind="checked:$data.StatusActive" /></td>
                    <td class="current"><input data-bind="value:$data.Remark,tabToNext:[$parent,$data], valueUpdate:'afterkeydown'" class="form-control transparent" /></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="6" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>

</div>
@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">

    (function(app) {
        app.EditGrid = function() {
            var self = this;
            self.itemLocations = @Html.Raw(Json.Encode(@Model.LocationDescs));
            self.menuItemLocations = ko.observableArray(@Html.Raw(Json.Encode(@Model.LocationLists)));
            self.initialized = ko.observable(false);

            self.filterLocation = ko.observable('');
            self.LocationCode = ko.observable(ko.utils.unwrapObservable(self.filterLocation));
            self.ProdGroupCode = ko.observable('');
            self.filterProcess = ko.observable('');
            self.ProcessGroup = ko.observable(ko.utils.unwrapObservable(self.filterProcess));
            self.filterStatus = ko.observable('');
            self.StatusEmp = ko.observable(ko.utils.unwrapObservable(self.filterStatus));

            self.ProcessGroupID = ko.observable('');
            self.StatusEmpID = ko.observable('');

            self.GetLocationNameFilter = function() {
                self.filters.LocationName = "";
                for (var i = 0; i < self.itemLocations.length; i++) {
                    if (self.itemLocations[i].LocationCode == self.filterLocation()) {
                        self.filters.LocationName = self.itemLocations[i].LocationName;
                        break;
                    }
                }
                $('#spLocationNameFilter').html(self.filters.LocationName);

                self.ProcessGroup('');
                self.StatusEmp('');

                self.GetGenEmpStatusByLocationCode();
                self.GetProcessSettingByLocationCode();
            }.bind(this);

            self.GetDefaultLocationNameFilter = function() {
                var result = "";
                for (var i = 0; i < self.itemLocations.length; i++) {
                    if (self.itemLocations[i].LocationCode == $("#ddlLocationFilter").val()) {
                        result = self.itemLocations[i].LocationName;
                        break;
                    }
                }
                self.GetGenEmpStatusByLocationCode();
                self.GetProcessSettingByLocationCode();
                return result;
            };

            self.afterRender = function(options, item)
            {
                var locDesc;
                for (var i = 0; i < self.itemLocations.length; i++) {
                    if (self.itemLocations[i].LocationCode == item.Value) {
                        locDesc = self.itemLocations[i].LocationName;
                        break;
                    }
                }

                $(options).attr('title', item.Value);
                $(options).attr(
                    'data-content',
                    "<span class='text'><span style='width: 35px; display: inline-block;'>" + item.Value + "</span> - " + locDesc + "</span>"
                );

            }

            self.ListStatusSelectList = ko.observableArray();
            self.GetGenEmpStatusByLocationCode = function() {
                $.ajax({
                    url: @Html.BaseUrl("MasterTPOProductionGroup/GetGenEmpStatusListByLocationCode"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { locationCode: $("#ddlLocationFilter").val() },
                    dataType: 'json',
                    success: function(data) {
                        var listModel = [{
                            "Text"  : "@MasterTPOProductionGroup.lblFilterStatusAll",
                            "Value" : "",
                            "ID"    : null
                        }];
                        $('#ddlStatusFilter').find('option').remove();
                        $('#ddlStatusFilter').selectpicker('refresh');
                        $.each(data, function(index, value) {
                            listModel.push({
                                "Text"  : value.StatusEmp,
                                "Value" : value.StatusEmp,
                                "ID"    : value.StatusIdentifier
                            });
                        });

                        self.ListStatusSelectList(listModel);
                    }
                });
            };

            self.ListProcessSelectList = ko.observableArray();
            self.GetProcessSettingByLocationCode = function() {
                $.ajax({
                    url: @Html.BaseUrl("MasterTPOProductionGroup/GetGenLocProcessSettingListByLocationCode"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { locationCode: $("#ddlLocationFilter").val() },
                        dataType: 'json',
                        success: function(data) {
                            var listModel = [{
                                "Text"  : "@MasterTPOProductionGroup.lblFilterProcessAll",
                                "Value" : "",
                                "ID"    : null
                            }];
                            $('#ddlProcessFilter').find('option').remove();
                            $('#ddlProcessFilter').selectpicker('refresh');
                            
                            $.each(data, function(index, value) {
                                listModel.push({
                                    "Text"  : value.ProcessGroup,
                                    "Value" : value.ProcessGroup,
                                    "ID"    : value.MstGenProcess.ProcessIdentifier
                                });
                            });
                            
                            data.unshift({"Text" : "@MasterTPOProductionGroup.lblFilterProcessAll", "Value" : ""});
                            
                            self.ListProcessSelectList(listModel);
                    }
                });
            };

            self.SetProcessValue = function() {
                var value = ' ';
                if (self.filterProcess() != 'undefined') {
                    value = self.filterProcess();
                    var idx = self.ListProcessSelectList().map(function(e) { return e.Value}).indexOf(value);

                    if (idx) {
                        self.ProcessGroupID(self.ListProcessSelectList()[idx].ID);
                    } else {
                        self.ProcessGroupID('');
                    }

                    self.newData.ProcessGroup(value);
                }
                    
                //console.log(value);
            };

            self.SetStatusValue = function() {
                var value = ' ';
                if (self.filterStatus() != 'undefined') {
                    value = self.filterStatus();
                
                    var idx = self.ListStatusSelectList().map(function(e) { return e.Value}).indexOf(value);

                    if (idx) {
                        self.StatusEmpID(self.ListStatusSelectList()[idx].ID);
                    } else {
                        self.StatusEmpID('');
                    }
                    
                    self.newData.StatusEmp(value);
                }
                    
            };

            self.ProdGroupComputed = ko.computed({
                read: function() {
                    //console.log(self.IdProcess() + self.IdStatus() + self.ProdGroupCode());
                    return self.ProcessGroupID() + self.StatusEmpID() + self.ProdGroupCode(); // 'fetched' from an array.
                },
                write: function(value) {
                    //update your self.chosenAge().population value here
                },
                owner: self

                //console.log(self.IdProcess());
                //console.log(self.IdStatus());
                //console.log(self.ProdGroupCode());
                //return self.IdProcess() + self.IdStatus() + self.ProdGroupCode();
            });

            self.newData = {
                ProdGroupComputed: self.ProdGroupComputed, //ko.observable(''),
                ProcessGroup: ko.observable(''),
                LocationCode: ko.observable('@Model.DefaultLocation'),
                StatusEmp: ko.observable(''),
                StatusActive: ko.observable(true),
                Remark: ko.observable(''),
                WorkerCount: ko.observable('')
                //IdProcess: self.IdProcess,
                //IdStatus: self.IdStatus
                //ProdGroupCode: ko.observable('')
            };

            self.filters = {
                LocationName: self.GetDefaultLocationNameFilter()
            };

            //description: init gridView
            self.gridView = new app.GridViewModel({
                Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "ProdGroup", SortOrder: "ASC", LocationCode: self.filterLocation, Process: self.filterProcess, Status: self.filterStatus },
                DataSourceUrl: @Html.BaseUrl("MasterTPOProductionGroup/GetTPOProductionGroup"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            // Field Validations
            self.gridView.applyValidationRules = function(entity) {

                self.RemoveNotification();

                //console.log(entity.ProdGroupComputed());
                //if (entity.ProdGroupComputed() != "") {
                entity.ProdGroupComputed.extend({
                    minLength: {
                        params: 4,
                        message: "<strong>Group ID</strong> cannot be empty or have less than two digits!",
                        maxLenght: 4
                    }
                });
                //} else {
                //entity.ProdGroupComputed.extend({
                //    required: {
                //        message: "<strong>Group ID</strong> cannot be empty!",
                //    }
                //});
                //}
                if (typeof entity.ProcessGroupID !== 'undefined') {
                    entity.ProcessGroup.extend({
                        required: {
                            message: "<strong>Process</strong> cannot be empty!",
                        }
                    });
                }
                //console.log(entity.IdStatus());
                if (typeof entity.StatusEmpID != 'undefined') {
                    entity.StatusEmp.extend({
                        required: {
                            message: "<strong>Status</strong> cannot be empty!",
                        }
                    });
                }

                entity.Remark.extend({
                    required: {
                        message: "<strong>Remark</strong> cannot be empty!",
                        onlyIf: function() {
                            return entity.StatusActive() === false;
                        }
                    }
                });
            };

            // Reset Fields for Insert Row
            self.gridView.resetDefault = function(viewModel) {
                //viewModel.ProdGroupCode('');
                //viewModel.ProcessGroup('');
                //viewModel.StatusEmp('');
                viewModel.Remark('');
                viewModel.WorkerCount('');
                //viewModel.ProdGroupComputed('');
                //$('#txtProdGroup').removeAttr('value');
                self.ProdGroupCode('');
                //self.ProcessGroupID('');
                //self.StatusEmpID('');
            };

            //description: save bulk data
            self.saveData = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "Parameters": { "LocationCode": self.filterLocation(), "Process": self.filterProcess(), "Status": self.filterStatus() },
                    "New": self.gridView.listNewItems(),
                    "Edit": self.gridView.listEditItems()
                };
                datas = JSON.stringify(datas);

                var sortExpr = typeof self.gridView.sortExpression() == 'undefined' ? 'ProdGroup' : self.gridView.sortExpression();

                $.ajax({
                    url: @Html.BaseUrl("MasterTPOProductionGroup/SaveAllTPOProductionGroup"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        if (data.New) {
                            $.each(data.New, function(k, value) {
                                if (value)
                                    SKTIS.Helper.ResponseNotification(value, "Insert Master TPO Production Group", "");
                            });
                        }

                        if (data.Edit) {
                            $.each(data.Edit, function(k, value) {
                                if (value)
                                    SKTIS.Helper.ResponseNotification(value, "Edit Master TPO Production Group", "");
                            });
                        }

                        self.gridView.sort(sortExpr, self.gridView.sortOrder());
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }
                }).done(function() {
                    self.search();
                });
            };

            self.generateExcel = function(formElement) {
                $(formElement).find("input[name=locationCode]").val(self.LocationCode),
                    $(formElement).find("input[name=status]").val(self.filterStatus()),
                    $(formElement).find("input[name=process]").val(self.filterProcess());
                return true;
            };

            //description: load data
            self.search = function() {

                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                } else {
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }

                self.LocationCode = self.filterLocation();
                self.Process = self.filterProcess();
                self.Status = self.filterStatus();

                self.gridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message, 'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };
            };

            // Check whether New or Edit data is existing and not saved to database yet (on Request action)
            SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
            self.LocationCode( ko.utils.unwrapObservable(self.filterLocation) );
            self.ProcessGroup( ko.utils.unwrapObservable(self.filterProcess) );
            self.StatusEmp( ko.utils.unwrapObservable(self.filterStatus) );

            // Execute Everything you need when DOM is ready
            $(document).ready(function() {
                self.GetLocationNameFilter();
                self.search();
            });

        };
        ko.applyBindings(new app.EditGrid());
    })(app = this.app || {});
    </script>
}