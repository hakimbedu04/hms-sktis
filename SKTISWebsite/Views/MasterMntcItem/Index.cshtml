@using SKTISWebsite.Helper
@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MasterMntcItem
@model SKTISWebsite.Models.MasterMntcItem.InitMntcItem

@{Html.SetPageTitle(@MasterMntcItem.PageTitle);}
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">@MasterMntcItem.lblFilterItemType</label>
            <div class="col-lg-5">
                @Html.DropDownList("ItemType", Model.ItemTypes, @CommonLabel.ddlSelectAll, new Dictionary<string, object> {
                                                  { "data-bind", "value:$root.filterItemType" }, { "class", "selectpicker show-tick form-control" },
                                                  {"data-live-search","true"},{"id","Basic"} })
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString())) {
                    using (Html.BeginForm("GenerateExcel", "MasterMntcItem", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="itemType" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped table-hover">
            <thead>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'ItemCode'), css:sortCss('ItemCode', $data.sortExpression(), $data.sortOrder())" class="widthdg15">@MasterMntcItem.lblTitleItemCode</th>
                    <th data-bind="click:sortBy.bind($data,'ItemDescription'), css:sortCss('ItemDescription', $data.sortExpression(), $data.sortOrder())" class="widthmedium">@MasterMntcItem.lblTitleItemDescription</th>
                    <th data-bind="click:sortBy.bind($data,'ItemType'), css:sortCss('ItemType', $data.sortExpression(), $data.sortOrder())" class="widthdg15">@MasterMntcItem.lblTitleItemType</th>
                    <th data-bind="click:sortBy.bind($data,'UOM'), css:sortCss('UOM', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@MasterMntcItem.lblTitleUom</th>
                    <th data-bind="click:sortBy.bind($data,'PriceType'), css:sortCss('PriceType', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@MasterMntcItem.lblTitlePriceType</th>
                    <th data-bind="click:sortBy.bind($data,'StatusActive'), css:sortCss('StatusActive', $data.sortExpression(), $data.sortOrder())">@MasterMntcItem.lblTitleStatusActive</th>
                    <th data-bind="click:sortBy.bind($data,'Remark'), css:sortCss('Remark', $data.sortExpression(), $data.sortOrder())" class="widthmedium">@MasterMntcItem.lblRemark</th>
                    <th class="widthdate">@MasterMntcItem.lblTitleUpdatedBy</th>
                    <th class="widthdate">@MasterMntcItem.lblTitleUpdatedDate</th>
                </tr>
                <tr class="insertRow" data-bind="click: cancelInline.bind(),inlineAddProccess:[$data,$root.newData]">
                    <th class="widthdg15"><input data-bind="value:$root.newData.ItemCode, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th class="widthmedium"><input data-bind="value:$root.newData.ItemDescription, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th class="widthdg15">
                        @Html.DropDownList("ItemType", Model.ItemTypes, new Dictionary<string, object> { { "data-bind", "value:$root.newData.ItemType" },
                                                               { "class", "selectpicker show-tick form-control" },{"data-live-search","true"} })
                    </th>
                    <th class="widthsmall">
                        @Html.DropDownList("uom", Model.UOMs, new Dictionary<string, object> { { "data-bind", "value:$root.newData.UOM" },
                                                                { "class", "selectpicker show-tick form-control" },{"data-live-search","true"}})
                    </th>
                    <th class="widthsmall">
                        @Html.DropDownList("ItemType", Model.PriceTypes, new Dictionary<string, object> { { "data-bind", "value:$root.newData.PriceType" },
                                                                { "class", "selectpicker show-tick form-control" }, { "data-live-search", "true" } })
                    </th>
                    <th class="current center"><input type="checkbox" data-bind="checked:$root.newData.StatusActive" /></th>
                    <th class="current widthmedium"><input data-bind="value:$root.newData.Remark,tabToNext:[$parent,$data], valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th class="widthdate"><span data-bind="text:$root.newData.UpdatedBy"></span></th>
                    <th class="widthdate"><span data-bind="text:$root.newData.UpdatedDate"></span></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                   click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td class="current"><span data-bind="text:$data.ItemDescription"></span></td>
                    <td class="current"><span data-bind="text:$data.ItemType"></span></td>
                    <td class="current"><span data-bind="text:$data.UOM"></span></td>
                    <td class="current"><span data-bind="text:$data.PriceType"></span></td>
                    <td class="center current"><input type="checkbox" data-bind="checked:$data.StatusActive, enable: false" /></td>
                    <td class="current"><span data-bind="text:$data.Remark"></span></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>

                </tr>
                @*edit template*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index()),
                                   click: $parent.selectRow.bind($data, $index())">

                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td class="current"><input data-bind="value:$data.ItemDescription, valueUpdate: 'afterkeydown'" class="form-control transparent"/></td>
                    <td class="current">
                        @Html.DropDownList("ItemType", Model.ItemTypes, new Dictionary<string, object> { { "data-bind", "value:$data.ItemType" },
                                                               { "class", "selectpicker show-tick form-control" },{"data-live-search","true"} })
                    </td>
                    <td class="current">
                        @Html.DropDownList("uom", Model.UOMs, new Dictionary<string, object> { { "data-bind", "value:$data.UOM" },
                                                                { "class", "selectpicker show-tick form-control" },{"data-live-search","true"}})
                    </td>
                    <td class="current">
                        @Html.DropDownList("ItemType", Model.PriceTypes, new Dictionary<string, object> { { "data-bind", "value:$data.PriceType" },
                                                                { "class", "selectpicker show-tick form-control" }, { "data-live-search", "true" } })
                    </td>
                    <td class="center current"><input type="checkbox" data-bind="checked:$data.StatusActive" /></td>
                    <td class="current"><input data-bind="value:$data.Remark,tabToNext:[$parent,$data], valueUpdate: 'afterkeydown'" class="form-control transparent" /></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="9" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>
</div>

@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">
    (function (app) {
        app.EditGrid = function () {
            var self = this;

            //description : filter
            self.filterItemType = ko.observable('');
            self.filterExcelItemType = self.filterItemType();

            self.newData = {
                ItemCode: ko.observableArray([]),
                ItemDescription: ko.observable(''),
                ItemType: ko.observableArray([]),
                UOM: ko.observableArray([]),
                PriceType: ko.observableArray([]),
                StatusActive: ko.observable(true),
                Remark: ko.observable(''),

            };

            //description: init gridView
            self.gridView = new app.GridViewModel({
                Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", ItemType: self.filterItemType },
                DataSourceUrl:  @Html.BaseUrl("MasterMntcItem/GetMstMaintenanceItems"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 0
            });

            //Reset Fields for Insert Row
            self.gridView.resetDefault = function (viewModel) {
                viewModel.ItemCode('');
                viewModel.ItemDescription('');
                viewModel.ItemType('');
                viewModel.UOM('');
                viewModel.PriceType('');
                viewModel.StatusActive(true);
                viewModel.Remark('');
            };

            //description: validations
            self.gridView.applyValidationRules = function (entity) {

                self.RemoveNotification();

                entity.ItemCode.extend({
                    required: {
                        message: "<strong>Item Code</strong> cannot be empty!"
                    }
                });

                entity.ItemDescription.extend({
                    required: {
                        message: "<strong>Item Description</strong> cannot be empty!"
                    }
                });
                entity.ItemType.extend({
                    required: {
                        message: "<strong>Item Type</strong> cannot be empty!"
                    }
                });
                entity.UOM.extend({
                    required: {
                        message: "<strong>UOM</strong> cannot be empty!"
                    }
                });
                entity.PriceType.extend({
                    required: {
                        message: "<strong>Price Type</strong> cannot be empty!"
                    }
                });
                entity.Remark.extend({
                    required: {
                        message: "<strong>Remark</strong> cannot be empty!",
                        onlyIf: function() {
                            return entity.StatusActive() === false;
                        }
                    }
                });
            };

            //description: save bulk data
            self.saveData = function () {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "New": self.gridView.listNewItems(),
                    "Edit": self.gridView.listEditItems()
                };

                datas = JSON.stringify(datas);
                $.ajax({
                    url:  @Html.BaseUrl("MasterMntcItem/SaveMaintenanceItems"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function (data) {
                            if (data.New) {
                                $.each(data.New, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Insert Item", value.ItemCode);
                                });
                            }

                            if (data.Edit) {
                                $.each(data.Edit, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Edit Item", value.ItemCode);
                                });
                            }

                            self.gridView.sort('UpdatedDate', 'DESC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                        }
                    });
                };

                self.generateExcel = function (formElement) {
                    $(formElement).find("input[name=itemType]").val(self.filterExcelItemType);
                    return true;
                };

                //description: load data
                self.search = function () {
                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    }else{
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }
                    self.filterExcelItemType = self.filterItemType();
                    self.gridView.search({}, function (response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message,'error');
                            $('.empty-row-message').html(response.message);
                        }else if (response.status == 'Empty') {

                            self.RemoveNotification();

                            //SKTIS.Helper.Notification(response.message,'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });

                    self.RemoveNotification = function() {
                        if ($('#noty_top_layout_container').length > 0) {
                            $('#noty_top_layout_container').remove();
                        }
                    };
                };
                self.search();

                // Check whether New or Edit data is existing and not saved to database yet (on Request action)
                SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
            };
            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});
    </script>
}