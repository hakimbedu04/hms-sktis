@model SKTISWebsite.Models.WagesReportAbsents.InitWagesReportAbsentsDetailViewModel
@using HMS.SKTIS.Application.Resources
@using SKTISWebsite.Helper
@{ Html.SetPageTitle("Absents Report Detail"); }
                            
<div class="col-lg-12" data-bind="with: gridView">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-3">
                Employee
            </label>
            <div class="col-lg-2 offset-right">
                @Html.TextBoxFor(m => m.DefaultEmployeeID, new { Value = Model.DefaultEmployeeID ?? "", @class = "form-control", disabled = "disabled" })
            </div>
            <div class="col-lg-4">
                @Html.TextBoxFor(m => m.DefaultEmployee, new { Value = Model.DefaultEmployee ?? "", @class = "form-control", disabled = "disabled" })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                Location
            </label>
            <div class="col-lg-2 offset-right">
                @Html.TextBoxFor(m => m.DefaultLocation, new { Value = Model.DefaultLocation ?? "", @class = "form-control", disabled = "disabled" })
            </div>
            @*<div class="col-lg-4">
                @Html.TextBoxFor(m => m.DefaultLocationName, new { Value = Model.DefaultLocationName ?? "", @class = "form-control", disabled = "disabled" })
            </div>*@
        </div>

        <div class="row">
            <label class="form-label col-lg-3">
                Unit
            </label>
            <div class="col-lg-2 offset-right">
                @Html.TextBoxFor(m => m.DefaultUnit, new { Value = Model.DefaultUnit ?? "", @class = "form-control", disabled = "disabled" })
            </div>
        </div>

        <div class="row">
            <label class="form-label col-lg-3">
                Process
            </label>
            <div class="col-lg-2 offset-right">
                @Html.TextBoxFor(m => m.DefaultProcess, new { Value = Model.DefaultProcess ?? "", @class = "form-control", disabled = "disabled" })
            </div>
        </div>

        <div class="row">
            <label class="form-label col-lg-3">
                Group
            </label>
            <div class="col-lg-2 offset-right">
                @Html.TextBoxFor(m => m.DefaultGroup, new { Value = Model.DefaultGroup ?? "", @class = "form-control", disabled = "disabled" })
            </div>
        </div>
    </div>

    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-3">
                <input type="radio" name="period" value="Year" id="rdYear" data-bind="event : { change : $root.radioChange }" disabled/>
                Year
            </label>
            <div class="col-lg-2 offset-right">
                @Html.DropDownList("filterYear", Model.YearSelectList,
                             new Dictionary<string, object> { { "data-bind", "value:$root.filterYear, event : { change : $root.onYearSelectedChange}, disable:true" },
                { "class", "selectpicker show-tick form-controlt" },
                {"data-live-search","true"},{"id","filterYear"} })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                <input type="radio" name="period" value="YearMonth" id="rdYearMonth" data-bind="event : { change : $root.radioChange }, disable:true" />
                Year Month
            </label>
            <div class="col-lg-2 offset-right">
                @Html.DropDownList("filterYearMonthFrom", Model.YearSelectList, new
                {
                    @class = "selectpicker show-tick form-control",
                    data_live_search = "true",
                    data_bind = "disable:true , selectPicker: $root.filterYearMonthFrom, event: { change: $root.onYearMonthFromSelectedChange}",
                })
            </div>
            <div class="col-lg-2">
                @Html.DropDownList("filterMonthFrom", Model.MonthSelectList, new
                {
                    @class = "selectpicker show-tick form-control",
                    data_live_search = "true",
                    data_bind = "disable:true ,selectPicker: $root.filterMonthFrom",
                })
            </div>
            <label class="form-label col-lg-1">
                To
            </label>
            <div class="col-lg-2 offset-right">
                @Html.DropDownList("filterYearMonthTo", Model.YearSelectList, new
                {
                    @class = "selectpicker show-tick form-control",
                    data_live_search = "true",
                    data_bind = "disable:true , selectPicker: $root.filterYearMonthTo, event: { change: $root.onYearMonthToSelectedChange}",
                })
            </div>
            <div class="col-lg-2">
                @Html.DropDownList("filterMonthTo", Model.MonthSelectList, new
                {
                    @class = "selectpicker show-tick form-control",
                    data_live_search = "true",
                    data_bind = "disable:true , selectPicker: $root.filterMonthTo",
                })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                <input type="radio" name="period" value="YearWeek" id="rdYearWeek" data-bind="event : { change : $root.radioChange }, disable:true" />
                Year Week
            </label>
            <div class="col-lg-2 offset-right">
                @Html.DropDownList("filterYearWeekFrom", Model.YearSelectList,
                                      new Dictionary<string, object> { { "data-bind", "value:$root.filterYearWeekFrom, event : { change : $root.onYearWeekFromSelectedChange}, disable:true" },
                {"class", "selectpicker show-tick form-controlt" },
                {"data-live-search","true"},{"id","filterYearWeekFrom"} })
            </div>
            <div class="col-lg-2">
                <select id="filterWeekFrom" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="disable:true ,selectPicker: $root.filterWeekFrom, optionsText: 'Value', optionsValue : 'Text',
                                selectPickerOptions: { optionsArray: $root.filterWeekFromFromSelectList }"></select>
            </div>
            <label class="form-label col-lg-1">
                To
            </label>
            <div class="col-lg-2 offset-right">
                @Html.DropDownList("filterYearWeekTo", Model.YearSelectList,
                                      new Dictionary<string, object> { { "data-bind", "value:$root.filterYearWeekTo, event : { change : $root.onYearWeekToSelectedChange}, disable:true" },
                {"class", "selectpicker show-tick form-controlt" },
                {"data-live-search","true"},{"id","filterYearWeekTo"} })
            </div>
            <div class="col-lg-2">
                <select id="filterWeekTo" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="disable:true , selectPicker: $root.filterWeekTo, optionsText: 'Value', optionsValue : 'Text',
                                selectPickerOptions: { optionsArray: $root.filterWeekToFromSelectList }"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                <input type="radio" name="period" value="Date" id="rdDate" data-bind="event : { change : $root.radioChange }, disable:true" />
                Date
            </label>
            <div class="col-lg-4">
                <div id="filterDateFrom" class='input-group date time' data-bind="dateTimePicker: $root.filterDateFrom, value: $root.filterDateFrom, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, ignoreReadonly: true}">
                    <input id="dtFilterFrom" class="form-control" disabled/>
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar" ></span>
                    </span>
                </div>
            </div>
            <label class="form-label col-lg-1">
                To
            </label>
            <div class="col-lg-4">
                <div id="filterDateTo" class='input-group date time' data-bind="dateTimePicker: $root.filterDateTo, value: $root.filterDateTo, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, ignoreReadonly: true}">
                    <input id="dtFilterTo" class="form-control" disabled/>
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>                
                @using (Html.BeginForm("GenerateExcelAbsentsEmployeeDetail", "WagesReportAbsents", FormMethod.Post, new { @data_bind = "submit: $root.GenerateExcelAbsentsEmployeeDetail" }))
                {
                    <input type="hidden" name="employeeID">
                    <input type="hidden" name="filterType">
                    <input type="hidden" name="year">
                    <input type="hidden" name="group">
                    
                    <input type="hidden" name="yearMonthFrom">
                    <input type="hidden" name="monthFrom">
                    <input type="hidden" name="yearMonthTo">
                    <input type="hidden" name="monthTo">

                    <input type="hidden" name="yearWeekFrom">
                    <input type="hidden" name="weekFrom">
                    <input type="hidden" name="yearWeekTo">
                    <input type="hidden" name="weekTo">

                    <input type="hidden" name="dateFrom">
                    <input type="hidden" name="dateTo">

                    <button type="submit" class="btn btn-primary">Excel</button>
                }
                <button type="button" class="btn btn-primary" data-bind="click:$root.BackToList">Back To List</button>
                @*@Html.ActionLink("Back To List", "Index", new { controller = "WagesReportAbsentsGroup" }, new { @class = "btn btn-primary" })*@
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped">
            <thead>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'EmployeeID'), css:sortCss('EmployeeID', $data.sortExpression(), $data.sortOrder())">Emp ID</th>
                    <th data-bind="click:sortBy.bind($data,'EmployeeName'), css:sortCss('EmployeeName', $data.sortExpression(), $data.sortOrder())">Emp Name</th>
                    <th data-bind="click:sortBy.bind($data,'EmployeeNumber'), css:sortCss('EmployeeNumber', $data.sortExpression(), $data.sortOrder())">Emp No</th>
                    <th data-bind="click:sortBy.bind($data,'AbsentType'), css:sortCss('AbsentType', $data.sortExpression(), $data.sortOrder())">Absent Type</th>
                    <th data-bind="click:sortBy.bind($data,'ProductionDate'), css:sortCss('ProductionDate', $data.sortExpression(), $data.sortOrder())">Date</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                <tr>
                    <td><span data-bind="text:$data.EmployeeID"></span></td>
                    <td><span data-bind="text:$data.EmployeeName"></span></td>
                    <td><span data-bind="text:$data.EmployeeNumber"></span></td>
                    <td><span data-bind="text:$data.AbsentType"></span></td>
                    <td><span data-bind="text:$data.ProductionDate"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="41" class="empty-row-message">
                        <div class="loader"></div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>
</div>
@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">
        //$(document).ready(function() {
        //    $('#rdYear').attr('checked', true);
        //    $('#rdYear').change();
        //});

        var cfilterType = getCookie("filterType");
        var startDate = getCookie("startDate");
        var endDate = getCookie("endDate");
        var cYear = getCookie("Year");
        var cYearMonthStart = getCookie("YearMonthStart");
        var cYearMonthEnd = getCookie("YearMonthEnd");
        var cMonthStart = getCookie("MonthStart");
        var cMonthEnd = getCookie("MonthEnd");
        var cYearWeekStart = getCookie("YearWeekStart");
        var cYearWeekEnd = getCookie("YearWeekEnd");
        var cWeekStart = getCookie("WeekStart");
        var cWeekEnd = getCookie("WeekEnd");
        var cprocess = getCookie("ProcessGroup");
        $(document).ready(function() {
            if(cfilterType == 'Date') {
                $('#rdDate').attr('checked', true);
                $('#rdDate').change();
            }
            if(cfilterType == 'YearWeek') {
                $('#rdYearWeek').attr('checked', true);
                $('#rdYearWeek').change();
            }
            if(cfilterType == 'YearMonth') {
                $('#rdYearMonth').attr('checked', true);
                $('#rdYearMonth').change();
            }
            if(cfilterType == 'Year') {
                $('#rdYear').attr('checked', true);
                $('#rdYear').change();
            }

        });

        (function(app) {
            app.EditGrid = function() {
                var self = this;
                self.firstLoad = ko.observable(true);

                
                self.filterLocationCode = ko.observable('@Model.DefaultLocation');
                self.filterUnit = ko.observable('@Model.DefaultUnit');
                self.filterProcess = ko.observable('@Model.DefaultProcess');
                self.filterGroup = ko.observable('@Model.DefaultGroup');

                self.filterType = ko.observable(cfilterType);

                self.filterYear = ko.observable(cYear);

                self.filterYearMonthFrom = ko.observable(cYearMonthStart);
                self.filterMonthFrom = ko.observable(cMonthStart);
                self.filterYearMonthTo = ko.observable(cYearMonthEnd);
                self.filterMonthTo = ko.observable(cMonthEnd);

                self.filterYearWeekFrom = ko.observable(cYearWeekStart);
                self.filterWeekFrom = ko.observable(cWeekStart);
                self.filterYearWeekTo = ko.observable(cYearWeekEnd);
                self.filterWeekTo = ko.observable(cWeekEnd);

                self.filterDateFrom = ko.observable(startDate);
                self.filterDateTo = ko.observable(endDate);

                self.isLoading = ko.observable(false);


                @*self.EmployeeName = ko.observable('@Model.DefaultEmployee');


                self.filterEmployee = ko.observable('@Model.DefaultEmployee');
                self.filterEmployeeName = ko.observable('');
                self.filterLocationCode = ko.observable('@Model.DefaultLocation');
                self.filterUnit = ko.observable('');
                self.filterProcess = ko.observable('');

                self.filterType = ko.observable('Year');

                self.filterYear = ko.observable('@Model.DefaultYear');

                self.filterYearMonthFrom = ko.observable('@Model.DefaultYear');
                self.filterMonthFrom = ko.observable('@Model.DefaultMonth');
                self.filterYearMonthTo = ko.observable('@Model.DefaultYear');
                self.filterMonthTo = ko.observable('@Model.DefaultMonth');

                self.filterYearWeekFrom = ko.observable('@Model.DefaultYear');
                self.filterWeekFrom = ko.observable('@Model.DefaultWeek');
                self.filterYearWeekTo = ko.observable('@Model.DefaultYear');
                self.filterWeekTo = ko.observable('@Model.DefaultWeek');

                self.filterDateFrom = ko.observable('@Model.DefaultDateFrom');
                self.filterDateTo = ko.observable('@Model.DefaultDateTo');*@

                //self.onfilterEmployeeSelectListChange = function() {
                //    self.getFilterEmployeeName();
                //    self.LocationCodeSelectListChange();                    
                //};

                //// chain dropdown event handler
                //self.LocationCodeSelectListChange = function() {
                //    self.getFilterEmployeeName();
                //    self.getFilterProcessSelectList();                    
                //};
                
                self.radioChange = function() {
                    self.filterType($('input[name=period]:checked').val());
                };

                @*self.getFilterEmployeeName = function() {                    
                    $.ajax({
                        url: @Html.BaseUrl("WagesReportAbsents/GetEmployeeName"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { employeeId : self.filterEmployee() },
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            self.filterEmployeeName(data);
                        }
                    });
                };*@

                // bind dropdown
                @*self.filterUnitSelectList = ko.observableArray([]);
                self.getFilterUnitSelectList = function() {                    
                    $.ajax({
                        url: @Html.BaseUrl("WagesReportAbsents/GetUnitCodeSelectList"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { locationCode : self.filterLocationCode() },
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            var selectList = [];

                            for (var i=0; i<data.length; i++) {
                                if (data[i].Value != 'MTNC')
                                    selectList.push(data[i]);
                            }

                            self.filterUnitSelectList(selectList);
                        }
                    });
                };*@

                //Method Get Process By Location
                @*self.FilterProcessSelectList = ko.observableArray([]);
                self.getFilterProcessSelectList = function() {
                    $.ajax({
                        url: @Html.BaseUrl("WagesReportAbsents/GetProcessByLocationCode"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { locationCode: self.filterLocationCode() },
                        dataType: 'json',
                        success: function(data) {
                            self.FilterProcessSelectList(data);
                        }
                    });
                };*@
                
                self.BackToList = function(){
                    @*window.location = @Html.BaseUrl("WagesReportAbsents/WagesReportAbsentsGroup")+"/"+'@Model.DefaultLocation'+"/"+'@Model.DefaultBrand'+"/"+'@Model.DefaultUnit'+"/"+'@Model.DefaultGroup'+"/"+'@Model.DefaultProcess';*@
                    window.location = @Html.BaseUrl("WagesReportAbsents/WagesReportAbsentsGroup")+"/"+'@Model.DefaultLocation'+"/"+'@Model.DefaultUnit'+"/"+'@Model.DefaultGroup'+"/"+'@Model.DefaultProcess';
                }
                // chain dropdown event handler
                self.onYearWeekFromSelectedChange = function() {
                    self.GetfilterWeekFromFromSelectList();
                };

                self.filterWeekFromFromSelectList = ko.observableArray([]);
                self.GetfilterWeekFromFromSelectList = function() {
                    $.ajax({
                        url: @Html.BaseUrl("WagesReportAbsents/GetWeekByYear"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { year: self.filterYearWeekFrom() },
                        dataType: 'json',
                        success: function(data) {
                            var WeekModel = [];
                            $.each(data, function(index, value) {
                                WeekModel.push({ "Text": value, "Value": value });
                            });
                            self.filterWeekFromFromSelectList(WeekModel);
                            self.filterWeekFrom('@Model.DefaultWeek');
                        }
                    });
                };

                // chain dropdown event handler
                self.onYearWeekToSelectedChange = function() {
                    self.GetfilterWeekToFromSelectList();
                };

                self.filterWeekToFromSelectList = ko.observableArray([]);
                self.GetfilterWeekToFromSelectList = function() {
                    $.ajax({
                        url: @Html.BaseUrl("WagesReportAbsents/GetWeekByYear"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { year: self.filterYearWeekTo() },
                        dataType: 'json',
                        success: function(data) {
                            var WeekModel = [];
                            $.each(data, function(index, value) {
                                WeekModel.push({ "Text": value, "Value": value });
                            });
                            self.filterWeekToFromSelectList(WeekModel);
                            self.filterWeekTo('@Model.DefaultWeek');
                        }
                    });
                };

                //self.getFilterEmployeeName();
                //self.getFilterUnitSelectList();
                //self.getFilterProcessSelectList();
                self.GetfilterWeekFromFromSelectList();
                self.GetfilterWeekToFromSelectList();

                // gridView Initialization
                self.gridView = new app.GridViewModel({
                    Criteria: {
                        PageSize: 10,
                        PageIndex: 1,
                        SortExpression: "TransactionDate",
                        SortOrder: "DESC",
                        EmployeeID: '@Model.DefaultEmployeeID',
                        LocationCode: '@Model.DefaultLocation',
                        UnitCode: '@Model.DefaultUnit',
                        Process: '@Model.DefaultProcess',    
                        GroupCode: '@Model.DefaultGroup',
                        FilterType: self.filterType,
                        Year: self.filterYear,
                        YearMonthFrom: self.filterYearMonthFrom,
                        YearMonthTo: self.filterYearMonthTo,
                        YearWeekFrom: self.filterYearWeekFrom,
                        YearWeekTo: self.filterYearWeekTo,
                        MonthFrom: self.filterMonthFrom,
                        MonthTo: self.filterMonthTo,
                        WeekFrom: self.filterWeekFrom,
                        WeekTo: self.filterWeekTo,
                        DateFrom: self.filterDateFrom,
                        DateTo: self.filterDateTo, 
                        TransactionDate : self.filterDateFrom
                    },
                    DataSourceUrl: @Html.BaseUrl("WagesReportAbsents/GetWagesReportAbsentsDetail"),
                    InlineEdit: true,                    
                });
                
                self.search = function() {
                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    } else {
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }

                    @*self.newDataDaily.UnitCode(self.unitCodeDaily());
                    self.newDataDaily.StartDateAbsent('@Model.TodayDate');

                    self.getProcessByLocationDaily(self.processSelectListDaily, self.locationCodeDaily, self.unitCodeDaily, $('#spProcessSettingCode'));*@

                    self.gridView.search({}, function(response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message, 'error');
                            $('.empty-row-message').html(response.message);
                        } else if (response.status == 'Empty') {
                            self.RemoveNotification();
                            //SKTIS.Helper.Notification(response.message,'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });
                    
                    self.RemoveNotification = function() {
                        if ($('#noty_top_layout_container').length > 0) {
                            $('#noty_top_layout_container').remove();
                        }
                    };
                };
                
                self.search();

                //Method Generate Excel function - Piece Rate
                self.GenerateExcelAbsentsEmployeeDetail = function(formElement) {
                    $(formElement).find("input[name=employeeID]").val(@Model.DefaultEmployeeID);
                    $(formElement).find("input[name=filterType]").val(self.filterType());
                    $(formElement).find("input[name=group]").val(@Model.DefaultGroup);

                    $(formElement).find("input[name=year]").val($('#filterYear').val());

                    $(formElement).find("input[name=yearMonthFrom]").val($('#filterYearMonthFrom').val());
                    $(formElement).find("input[name=monthFrom]").val($('#filterMonthFrom').val());
                    $(formElement).find("input[name=yearMonthTo]").val($('#filterYearMonthTo').val());
                    $(formElement).find("input[name=monthTo]").val($('#filterMonthTo').val());

                    $(formElement).find("input[name=yearWeekFrom]").val($('#filterYearWeekFrom').val());
                    $(formElement).find("input[name=weekFrom]").val($('#filterWeekFrom').val());
                    $(formElement).find("input[name=yearWeekTo]").val($('#filterYearWeekTo').val());
                    $(formElement).find("input[name=weekTo]").val($('#filterWeekTo').val());

                    $(formElement).find("input[name=dateFrom]").val($('#filterDateFrom').val());
                    $(formElement).find("input[name=dateTo]").val($('#filterDateTo').val());
                    return true;
                };
   
            };
            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});

    </script>
}