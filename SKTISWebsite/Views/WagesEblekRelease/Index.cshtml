@model SKTISWebsite.Models.WagesEblekRelease.InitWagesEblekReleaseViewModel
@using HMS.SKTIS.Application.Resources
@using SKTISWebsite.Helper
@using HMS.SKTIS.Core
@{ Html.SetPageTitle(" Production Entry Release"); }

<div class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">
                Location
            </label>
            <div class="col-lg-2 offset-right">
                @*@Html.DropDownList("filterLocationCode", new SelectList(Model.LocationCode, "LocationCode", "LocationCode"),
                new
                {
                    @class = "selectpicker show-tick form-control",
                    id = "filterLocationCode",
                    data_live_search = "true",
                    data_bind = "selectPicker: $root.filterLocation, event : { change : $root.onFilterLocationChange }"
                })*@
                <select id="ddlFilterLocationCode"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterLocation, optionsText: 'LocationCode', optionsValue : 'LocationCode', optionsAfterRender: locationDesc, selectPickerOptions: { optionsArray: $root.itemLocations }, event : { change : $root.onFilterLocationChange}"></select>
            </div>
            <div class="col-lg-4">
                <input type="text" class="form-control" data-bind="value: $root.filterLocationName" disabled>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Unit
            </label>
            <div class="col-lg-6">
                <select class="selectpicker show-tick form-control" id="filterUnit"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterUnit, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.filterUnitSelectList }"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Shift
            </label>
            <div class="col-lg-6">
                <select class="selectpicker show-tick form-control" id="filterShift"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterShift, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.filterShiftSelectList }"></select>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        @*<div class="row">
            <label class="form-label col-lg-3">
                KPS Year
            </label>
            <div class="col-lg-6">
                @Html.DropDownList("filterYear", Model.KpsYear, new
                {
                    @class = "selectpicker show-tick form-control",
                    data_live_search = "true",
                    data_bind = "selectPicker: $root.filterYear, event : { change : $root.onfilterYearChange }"
                })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                KPS Week
            </label>
            <div class="col-lg-6">
                @Html.DropDownList("filterWeek", Model.KpsWeek, new
                {
                    @class = "selectpicker show-tick form-control",
                    data_live_search = "true",
                    data_bind = "selectPicker: $root.filterWeek, event : { change : $root.onfilterWeekChange }"
                })
            </div>
        </div>*@
        <div class="row">
            <label class="form-label col-lg-3">
                Date
            </label>
            <div class="col-lg-4">
                @*@Html.DropDownList("filterDate", Model.Date, new
                {
                    @class = "selectpicker show-tick form-control",
                    data_live_search = "true",
                    data_bind = "selectPicker: $root.filterDate"
                })*@
                <select class="selectpicker show-tick form-control" id="filterDate"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterDate, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.filterDateSelectList }"></select>
            </div>
            <label class="form-label col-lg-1">
                To
            </label>
            <div class="col-lg-4">
                <select class="selectpicker show-tick form-control" id="filterDateTo"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterDateTo, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.filterDateToSelectList }"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(Enums.ButtonName.View.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click: $root.search, enable: !$root.isBusy()">View</button>
                }
                @if (ViewBag.ButtonAccess.Contains(Enums.ButtonName.Add.ToString()))
{
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#releaseadd" data-bind="enable: !$root.isBusy()">Add</button>
}
                @if (ViewBag.ButtonAccess.Contains(Enums.ButtonName.Delete.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click: $root.delete, enable: !$root.isBusy()">Delete</button>
                }
                @if (ViewBag.ButtonAccess.Contains(Enums.ButtonName.SendApproval.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click: $root.sendApproval,enable:$root.canSendApproval && $root.RoleSendApproval() && !$root.isBusy()">Send Approval</button>
                }
                @if (ViewBag.ButtonAccess.Contains(Enums.ButtonName.Excel.ToString()))
                {
                    using (Html.BeginForm("GenerateExcel", "WagesEblekRelease", FormMethod.Post))
                    {
                        <input type="hidden" name="LocationCode" data-bind="value: $root.filterLocation" />
                        <input type="hidden" name="Unit" data-bind="value: $root.filterUnit" />
                        <input type="hidden" name="Shift" data-bind="value: $root.filterShift" />
                        @*<input type="hidden" name="KpsYear" data-bind="value: $root.filterYear" />
                        <input type="hidden" name="KpsWeek" data-bind="value: $root.filterWeek" />*@
                        <input type="hidden" name="Date" data-bind="value: $root.filterDate" />
                        <input type="hidden" name="DateTo" data-bind="value: $root.filterDateTo" />
                        <button type="submit" class="btn btn-primary" data-bind="enable: !$root.isBusy()">@CommonLabel.btnExcel</button>
                    }
                }
            </div>
        </div>
    </div>
    <div data-bind="with: gridView">
        <div class="table-overflow">
            <table class="table table-striped table-hover" id="tableMaster">
                <thead>
                    <tr class="head">
                        <th><input type="checkbox" id="checkboxAll" /></th>
                        <th>Eblek Date</th>
                        <th>Brand Code</th>
                        <th>Group</th>
                        <th>Remark</th>
                    </tr>
                </thead>
                <tbody data-bind='foreach: listDataItems'>
                    @*insert template*@
                    <tr data-bind="if: ($parent.editingRowIndex() !== $index()), click: $parent.editInline3.bind($data,$index())">
                        <td style="text-align: center">
                            <input type="checkbox" data-bind="checked: $data.Checkbox, enable:ko.utils.unwrapObservable($data.IsLocked),click:$root.onChecked"/>
                            @*<input type="checkbox" data-bind="checked: $data.Checkbox, click:$root.onChecked" />*@
                            @*<input type="hidden" data-bind="value: $data.ProductionEntryCode" />*@
                        </td>
                        <td ><span data-bind="text: $data.ExePlantProductionEntryVerification.ProductionDate"></span></td>
                        <td class="center"><span data-bind="text: $data.ExePlantProductionEntryVerification.BrandCode"></span></td>
                        <td class="center"><span data-bind="text: $data.ExePlantProductionEntryVerification.GroupCode"></span></td>
                        <td class="current"><span data-bind="text: $data.Remark"></span></td>
                    </tr>
                    @*edit template*@
                    <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'},
                                    inlineProccess:[$parent,$data], if:($parent.editingRowIndex() === $index()), click: $parent.selectRow.bind($data, $index())">
                        <td class="center">
                            <input type="checkbox" data-bind="checked: $data.Checkbox, enable:ko.utils.unwrapObservable($data.IsLocked),click:$root.onChecked"/>
                            @*<input type="checkbox" data-bind="checked: $data.Checkbox, click:$root.onChecked" />*@
                            @*<input type="hidden" data-bind="value: $data.ProductionEntryCode" />*@
                        </td>
                        <td><span data-bind="text: $data.ExePlantProductionEntryVerification.ProductionDate"></span></td>
                        <td class="center"><span data-bind="text: $data.ExePlantProductionEntryVerification.BrandCode"></span></td>
                        <td class="center"><span data-bind="text: $data.ExePlantProductionEntryVerification.GroupCode"></span></td>
                        <td class="current"><input data-bind="value: $data.Remark, valueUpdate:'afterkeydown'" class="form-control transparent" /></td>
                    </tr>
                </tbody>
                <tbody data-bind="visible: !listDataItems().length">
                    <tr>
                        <td colspan="13" class="empty-row-message"><div class="loader"></div></td>
                    </tr>
                </tbody>
            </table>
        </div>
        @*<div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
            @Html.Partial("GridViewFooter")
        </div>*@
    </div>
    

    <!-- Modal -->
    <div class="modal fade" id="releaseadd" role="dialog" data-bind="with: gridViewPopup">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Add Eblek</h4>
                </div>
                <div class="modal-body">
                    <div class="col-lg-12">
                        <div class="row">
                            <label class="form-label col-lg-2">
                                Location
                            </label>
                            <div class="col-lg-2 offset-right">
                                @Html.DropDownList("filterAddLocationCode", new SelectList(Model.PopupLocationCode, "LocationCode", "LocationCode"),
                                new
                                {
                                    @class = "selectpicker show-tick form-control",
                                    id = "filterAddLocationCode",
                                    data_live_search = "true",
                                    data_bind = "selectPicker: $root.filterAddLocation, event : { change : $root.onFilterAddLocationChange }"
                                })
                            </div>
                            <div class="col-lg-4">
                                <input type="text" class="form-control" data-bind="value: $root.filterAddLocationName" disabled>
                            </div>
                        </div>
                        <div class="row">
                            <label class="form-label col-lg-2">
                                Unit
                            </label>
                            <div class="col-lg-6">
                                <select class="selectpicker show-tick form-control" id="filterAddUnit"
                                        data-live-search="true"
                                        data-bind="selectPicker: $root.filterAddUnit, event : { change : $root.onFilterAddUnitSelectList }, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.filterAddUnitSelectList }"></select>
                            </div>
                        </div>
                        <div class="row">
                            <label class="form-label col-lg-2">
                                Shift
                            </label>
                            <div class="col-lg-6">
                                <select class="selectpicker show-tick form-control" id="filterAddShift"
                                        data-live-search="true"
                                        data-bind="selectPicker: $root.filterAddShift, event : { change : $root.onFilterAddShiftSelectList }, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.filterAddShiftSelectList }"></select>
                            </div>
                        </div>
                        <div class="row">
                            <label class="form-label col-lg-2">
                                Date
                            </label>
                            <div class="col-lg-6">
                                <select class="selectpicker show-tick form-control" id="filterDatePopUp"
                                        data-live-search="true"
                                        data-bind="selectPicker: $root.filterDatePopUp, event : { change : $root.onFilterAddDateSelectList }, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.filterDatePopUpSelectList }"></select>
                            </div>
                        </div>
                        <div class="row">
                            <label class="form-label col-lg-2">
                                Brand
                            </label>
                            <div class="col-lg-6">
                                <select class="selectpicker show-tick form-control" id="filterAddBrand"
                                        data-live-search="true"
                                        data-bind="selectPicker: $root.filterAddBrand, event : { change : $root.onFilterAddBrandSelectList },  optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.filterAddBrandSelectList }"></select>
                            </div>
                        </div>
                        <div class="row">
                            <label class="form-label col-lg-2">
                                Process
                            </label>
                            <div class="col-lg-6">
                                <select class="selectpicker show-tick form-control" id="filterAddProcess"
                                        data-live-search="true"
                                        data-bind="selectPicker: $root.filterAddProcess, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.filterAddProcessSelectList }"></select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="action-btn">
                                <button type="button" class="btn btn-primary" data-bind="click: $root.searchPopup">View</button>
                                <button type="button" class="btn btn-primary" data-bind="click: $root.savePopup">OK</button>
                            </div>
                        </div>
                    </div>
                    <div class="table-overflow modal-eblek-release">
                        <table class="table table-striped clickable-table-row" id="tablePopup">
                            <thead>
                                <tr class="head">
                                    <th><input type="checkbox" id="checkboxPopupAll" /></th>
                                    @*<th>Date</th>
                                    <th>Brand</th>
                                    <th>Process</th>*@
                                    <th>Group</th>
                                </tr>
                            </thead>
                            <tbody data-bind='foreach: listDataItems'>
                                <tr>
                                    <td>
                                        <input type="checkbox" data-bind="checked: $data.Checkbox" />
                                        <input type="hidden" data-bind="value: $data.ProductionEntryCode" />
                                    </td>
                                    @*<td><span data-bind="text: $data.ProductionDate"></span></td>
                                    <td><span data-bind="text: $data.BrandCode"></span></td>
                                    <td><span data-bind="text: $data.ProcessGroup"></span></td>*@
                                    <td><span data-bind="text: $data.GroupCode"></span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
                        @Html.Partial("GridViewFooter")
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Modal -->

    @Html.Partial("TransactionHistory")
</div>

@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.gridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.Extenders.js" type="text/javascript"></script>
    <script type="text/javascript">
    (function (app) {
        app.EditGrid = function () {
            var self = this;

            // knockout filter variable
            self.filterDate = ko.observable('@Model.DateNearestClosingPayrollFrom');
            self.filterDateTo = ko.observable('@Model.DateNearestClosingPayrollTo');
            self.filterLocation = ko.observable('@Model.DefaultLocationCode');
            //self.filterLocation = ko.observable($("#ddlFilterLocationCode").val());
            self.filterLocationName = ko.observable();
            self.filterUnit = ko.observable('@Model.DefaultUnit');
            self.filterShift = ko.observable(@Model.DefaultShift);
            self.itemLocations = ko.observableArray(@Html.Raw(Json.Encode(@Model.LocationCode)));

            @*self.filterYear = ko.observable(@Model.DefaultYear);
            self.filterWeek = ko.observable(@Model.DefaultWeek);*@

            self.filterAddLocation = ko.observable('@Model.DefaultPopupLocationCode');
            self.filterAddLocationName = ko.observable('');
            self.filterAddUnit = ko.observable('@Model.DefaultPopupUnit');
            self.filterAddShift = ko.observable('@Model.DefaultPopupShift');
            self.filterAddBrand = ko.observable('');
            self.filterDatePopUp = ko.observable('');
            self.filterAddProcess = ko.observable('');
            self.canSendApproval = ko.observable(false);
            
            self.RoleSendApproval = ko.observable(false);
            self.isBusy = ko.observable(true);
            
            self.firstInit = true;
            
            $(document).ajaxComplete(function () {
                if ($.active <= 1) {
                    self.isBusy(false);
                }
            });

            $(document).ajaxStart(function () {
                if (!self.isBusy()) self.isBusy(true);
            });
            
            //self.btnChecked = ko.observable();
            // event handlers
            self.onFilterLocationChange = function() {
                //console.log("filterLocation = "+self.filterLocation());
                self.getFilterUnitSelectList(self.filterLocation()); // unit
                self.getFilterShiftSelectList(self.filterLocation()); // shift
                self.getFilterLocationName(self.filterLocation); //location name
            };
            
            @*self.RoleButton = function(cb){
                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/RoleButton"),
                    type: 'POST',
                    async: false,
                    contentType: 'application/json',
                    data: ko.toJSON({
                        LocationCode: self.filterLocation,
                        Unit: self.filterUnit,
                        Shift: self.filterShift,
                        Date: self.filterDate,
                        DateTo: self.filterDateTo
                        //WPC/ID22/1/2029/1193/FA010783.18/2016/32/3/0
                    }),
                    dataType: 'json',
                    success: function(data) {
                        self.RoleSendApproval(data.SendApproval);
                        //console.log(self.RoleSendApproval());
                    },
                    complete: function() {
                        if (typeof cb != 'undefined') cb();
                    }
                });
            };*@

            self.onFilterAddLocationChange = function() {
                $.get(self.getFilterAddUnitSelectList(self.filterAddLocation()), self.getFilterAddShiftSelectList(self.filterAddLocation())).done(function() {
                    self.onSelectGtfilterDate();
                    //self.getFilterAddBrandSelectList(self.filterAddLocation(), self.filterAddUnit(), self.filterAddShift(),self.filterDatePopUp());
                    //self.getFilterAddBrandSelectList(self.filterAddLocation(), self.filterAddUnit(), self.filterAddShift());
                    //selfgetFilterDateToSelectList();
                });
                self.getFilterAddLocationName(self.filterAddLocation());
            };

            self.onFilterAddUnitSelectList = function() {
                //self.getFilterAddBrandSelectList(self.filterAddLocation(), self.filterAddUnit(), self.filterAddShift(),self.filterDatePopUp());
                //self.getFilterAddBrandSelectList(self.filterAddLocation(), self.filterAddUnit(), self.filterAddShift());
            };

            self.onFilterAddShiftSelectList = function() {
                //self.getFilterAddBrandSelectList(self.filterAddLocation(), self.filterAddUnit(), self.filterAddShift(),self.filterDatePopUp());
                //self.getFilterAddBrandSelectList(self.filterAddLocation(), self.filterAddUnit(), self.filterAddShift());
            };

            self.onFilterAddDateSelectList = function(){
                self.getFilterAddBrandSelectList(self.filterAddLocation(), self.filterAddUnit(), self.filterAddShift(), self.filterDatePopUp());
                self.getFilterAddProcessSelectList(self.filterAddLocation(), self.filterAddUnit(), self.filterAddShift(),self.filterDatePopUp(),self.filterAddBrand());
            }

            self.onFilterAddBrandSelectList = function(){
                //if (ko.utils.unwrapObservable(self.filterAddBrand) == "" )return;
                self.getFilterAddProcessSelectList(self.filterAddLocation(), self.filterAddUnit(), self.filterAddShift(),self.filterDatePopUp(),self.filterAddBrand());
            }

            self.RemoveNotification = function() {
                if ($('#noty_top_layout_container').length > 0) {
                    $('#noty_top_layout_container').remove();
                }
            };

            self.getFilterAddLocationName = function(locationCode) {
                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetLocationName"),
                    type: 'GET',
                    contentType: 'application/json',
                    data:
                    {
                        locationCode : locationCode
                    },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterAddLocationName(data.LocationName);
                    }
                });
            };

            self.getFilterLocationName = function(locationCode) {
                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetLocationName"),
                    type: 'GET',
                    contentType: 'application/json',
                    data:
                    {
                        locationCode : locationCode
                    },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterLocationName(data.LocationName);
                    }
                });
            };

            //dropdown data source
            self.filterUnitSelectList = ko.observableArray([]);
            self.getFilterUnitSelectList = function(locationCode) {
                $('#filterUnit').find('option').remove();
                $('#filterUnit').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetUnitSelectList"),
                    type: 'GET',
                    contentType: 'application/json',
                    data:
                    {
                        locationCode : locationCode
                    },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterUnitSelectList(data);
                        //console.log(self.unitCodeFromUrl);
                        if(self.unitCodeFromUrl){
                            //console.log("mmmmm");
                            self.filterUnit("@Model.DefaultUnit");
                            self.unitCodeFromUrl = false;
                        }else{
                            //console.log(data);
                            self.filterUnit(data[0].Value);
                        }
                    }
                });
            };

            self.filterShiftSelectList = ko.observableArray([]);
            self.getFilterShiftSelectList = function(locationCode) {
                $('#filterShift').find('option').remove();
                $('#filterShift').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetShiftSelectList"),
                    type: 'GET',
                    contentType: 'application/json',
                    data:
                    {
                        locationCode : locationCode
                    },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterShiftSelectList(data);
                        if(self.shiftFromUrl){
                            self.filterShift("@Model.DefaultShift");
                            self.shiftFromUrl = false;
                        }else{
                            self.filterShift("@Model.DefaultShift");
                        }
                    }
                });
            };

            self.filterDateSelectList = ko.observableArray([]);
            self.getFilterDateSelectList = function() {
                $('#filterDate').find('option').remove();
                $('#filterDate').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetDateNearestClosingPayrollList"),
                    type: 'GET',
                    contentType: 'application/json',
                    //data:
                    //{
                    //    year : year,
                    //    week : week
                    //},
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterDateSelectList(data);
                        var curDate = moment().format('DD/MM/YYYY');
                        if(self.dateFromUrl){
                            //console.log("ddddd");
                            self.filterDate("@Model.DateFromUrl");
                            self.dateFromUrl = false;
                        }else{
                            //console.log("llll");
                            self.filterDate(data[0].Value);
                        }
                    }
                });
            };

            self.filterDateToSelectList = ko.observableArray([]);
            self.getFilterDateToSelectList = function() {
                $('#filterDateTo').find('option').remove();
                $('#filterDateTo').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetDateNearestClosingPayrollList"),
                    type: 'GET',
                    contentType: 'application/json',
                    //data:
                    //{
                    //    year : year,
                    //    week : week
                    //},
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterDateToSelectList(data);
                        var curDate = moment(data[data.length-1].Value, 'DD/MM/YYYY').format('DD/MM/YYYY');
                        if(self.dateToUrl){
                            self.filterDateTo("@Model.DateFromUrl");
                            self.dateToUrl = false;
                        }else{
                            self.filterDateTo(data[data.length-1].Value);
                        }
                    }
                });
            };

            self.filterDatePopUpSelectList = ko.observableArray([]);
            self.getFilterDatePopUpSelectList = function() {
                $('#filterDatePopUp').find('option').remove();
                $('#filterDatePopUp').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetDateNearestClosingPayrollList"),
                    type: 'GET',
                    contentType: 'application/json',
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterDatePopUpSelectList(data);
                        var curDate = moment().format('DD/MM/YYYY');
                        self.filterDatePopUp(curDate);
                    }
                });
            };

            @*self.filterBrandSelectList = ko.observableArray([]);
            self.getFilterBrandSelectList = function(locationCode, unit, shift) {
                $('#filterBrand').find('option').remove();
                $('#filterBrand').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetBrandSelectList"),
                    type: 'GET',
                    contentType: 'application/json',
                    data:
                    {
                        locationCode : locationCode,
                        unitCode : unit,
                        shift : shift
                    },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterBrandSelectList(data);
                    }
                });
            };*@

            self.filterAddUnitSelectList = ko.observableArray([]);
            self.getFilterAddUnitSelectList = function(locationCode) {
                $('#filterAddUnit').find('option').remove();
                $('#filterAddUnit').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetUnitSelectList"),
                    type: 'GET',
                    contentType: 'application/json',
                    data:
                    {
                        locationCode : locationCode
                    },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterAddUnitSelectList(data);
                    }
                });
            };

            self.filterAddShiftSelectList = ko.observableArray([]);
            self.getFilterAddShiftSelectList = function(locationCode) {
                $('#filterAddShift').find('option').remove();
                $('#filterAddShift').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetShiftSelectList"),
                    type: 'GET',
                    contentType: 'application/json',
                    data:
                    {
                        locationCode : locationCode
                    },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterAddShiftSelectList(data);
                    }
                });
            };

            self.filterAddBrandSelectList = ko.observableArray([]);
            self.getFilterAddBrandSelectList = function(locationCode, unit, shift, datePopUp) {
                $('#filterAddBrand').find('option').remove();
                $('#filterAddBrand').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetBrandSelectList"),
                    type: 'GET',
                    async: false,
                    contentType: 'application/json',
                    data:
                    {
                        locationCode : locationCode,
                        unitCode : unit,
                        shift : shift,
                        datePopUp: datePopUp //moment().format('DD/MM/YYYY')
                    },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterAddBrandSelectList(data);
                    }
                });
            };

            self.filterAddProcessSelectList = ko.observableArray([]);
            self.getFilterAddProcessSelectList = function(locationCode, unit, shift, datePopUp, brand) {
                $('#filterAddProcess').find('option').remove();
                $('#filterAddProcess').selectpicker('refresh');

                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/GetProcessSelectList"),
                    type: 'GET',
                    contentType: 'application/json',
                    data:
                    {
                        locationCode : locationCode,
                        unitCode : unit,
                        shift : shift,
                        datePopUp : datePopUp,
                        brand : brand
                    },
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        self.filterAddProcessSelectList(data);
                    }
                });
            };

            self.gridView = new app.GridViewModel({
                Criteria:
                {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "UpdatedDate",
                    SortOrder: "DESC",
                    locationCode: self.filterLocation,
                    unit: self.filterUnit,
                    shift: self.filterShift,
                    //kpsYear: self.filterYear,
                    //kpsWeek: self.filterWeek,
                    date: self.filterDate,
                    dateTo: self.filterDateTo
                },
                DataSourceUrl: @Html.BaseUrl("WagesEblekRelease/GetListExeProductionEntryRelease"),
                InlineEdit: true
            });

            self.gridView.applyValidationRules = function (entity) {

            };

            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');

            self.gridView.resetDefault = function(viewModel) {
                viewModel.Checkbox(false);
                viewModel.ProductionEntryCode('');
                viewModel.ProductionDate('');
                viewModel.BrandCode('');
                viewModel.GroupCode('');
                viewModel.Remark('');
            };

            self.unitCodeFromUrl = false;
            self.shiftFromUrl = false;
            self.dateFromUrl = false;
            self.dateToUrl = false;

            self.search = function() {
                self.loadHistory();
                self.loadFlow();
                counterCheck=0;
                self.canSendApproval(false);

                var locationFromUrl = "@Model.LocationFromUrl";
                if (self.firstInit && locationFromUrl !== "") {
                    //console.log("TTTTTT");
                    self.filterLocation(locationFromUrl);
                    self.firstInit = false;
                    self.unitCodeFromUrl = true;
                    self.shiftFromUrl = true;
                    self.dateFromUrl = true;
                    self.dateToUrl = true;
                }

                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                } else {
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }

                self.gridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {
                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }

                    //if(response.IsLocked==true){
                    //    self.canSendApproval(true);
                    //}else{
                    //    self.canSendApproval(false);
                    //}

                    $('#tableMaster tr input[type=checkbox]').click(function(e) {
                        e.stopPropagation();
                    });
                });
                //self.RoleButton();
            };

            self.RoleButton = function(cb){
                var datas = {
                    "New": self.gridView.listDataItems()
                };

                datas = ko.myToJSON(datas);
                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/RoleButton"),
                    type: 'POST',
                    async: false,
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        self.RoleSendApproval(data.SendApproval);
                    },
                    complete: function() {
                        if (typeof cb != 'undefined') cb();
                    }
                });
            };
            
            self.sendApproval = function() { //hakim
                var datas = {
                    "New": self.gridView.listDataItems()
                };

                datas = ko.myToJSON(datas);
                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/SendApproval"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        //console.log(data);
                        //if(data.length > 1){
                        //    SKTIS.Helper.Notification(data[1]);
                        //}else{
                        //    SKTIS.Helper.Notification(data[0]);
                        //}

                        if (data.New) {
                            $.each(data.New, function(k, value) {
                                if (value.ResponseType != null)
                                    SKTIS.Helper.ResponseNotification(value, "Send Approval Eblek Release", value.ProductionEntryCode);
                                self.canSendApproval(false);
                            });
                        }

                        self.gridView.reload();
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }
                });
            };

            self.gridViewPopup = new app.GridViewModel({
                Criteria:
                {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "UpdatedDate",
                    SortOrder: "DESC",
                    locationCode: self.filterAddLocation,
                    unitCode: self.filterAddUnit,
                    shift: self.filterAddShift,
                    brandCode: self.filterAddBrand,
                    //date: self.filterDate,
                    //dateTo: self.filterDateTo,
                    datePopUp: self.filterDatePopUp,
                    processGroup: self.filterAddProcess,
                    UtilTransactionLogsCannotNull: true
                },
                DataSourceUrl: @Html.BaseUrl("WagesEblekRelease/GetListExePlantProductionEntryVerification"),
                InlineEdit: true
            });

            self.gridViewPopup.resetDefault = function(viewModel) {
                viewModel.Checkbox(false);
                viewModel.ProductionEntryCode('');
                viewModel.ProductionDate('');
                viewModel.BrandCode('');
                viewModel.ProcessGroup('');
                viewModel.GroupCode('');
            };

            self.searchPopup = function() {
                self.gridViewPopup.search({});
            };


            //var counterCheck = 0;
            //self.onChecked = function (item) {
            //    if (ko.utils.unwrapObservable(item.Checkbox())){
            //        self.canSendApproval(true);
            //        counterCheck = counterCheck + 1;
            //        self.RoleButton();
            //    } else {
            //        counterCheck = counterCheck - 1;
            //        if (counterCheck === 0){
            //            self.canSendApproval(false);
            //            self.RoleSendApproval(false);
            //        } else {
            //            self.canSendApproval(true);
            //            self.RoleButton();
            //        }
            //    }
            //    return true;
            //};

            var counterCheck = 0;
            self.onChecked = function (item) {
                //console.log(ko.utils.unwrapObservable(item.Flag));
                if (ko.utils.unwrapObservable(item.Checkbox) == true){
                    counterCheck = counterCheck + 1;
                    self.RoleButton();
                } else {
                    counterCheck = counterCheck - 1;
                    if (counterCheck === 0){
                        self.RoleApprove(false);
                        self.RoleReturn(false);
                    } else {
                        self.RoleButton();
                    }
                }
                //self.RoleButton();
                return true;
            };


            self.onFilterLocationChange();
            self.onFilterAddLocationChange();

            self.onSelectGtfilterDate = function(){
                if (ko.utils.unwrapObservable(self.filterAddLocationCode) == "" ||
                        ko.utils.unwrapObservable(self.filterAddUnit) == "" ||
                        ko.utils.unwrapObservable(self.filterAddShift) == "") return;
                self.getFilterDatePopUpSelectList();
            }

            self.filterAddProcessSelectList();

            //self.getFilterDateSelectList();
            //self.getFilterDateToSelectList();


            function mappingCheckbox(data) {
                ko.mapping.fromJS(data, {}, this);
                this.Checkbox = ko.observable(false);
            }

            function mappingCheckboxPopup(data) {
                ko.mapping.fromJS(data, {}, this);
                this.Checkbox = ko.observable(data.Checkbox);
            }

            self.gridView.mapping = {
                create: function(options) {
                    return new mappingCheckbox(options.data);
                }
            };

            self.gridViewPopup.mapping = {
                create: function(options) {
                    return new mappingCheckboxPopup(options.data);
                }
            };

            self.delete = function() {

                var datas = {
                    "New": self.gridView.listDataItems()
                };

                datas = ko.myToJSON(datas);
                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/Delete"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        if (data.New) {
                            $.each(data.New, function(k, value) {
                                if (value && value.ResponseType != null) {
                                    SKTIS.Helper.ResponseNotification(value, "Delete Eblek Release", value.ProductionEntryCode);
                                }

                            });
                        }

                        self.gridView.reload();
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }
                });
            };

            self.savePopup = function() {
                if (self.gridViewPopup.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "New": self.gridViewPopup.listDataItems()
                };

                datas = ko.myToJSON(datas);
                $.ajax({
                    url: @Html.BaseUrl("WagesEblekRelease/SaveAllWagesEblekRelease"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) { 
                        $.each(data, function(k, value) {
                            if (value)
                                $('#releaseadd').modal('hide');
                            SKTIS.Helper.ResponseNotification(value, "Save Eblek Release", value.ProductionEntryCode);
                        });

                        self.gridViewPopup.reload();
                        self.gridViewPopup.listNewItems.removeAll();
                        self.gridViewPopup.listEditItems.removeAll();
                    },complete: function(){
                        self.search();
                    }
                });
            };

            self.historyGridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "UpdatedDate",
                    SortOrder: "DESC",
                    code_1: 'EBL',
                    code_2: self.filterLocation,
                    code_3: self.filterShift,
                    code_4: self.filterUnit
                },
                DataSourceUrl: @Html.BaseUrl("WagesEblekRelease/GetHistory"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            self.flowGridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "UpdatedDate",
                    SortOrder: "ASC",
                    FunctionName: 'EblekRelease'
                },
                DataSourceUrl: @Html.BaseUrl("WagesEblekRelease/GetFlow"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            self.loadHistory = function() {
                self.historyGridView.search({ code_2: self.filterLocation, code_3: self.filterShift, code_4: self.filterUnit }, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });
            };

            self.loadFlow = function() {
                self.flowGridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });
            };

            $('#checkboxPopupAll').change(function(e) {
                if (this.checked) {
                    $('#tablePopup tbody tr input:checkbox').prop('checked', true);
                    $('#tablePopup tbody tr input:checkbox').change();
                } else {
                    $('#tablePopup tbody tr input:checkbox').prop('checked', false);
                    $('#tablePopup tbody tr input:checkbox').change();
                }
            });

            $('#checkboxAll').change(function(e) {
                if (this.checked) {
                    $('#tableMaster tbody tr input:checkbox').prop('checked', true);
                    $('#tableMaster tbody tr input:checkbox').change();
                    self.canSendApproval(true);
                    counterCheck = $('#tableMaster tbody tr input:checkbox').length;
                } else {
                    $('#tableMaster tbody tr input:checkbox').prop('checked', false);
                    $('#tableMaster tbody tr input:checkbox').change();
                    self.canSendApproval(false);
                    counterCheck = $('#tableMaster tbody tr input:checkbox').length - counterCheck;

                }
            });

            //$(document).on('change','#tableMaster tbody tr input[type=checkbox]',function() {
            //    var thisChk = $(this);
            //    var context1 = ko.dataFor(this);
            //    console.log(thisChk.prop('checked'));
            //    context1.Checkbox(thisChk.prop('checked'));
            //});

            $(document).on('change','#tablePopup tbody tr input[type=checkbox]',function() {
                var thisChk = $(this);
                var context1 = ko.dataFor(this);
                context1.Checkbox(thisChk.prop('checked'));
            });

            $(document).on('change','#tableMaster tbody tr input[type=checkbox]',function() {
                var thisChk = $(this);
                var context1 = ko.dataFor(this);
                context1.Checkbox(thisChk.prop('checked'));
            });

            
            self.getFilterDateSelectList();
            self.getFilterDateToSelectList();
            self.search();
            //self.RoleButton();

            $(document).ready(function(){
                self.onFilterLocationChange();
                
            });

        };
        ko.applyBindings(new app.EditGrid());

    })

    (app = this.app || {});

</script>
}