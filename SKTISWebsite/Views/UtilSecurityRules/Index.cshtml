@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.UtilSecurityRules
@using SKTISWebsite.Helper

@{ Html.SetPageTitle(@UtilSecurityRules.PageTitle); }
<div  class="col-lg-12">
    <div data-bind="with: gridView">
        <div class="col-lg-10">
            <div class="row">
                <label class="form-label col-lg-2">@UtilSecurityRules.lblFilterLocationCode</label>
                <div class="col-lg-2">
                    <select class="selectpicker show-tick form-control" data-live-search="true" data-bind="selectPicker:$root.filterLocationCode, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.LocationCodeSelectList }, event : { change : $root.onLocationCodeChange}"></select>
                </div>
                <div class="col-lg-3">
                    <input data-bind="value: $root.filterLocationName" type="text" class="form-control" readonly="readonly">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="action-btn">
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                    @using (Html.BeginForm("GenerateExcel", "UtilSecurityRules", FormMethod.Post))
                    {
                        <input type="hidden" name="locationCode" data-bind="value: $root.filterLocationCode" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                    @Html.Partial("GridViewPageSizeSelector")
                </div>
            </div>
        </div>

        <div>
            <div class="table-overflow">
                <table class="table table-striped">
                    <thead>
                        <tr class="head">
                            <th data-bind="click:sortBy.bind($data,'IDRule'), css:sortCss('IDRule', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@UtilSecurityRules.lblIDRule</th>
                            <th data-bind="click:sortBy.bind($data,'RulesName'), css:sortCss('RulesName', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@UtilSecurityRules.lblRulesName</th>
                        </tr>
                        <tr class="insertRow" data-bind="click:cancelInline.bind(),inlineAddProccess:[$data, $root.newData]">
                            <th class="right widthsmall"></th>
                            <th class="widthdg15"><input data-bind="value:$root.newData.RulesName, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="15" /></th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: listDataItems">
                        @*item template*@
                        <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                       click:  $parent.editInlineWithCallback.bind($data,$index(), $root.showListUnit.bind())">
                            <td><span data-bind="text:$data.IDRule"></span></td>
                            <td><span data-bind="text:$data.RulesName"></span></td>
                        </tr>
                        @*edit template*@
                        <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                       if:($parent.editingRowIndex() === $index()),
                                       click: $parent.selectRow.bind($data, $index())">
                            <td><span data-bind="text:$data.IDRule"></span></td>
                            <td class="current"><input data-bind="value:$data.RulesName,tabToNext:[$parent,$data], valueUpdate: 'afterkeydown'" class="form-control transparent" /></td>
                        </tr>
                    </tbody>
                    <tbody data-bind="visible: !listDataItems().length">
                        <tr>
                            <td colspan="7" class="empty-row-message"><div class="loader"></div></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
                @Html.Partial("GridViewFooter")
            </div>
        </div>
    </div>
    <div data-bind="with: gridViewUnit">
        <div class="row">
            <div class="col-lg-12">
                <div class="action-btn">
                    @Html.Partial("GridViewPageSizeSelector")
                </div>
            </div>
        </div>

        <div id="master-unit">
            <div class="table-overflow">
                <table class="table table-striped">
                    <thead>
                        <tr class="head">
                            <th data-bind="click:sortBy.bind($data,'RulesName'), css:sortCss('RulesName', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@UtilSecurityRules.lblRulesName</th>
                            <th data-bind="click:sortBy.bind($data,'Location'), css:sortCss('Location', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@UtilSecurityRules.lblLocation</th>
                            <th data-bind="click:sortBy.bind($data,'Unit'), css:sortCss('Unit', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@UtilSecurityRules.lblUnit</th>
                        </tr>
                        <tr class="insertRow" data-bind="click:cancelInline.bind(),inlineAddProccess:[$data, $root.newDataUnit]">
                            <th class="right widthsmall" data-text="$root.newDataUnit.RulesName"></th>
                            <th class="right widthsmall" data-text="$root.newDataUnit.Location"></th>
                            <th class="widthmedium right">
                                <select id="spUnit" class="selectpicker show-tick form-control"
                                        data-live-search="true"
                                        data-bind="selectPicker: $root.newDataUnit.Unit, value: $root.newDataUnit.Unit, optionsText: 'Text', optionsValue : 'Value', optionsAfterRender : $root.afterRender,selectPickerOptions: { optionsArray: $root.unitSelectList, container: 'body' }"></select>
                            </th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: listDataItems">
                        @*item template*@
                        <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                       click: $parent.editInline3.bind($data,$index())">
                            <td><span data-bind="text:$data.RulesName"></span></td>
                            <td><span data-bind="text:$data.Location"></span></td>
                            <td><span data-bind="text:$data.Unit"></span></td>
                        </tr>
                        @*edit template*@
                        <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                       if:($parent.editingRowIndex() === $index()),
                                       click: $parent.selectRow.bind($data, $index())">
                            <td><span data-bind="text:$data.RulesName"></span></td>
                            <td><span data-bind="text:$data.Location"></span></td>
                            <td class="current">
                                @*<span data-bind="text:$data.EmployeeID"></span>*@
                                <select id="spUnitEdit" class="selectpicker show-tick form-control" data-live-search="true" data-bind="selectPickerCustom: $data.Unit, value: $data.Unit, optionsText: 'Text', optionsValue : 'Value', optionsAfterRender : $root.afterRender, isSelectPicker: true, selectPickerOptions: { container: 'body', optionsArray: $root.unitSelectList }"></select>
                            </td>
                        </tr>
                    </tbody>
                    <tbody data-bind="visible: !listDataItems().length">
                        <tr>
                            <td colspan="7" class="empty-row-message"><div class="loader"></div></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
                @Html.Partial("GridViewFooter")
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">

    (function(app) {
        app.EditGrid = function() {
            var self = this;

            // Filter
            self.filterLocationCode = ko.observable('SKT');

            self.unitSelectList    = ko.observableArray();
            self.filterIDRule = ko.observable();
            self.filterExcelLocationCode = self.filterLocationCode();
            self.filterLocationName = ko.observable();
            self.rulesSelected = '';
            self.locationDescriptions = @Html.Raw(Json.Encode(@Model.LocationNameLookupList));

            self.showListUnit = function(data, index){
                self.filterIDRule(data.IDRule);
                self.newDataUnit.RulesName(data.RulesName);
                self.newDataUnit.Location(data.Location);
                self.rulesSelected = data.RulesName();
                console.log(data.RulesName());
                self.searchUnit();

            }
            self.searchUnit = function(){

                self.getUnitList(self.unitSelectList, self.filterLocationCode);
                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridViewUnit.listNewItems, self.gridViewUnit.listEditItems]) == true) {
                    return;
                } else {
                    self.gridViewUnit.listNewItems.removeAll();
                    self.gridViewUnit.listEditItems.removeAll();
                }

                self.gridViewUnit.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message, 'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };
            }

            self.getUnitList = function(dataSource, LocationCode) {
                $.ajax({
                    url: @Html.BaseUrl("UtilSecurityRules/GetUnitCodeSelectListByLocationCode"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { LocationCode: LocationCode() },
                    dataType: 'json',
                    success: function(data) {
                        $("#spUnit").find('option').remove();
                        $("#spUnit").selectpicker('refresh');

                        $("#spUnitEdit").find('option').remove();
                        $("#spUnitEdit").selectpicker('refresh');
                        var list = [{
                            Text : "ALL",
                            Value : "ALL"
                        }];
                        list = list.concat(data);
                        dataSource(list);

                        $('.on-edit-employee').selectpicker('refresh');
                    }
                });
            };



            self.newData = {
                RulesName: ko.observable('')
            };

            self.newDataUnit = {
                RulesName: ko.observable(''),
                Location: ko.observable(''),
                Unit: ko.observable(''),
            };

            //get location name by location code
            self.onLocationCodeChange = function() {
                for (var i = 0; i < self.locationDescriptions.length; i++) {
                    if (self.locationDescriptions[i].LocationCode == self.filterLocationCode()) {
                        self.filterLocationName(self.locationDescriptions[i].LocationName);
                        break;
                    }
                }
            };

            // Options
            self.LocationCodeSelectList = ko.observableArray([{ "Name": 'SKT' }]);
            $.ajax({
                url: @Html.BaseUrl("UtilSecurityRules/GetLocationCodeSelectList"),
                type: 'GET',
                contentType: 'application/json',
                data: '',
                dataType: 'json',
                success: function(data) {
                    //var locationCodeModel = [];
                    //$.each(data, function(index, value) {
                    //    locationCodeModel.push({ "Name": value });
                    //});
                    self.LocationCodeSelectList(data);
                }
            });

            // Gridview Initialization
            self.gridView = new app.GridViewModel({
                Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", Location: self.filterLocationCode },
                DataSourceUrl: @Html.BaseUrl("UtilSecurityRules/GetRules"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            // Gridview Initialization
            self.gridViewUnit = new app.GridViewModel({
                Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", IDRule: self.filterIDRule },
                DataSourceUrl: @Html.BaseUrl("UtilSecurityRules/GetUnitByRules"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 1
                });



                // Field Validations
                self.gridView.applyValidationRules  = function(entity) {
                    self.RemoveNotification();
                    entity.RulesName.extend({
                        required: {
                            message: "<strong>Rules Name</strong> cannot be empty!"
                        }
                    });
                }

                self.gridViewUnit.applyValidationRules  = function(entity) {
                    self.RemoveNotification();
                    entity.Unit.extend({
                        required: {
                            message: "<strong>Unit Name</strong> cannot be empty!"
                        }
                    });
                }

                // Reset Fields for Insert Row
                self.gridView.resetDefault = function(viewModel) {
                    viewModel.RulesName('');
                };

                // Generate Excel
                self.generateExcel = function(formElement) {
                    $(formElement).find("input[name=locationCode]").val(self.filterLocationCode());
                    return true;
                }

                self.saveDataUnit = function(){
                    if (self.gridViewUnit.editingRowIndex() !== -1)
                        return;
                    console.log(self.rulesSelected);
                    var datas = {
                        "Parameters": {"RulesName" : self.rulesSelected, "LocationCode" : self.filterLocationCode()},
                        "new": self.gridViewUnit.listNewItems(),
                        "edit": self.gridViewUnit.listEditItems()
                    }

                    datas = JSON.stringify(datas);

                    $.ajax({
                        url: @Html.BaseUrl("UtilSecurityRules/SaveAllUnit"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {
                            if (data.New) {
                                $.each(data.New, function(k, value) {
                                    if (value) {
                                        SKTIS.Helper.ResponseNotification(value, "Insert Unit", value.RulesName + " - " + value.IDRule + "-" + value.Unit );
                                    }
                                });
                            }
                            if (data.Edit) {
                                $.each(data.Edit, function(k, value) {
                                    if (value) {
                                        SKTIS.Helper.ResponseNotification(value, "Edit Roles", value.RulesName + " - " + value.IDRule);
                                    }
                                });
                            }

                            self.gridViewUnit.sort('UpdatedDate', 'DESC');
                            self.gridViewUnit.listNewItems.removeAll();
                            self.gridViewUnit.listEditItems.removeAll();
                        }
                    });
            }
            // Save Action
            self.saveData = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "new": self.gridView.listNewItems(),
                    "edit": self.gridView.listEditItems(),
                    "Parameters": {
                        "LocationCode" : self.filterLocationCode()
                    }
                }

                datas = JSON.stringify(datas);

                $.ajax({
                    url: @Html.BaseUrl("UtilSecurityRules/SaveAllRules"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        if (data.New) {
                            $.each(data.New, function(k, value) {
                                if (value) {
                                    SKTIS.Helper.ResponseNotification(value, "Insert Roles", value.RulesName + " - " + value.IDRule);
                                }
                            });
                        }
                        if (data.Edit) {
                            $.each(data.Edit, function(k, value) {
                                if (value) {
                                    SKTIS.Helper.ResponseNotification(value, "Edit Roles", value.RulesName + " - " + value.IDRule);
                                }
                            });
                        }

                        self.gridView.sort('UpdatedDate', 'DESC');
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();

                        self.saveDataUnit();
                    }
                });
            }

            // Load Data
            self.search = function() {
                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                } else {
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }

                self.filterExcelLocationCode = self.filterLocationCode();
                self.gridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message, 'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                    self.filterIDRule("");
                    if ( self.gridView.listDataItems().length )
                    {
                        self.filterIDRule(self.gridView.listDataItems()[0].IDRule);
                    }

                    self.searchUnit();

                });

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };
            };



            self.onLocationCodeChange();
            self.search();
            // Check whether New or Edit data is existing and not saved to database yet (on Request action)
            SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
        };

        ko.applyBindings(new app.EditGrid());

    })(app = this.app || {});

    </script>
}