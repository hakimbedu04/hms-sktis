@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MasterGenList
@using SKTISWebsite.Helper

@{ Html.SetPageTitle(@MasterGenList.PageTitle); }
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">@MasterGenList.lblFilterList</label>
            <div class="col-lg-5">
                <select class="selectpicker show-tick form-control" data-live-search="true" data-bind="selectPicker: $root.filterListGroup, optionsText: 'Name', optionsCaption: '@CommonLabel.ddlSelectAll',optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ListGroupSelectList }"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) { 
                <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString())) { 
                <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString())) { 
                    using (Html.BeginForm("GenerateExcel", "MasterGenList", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="listGroup" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped">
            <thead>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'ListGroup'), css:sortCss('ListGroup', $data.sortExpression(), $data.sortOrder())">@MasterGenList.lblTitleListGroup</th>
                    <th data-bind="click:sortBy.bind($data,'ListDetail'), css:sortCss('ListDetail', $data.sortExpression(), $data.sortOrder())">@MasterGenList.lblTitleListDetail</th>
                    <th data-bind="click:sortBy.bind($data,'StatusActive'), css:sortCss('StatusActive', $data.sortExpression(), $data.sortOrder())">@MasterGenList.lblTitleStatusActive</th>
                    <th data-bind="click:sortBy.bind($data,'Remark'), css:sortCss('Remark', $data.sortExpression(), $data.sortOrder())">@MasterGenList.lblTitleRemark</th>
                    <th>@MasterGenList.lblTitleUpdatedBy</th>
                    <th>@MasterGenList.lblTitleUpdatedDate</th>
                </tr>
                <tr class="insertRow" data-bind="click: cancelInline.bind(),inlineAddProccess:[$data, $root.newData]">
                    <th>
                        <select class="selectpicker show-tick form-control" data-live-search="true" data-bind="selectPicker: $root.newData.ListGroup, optionsText: 'Name', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ListGroupSelectList }"></select>
                    </th>
                    <th><input id="inputListDetail" data-bind="value:$root.newData.ListDetail, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th class="center"><input type="checkbox" data-bind="checked:$root.newData.StatusActive" /></th>
                    <th><input data-bind="value:$root.newData.Remark, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th><span data-bind="text:$root.newData.UpdatedBy"></span></th>
                    <th><span data-bind="text:$root.newData.UpdatedDate"></span></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                @*item template*@
                <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                   click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.ListGroup"></span></td>
                    <td><span data-bind="text:$data.ListDetail"></span></td>
                    <td class="current center"><input type="checkbox" data-bind="checked:$data.StatusActive, enable: false" /></td>
                    <td class="current"><span data-bind="text:$data.Remark"></span></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
                @*edit template*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index()),
                                   click: $parent.selectRow.bind($data, $index()),
                                    event: {keydown:$parent.keydown}">
                    <td><span data-bind="text:$data.ListGroup"></span></td>
                    <td><span data-bind="text:$data.ListDetail"></span></td>
                    <td class="current center"><input type="checkbox" data-bind="checked:$data.StatusActive" /></td>
                    <td class="current"><input data-bind="value:$data.Remark,tabToNext:[$parent,$data], valueUpdate:'afterkeydown'" class="form-control transparent" /></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="6" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>

</div>
@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">

    (function (app) {
        app.EditGrid = function () {
            var self = this;

            // Filter
            self.filterListGroup = ko.observableArray([]);
            self.filterExcelListGroup = self.filterListGroup();

            self.newData = {
                ListGroup: ko.observableArray([]),
                ListDetail: ko.observable(''),
                StatusActive: ko.observable(true),
                Remark: ko.observable('')
            };

            // Gridview Initialization
            self.gridView = new app.GridViewModel({
                Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", ListGroup: self.filterListGroup },
                DataSourceUrl: @Html.BaseUrl("MasterGenList/GetListGroups"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            // Field Validations
            self.gridView.applyValidationRules = function (entity) {
                
                self.RemoveNotification();

                entity.ListGroup.extend({
                    required: {
                        message: "<strong>List Group</strong> cannot be empty!"
                    }
                });
                entity.ListDetail.extend({
                    required: {
                        message: "<strong>List Detail</strong> cannot be empty!"
                    }
                });
                entity.Remark.extend({
                    required: {
                        message: "<strong>Remark</strong> cannot be empty!",
                        onlyIf: function() {
                            return entity.StatusActive() === false;
                        }
                    }
                });
            };

            // Reset Fields for Insert Row
            self.gridView.resetDefault = function (viewModel) {
                viewModel.ListGroup('');
                viewModel.ListDetail('');
                viewModel.StatusActive(true);
                viewModel.Remark('');
            };

            self.generateExcel = function (formElement) {
                $(formElement).find("input[name=listGroup]").val(self.filterExcelListGroup);
                return true;
            };

            // Save Action
            self.saveData = function () {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                // Prevent Edited new Row data for triggering Edited message
                // Primary Key : ListGroup, ListDetail (need to compare both of arrays using unique key[s])
                var newItemLength = self.gridView.listNewItems().length;
                $.each(self.gridView.listNewItems(),function(k,v){
                    var shouldBeAsNew = ko.utils.arrayFirst(self.gridView.listEditItems(),function(editItem){
                        if(editItem){
                            return editItem['ListGroup'] == v['ListGroup'] && editItem['ListDetail'] == v['ListDetail'];
                        }
                    });
                    if(shouldBeAsNew){
                        self.gridView.listNewItems()[k] = shouldBeAsNew;
                    }
                    self.gridView.listEditItems.remove(function(data) {
                        if(data){
                            return data['ListGroup'] == v['ListGroup'] && data['ListDetail'] == v['ListDetail'];
                        }
                    });
                });

                var datas = {
                    "new": self.gridView.listNewItems(),
                    "edit": self.gridView.listEditItems()
                };

                datas = JSON.stringify(datas);

                $.ajax({
                    url: @Html.BaseUrl("MasterGenList/SaveAllListGroups"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function (data) {
                        console.log(data);
                        if (data.New) {
                            $.each(data.New, function (k, value) {
                                if (value)
                                    SKTIS.Helper.ResponseNotification(value, "Insert General List", value.ListGroup + " - " + value.ListDetail);
                            });
                        }

                        if (data.Edit) {
                            $.each(data.Edit, function (k, value) {
                                if (value)
                                    SKTIS.Helper.ResponseNotification(value, "Edit General List", value.ListGroup + " - " + value.ListDetail);
                            });
                        }

                        self.gridView.sort('UpdatedDate', 'DESC');
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();

                    }
                });
            };

            self.ListGroupSelectList = ko.observableArray();
            $.ajax({
                url: @Html.BaseUrl("MasterGenList/GetListGroupSelectList"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: '',
                    dataType: 'json',
                    success: function (data) {                        
                        var listGroupModel = [];
                        $.each(data, function (index, value) {
                            listGroupModel.push({ "Name": value.Key,"Value": value.Value });
                        });
                        self.ListGroupSelectList(listGroupModel);
                    }
                });

                // Load Data
                self.search = function () {
                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    }else{
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }

                    self.filterExcelListGroup = self.filterListGroup();
                    self.gridView.search({}, function (response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message,'error');
                            $('.empty-row-message').html(response.message);
                        }else if (response.status == 'Empty') {

                            self.RemoveNotification();
                            
                            //SKTIS.Helper.Notification(response.message,'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });
                    
                    self.RemoveNotification = function() {
                        if ($('#noty_top_layout_container').length > 0) {
                            $('#noty_top_layout_container').remove();
                        }
                    };
                };
                self.search();

                // Check whether New or Edit data is existing and not saved to database yet (on Request action)
                SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);

            };
            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});

    </script>
}