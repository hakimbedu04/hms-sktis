@model SKTISWebsite.Models.ProductionCard.InitProductionCardViewModel
@using HMS.SKTIS.Application.Resources
@using SKTISWebsite.Helper
@{ Html.SetPageTitle(" Production Card"); }

<div class="col-lg-12" data-bind="with: gridView">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">
                Location
            </label>
            <div class="col-lg-2 offset-right">
                @*@Html.DropDownList("ddlFilterLocationCode", new SelectList(Model.PLNTChildLocationLookupList, "LocationCode", "LocationCode"),
                    new
                    {
                        @class = "selectpicker show-tick form-control",
                        id = "ddlFilterLocationCode",
                        data_live_search = "true",
                        data_bind = "value:$root.filterLocationCode, event : { change : $root.onLocationCodeChange}"
                    })*@
                <select id="ddlFilterLocationCode"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterLocationCode, optionsText: 'LocationCode', optionsValue : 'LocationCode', optionsAfterRender: locationDesc, selectPickerOptions: { optionsArray: $root.itemLocations }, event : { change : $root.onLocationCodeChange}, isDisabled: $root.isLoading()"></select>
            </div>
            <div class="col-lg-4">
                <input type="text" class="form-control" readonly="readonly" data-bind="value:$root.filterLocationName">
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Unit
            </label>
            <div class="col-lg-5">
                <select class="selectpicker show-tick form-control" id="ddlUnitCodeFilter"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterUnitCode, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.unitCodeSelectList }, event: { change: $root.onUnitCodeChange }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Shift
            </label>
            <div class="col-lg-5">
                <select class="selectpicker show-tick form-control" id="ddlShiftFilter"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterShift, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.shiftSelectList },  event: { change: $root.onShiftChange }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Process
            </label>
            <div class="col-lg-5">
                <select class="selectpicker show-tick form-control" id="ddlProcessFilter"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterProcess, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.processSelectList }, event: { change: $root.onUnitProcessOnSelection }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Group
            </label>
            <div class="col-lg-5">
                <select class="selectpicker show-tick form-control" id="ddlGroupFilter"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterGroup, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.groupSelectList }, event: { change: $root.onGroupChange }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Brand
            </label>
            <div class="col-lg-5">
                <select class="selectpicker show-tick form-control" id="ddlBrandFilter"
                        data-live-search="true"
                        data-bind="selectPicker: $root.filterBrand, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.brandSelectList }, event: { change: $root.onBrandChange }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-3">
                KPS Year
            </label>
            <div class="col-lg-6">
                @Html.DropDownList("filterYear", Model.YearSelectList,
                                      new Dictionary<string, object> { { "data-bind", "value:$root.filterYear, event : { change : $root.onYearSelectedChange}, isDisabled: $root.isLoading()" },
                        { "class", "selectpicker show-tick form-controlt" },
                        {"data-live-search","true"},{"id","filterYear"} })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                KPS Week
            </label>
            <div class="col-lg-6">
                <select id="filterWeek" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterWeek, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.WeekFromSelectList },  event : { change : $root.onWeekChange }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                Date
            </label>
            <div class="col-lg-6">
                <select id="filterDate" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterDate, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.DateFromSelectList }, event : { change : $root.onDateChange }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search, enable: !$root.isBusy()">View</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.save, enable:($root.enableSubmitBtn() || $root.enableSaveBtn()) && ($root.RoleSave()|| $root.RoleSubmit()) && !$root.isBusy()">Save</button>
                    @*<button type="button" class="btn btn-primary" data-bind="click:$root.save">Save</button>*@
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Submit.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.submitDatas, enable:($root.enableSubmitBtn() || $root.enableSaveBtn()) && ($root.RoleSave() || $root.RoleSubmit())  && !$root.isBusy()">Submit</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Submit.ToString()))
                {
                    <button type="button" class="btn btn-primary"
                            data-bind="click:$root.showSubmitAllGroup.bind() , enable:($root.enableSubmitBtn() || $root.enableSaveBtn()) && ($root.RoleSave() || $root.RoleSubmit())  && !$root.isBusy()">
                        Submit All Group
                    </button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.CancelSubmit.ToString())) 
                { 
                <button type="button" class="btn btn-primary" data-bind="click:$root.cancelSubmit, enable:$root.enableCancelSubmitBtn() && $root.RoleCancelSubmit() && !$root.isBusy()">Cancel Submit</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString()))
                {
                    using (Html.BeginForm("GenerateExcel", "ProductionCard", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="LocationCode">
                        <input type="hidden" name="Unit">
                        <input type="hidden" name="Shift">
                        <input type="hidden" name="Process">
                        <input type="hidden" name="Group">
                        <input type="hidden" name="Brand">
                        <input type="hidden" name="KPSYear">
                        <input type="hidden" name="KPSWeek">
                        <input type="hidden" name="Date">
                        <button type="submit" class="btn btn-primary" data-bind="enable: !$root.isBusy()">Excel</button>
                    }
                }
                
                @*@Html.Partial("GridViewPageSizeSelector")*@
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped">
            <thead>
                <tr class="head">
                    <th colspan="2">Employee</th>
                    <th colspan="3">Wages</th>
                    <th rowspan="2">Remark</th>
                    <th rowspan="2">Comment</th>
                </tr>
                <tr class="head">
                    <th>Employee ID</th>
                    <th>Name</th>
                    <th>Production</th>
                    <th>Absent</th>
                    <th>Paid Other</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: {data: listDataItems, afterAdd: showGrid}" id="tbodyGrid">
                @*Insert template non disable*@
                <tr data-bind="if: ($parent.editingRowIndex() !== $index() && ($root.latestCondition() != 'Submitted' && $root.latestCondition() != 'Locked')), click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.EmployeeID"></span></td>
                    <td><span data-bind="text:$data.EmployeeName"></span></td>
                    <td><span data-bind="decimal:$data.Production"></span></td>
                    <td><span data-bind="text:$data.Absent"></span></td>
                    <td class="current"><span data-bind="decimal:$data.UpahLain"></span></td>
                    <td class="current hasModal" data-toggle="modal" data-target="#suratperiode" data-bind="click:$root.showSuratPeriode.bind($parent,$data,$index())">
                        <span data-bind="text:$data.Remark" class="hasModal"></span>
                    </td>
                    <td class="current"><span data-bind="text:$data.Comments"></span></td>
                </tr>
                @*Insert template disable*@
                <tr data-bind="if: ($parent.editingRowIndex() !== $index() && ($root.latestCondition() == 'Submitted' || $root.latestCondition() == 'Locked')), click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.EmployeeID"></span></td>
                    <td><span data-bind="text:$data.EmployeeName"></span></td>
                    <td><span data-bind="decimal:$data.Production"></span></td>
                    <td><span data-bind="text:$data.Absent"></span></td>
                    <td><span data-bind="decimal:$data.UpahLain"></span></td>
                    <td><span data-bind="text:$data.Remark"></span></td>
                    <td><span data-bind="text:$data.Comments"></span></td>
                </tr>
                @*Edit template non disable*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index() && ($root.latestCondition() != 'Submitted' && $root.latestCondition() != 'Locked')),
                                   click: $parent.selectRow.bind($data, $index()),
                                    event: {keydown:$parent.keydown}">
                    <td><span data-bind="text:$data.EmployeeID"></span></td>
                    <td><span data-bind="text:$data.EmployeeName"></span></td>
                    <td><span data-bind="decimal:$data.Production"></span></td>
                    <td><span data-bind="text:$data.Absent"></span></td>
                    <td class="current"><input data-bind="value:$data.UpahLain, valueUpdate:'afterkeydown'" class="form-control transparent" /></td>
                    <td class="current hasModal" data-toggle="modal" data-target="#suratperiode" data-bind="click:$root.showSuratPeriode.bind($parent,$data,$index())">
                        <span data-bind="text:$data.Remark" class="hasModal"></span>
                    </td>
                    <td class="current"><input data-bind="value:$data.Comments,tabToNext:[$parent,$data], valueUpdate:'afterkeydown'" class="form-control transparent" /></td>
                </tr>
                @*Edit template disable*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index() && ($root.latestCondition() == 'Submitted' || $root.latestCondition() == 'Locked')),
                                   click: $parent.selectRow.bind($data, $index()),
                                    event: {keydown:$parent.keydown}">
                    <td><span data-bind="text:$data.EmployeeID"></span></td>
                    <td><span data-bind="text:$data.EmployeeName"></span></td>
                    <td><span data-bind="decimal:$data.Production"></span></td>
                    <td><span data-bind="text:$data.Absent"></span></td>
                    <td><span data-bind="decimal:$data.UpahLain"></span></td>
                    <td><span data-bind="text:$data.Remark"></span></td>
                    <td><span data-bind="text:$data.Comments"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="9" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>

    <div class="row">
        <div class="col-lg-12">
            <p class="bg-primary withmargin">Current Approval: </p>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            @Html.Partial("TransactionHistory")
        </div>
    </div>
</div>

<!-- Modal Submit Group -->
<div class="modal fade" id="submitgroup" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Submit Production Card</h4>
            </div>
            <div class="modal-body">
                <h5>List Group</h5>
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>Group</th>
                        <th>Actual Production</th>
                        <th>Upah Lain</th>
                    </tr>
                    </thead>
                    <tbody data-bind='foreach: listUpahLainAllGroup'>
                        <tr>
                            <td><span data-bind="text: Group"></span></td>
                            <td><span data-bind="text: ActualProduction"></span></td>
                            <td><span data-bind="text: UpahLain"></span></td>
                        </tr>
                    </tbody>
                </table>
                
                <div class="question text-center">
                    <h5>Are you sure submit all group?</h5>
                    <button type="button" class="btn btn-default" data-dismiss="modal" data-bind="click:$root.submitAllGroup">Submit</button>
                    <button class="btn btn-default" data-dismiss="modal">Cancel</button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<!-- Modal End -->

<!-- Modal -->
<div class="modal fade" id="suratperiode" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Surat Periode Lalu</h4>
            </div>
            <div class="modal-body">
                <div class="col-lg-12">
                    <div class="row">
                        <label class="form-label col-lg-3">
                            ID
                        </label>
                        <div class="col-lg-5">
                            <input type="text" class="form-control" readonly="readonly" data-bind="value: ko.utils.unwrapObservable(employeeIdSuratPeriode)">
                        </div>
                    </div>
                    <div class="row">
                        <label class="form-label col-lg-3">
                            Absent Type
                        </label>
                        <div class="col-lg-5">
                            @Html.DropDownList("ddlAbsentTypeSuratPeriode", new SelectList(Model.AbsentTypeLookupLists, "AbsentType", "AbsentType"),
                                new
                                {
                                    @class = "selectpicker show-tick form-control",
                                    id = "ddlAbsentTypeSuratPeriode",
                                    data_live_search = "true",
                                    data_bind = "value: $root.absentTypeSuratPeriode, event : { change : $root.getMaxDaySuratPeriode}"

                                })
                        </div>
                    </div>
                    <div class="row">
                        <label class="form-label col-lg-3">
                            Max Day
                        </label>
                        <div class="col-lg-5">
                            <input type="text" class="form-control" readonly="readonly" data-bind="value: maxDaySuratPeriode">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="action-btn">
                                <button type="button" class="btn btn-primary" data-bind="click: $root.saveSuratPeriode">Save</button>
                                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="table-overflow">
                                <table class="table table-striped">
                                    <thead>
                                        <tr class="head">
                                            <th class="column-check">
                                                <input type="checkbox" data-bind="checked: SelectAll">
                                            </th>
                                            <th>Absent Date</th>
                                            <th>Absent Type</th>
                                        </tr>
                                    </thead>
                                    <tbody data-bind='foreach: listSuratPeriode'>
                                        <tr>
                                            <td><input type="checkbox" data-bind="checked: Status"></td>
                                            <td><span data-bind="text: AlphaDate"></span></td>
                                            <td><span data-bind="text: AbsentType"></span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal End -->
@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.Extenders.js" type="text/javascript"></script>
    <script type="text/javascript">

        (function(app) {
            app.EditGrid = function() {
                var self = this;

                self.firstInitFromUrl = ko.observable(false);
                self.itemLocations = ko.observableArray(@Html.Raw(Json.Encode(@Model.PLNTChildLocationLookupList)));
                self.itemAbsentTypes = @Html.Raw(Json.Encode(@Model.AbsentTypeLookupLists));

                self.filterLocationCode = ko.observable($("#ddlFilterLocationCode").val());
                self.filterLocationName = ko.observable();
                self.filterUnitCode = ko.observable('');
                self.filterShift = ko.observable($("#ddlShiftFilter").val());
                self.filterYear = ko.observable('@Model.DefaultYear');
                self.filterWeek = ko.observable('@Model.DefaultWeek');
                self.filterDate = ko.observable(moment().toDate());
                self.filterProcess = ko.observable('');
                self.filterGroup = ko.observable('');
                self.filterBrand = ko.observable('');
                self.editIndexRow = ko.observable(0);
                self.saved = ko.observable(true);
                self.revisionType = ko.observable(0);
                self.isLoading = ko.observable(false);
                self.firstLoad = ko.observable(true);
                self.RoleSave = ko.observable(false);
                self.RoleSubmit = ko.observable(false);
                self.RoleCancelSubmit = ko.observable(false);
                self.isBusy = ko.observable(true);

                self.enableSaveBtn = ko.observable(true);
                self.enableSubmitBtn = ko.observable(true);
                self.enableCancelSubmitBtn = ko.observable(false);

                self.ProductionCardDetail = ko.observable('');

                $("#tbodyGrid").hide();

                showGrid = function(elements) {
                    $(function() {
                        $("#tbodyGrid").show();
                    });
                }

                self.newData = {
                    Upahlain: ko.observable(''),
                    Remark: ko.observable(''),
                    Comments: ko.observable('')
                };

                $(document).ajaxComplete(function() {
                    if ($.active <= 1) {
                        self.isBusy(false);
                    }
                });

                $(document).ajaxStart(function() {
                    if (!self.isBusy()) self.isBusy(true);
                });

                //event on location dropdown change
                self.onLocationCodeChange = function() {

                    if (!self.firstLoad() && !self.isLoading()) {
                        self.isLoading(true);
                        self.enableSaveBtn(false);
                        async.series([
                                function(cb) {
                                    self.getLocationNameFilter(cb);
                                },
                                function(cb) {
                                    self.getUnitCodeSelectListByLocation(cb);
                                },
                                function(cb) {
                                    self.getShiftSelectList(cb);
                                },
                                function(cb) {
                                    self.getProcessSelectList(cb);
                                },
                                function(cb) {
                                    self.getGroupSelectList(cb);
                                },
                                function(cb) {
                                    self.getBrandSelectList(cb);
                                }
                            ],
                            function() {
                                self.isLoading(false);
                            });
                    }
                };

                self.onUnitCodeChange = function() {

                    if (!self.firstLoad() && !self.isLoading()) {
                        self.isLoading(true);
                        self.enableSaveBtn(false);
                        async.series([
                                function(cb) {
                                    self.getLocationNameFilter(cb);
                                },
                                function(cb) {
                                    self.getShiftSelectList(cb);
                                },
                                function(cb) {
                                    self.getProcessSelectList(cb);
                                },
                                function(cb) {
                                    self.getGroupSelectList(cb);
                                },
                                function(cb) {
                                    self.getBrandSelectList(cb);
                                }
                            ],
                            function() {
                                self.isLoading(false);
                            });
                    }
                }

                self.onShiftChange = function() {
                    if (!self.firstLoad() && !self.isLoading()) {
                        self.isLoading(true);
                        self.enableSaveBtn(false);
                        async.series([
                                function(cb) {
                                    self.getProcessSelectList(cb);
                                },
                                function(cb) {
                                    self.getGroupSelectList(cb);
                                },
                                function(cb) {
                                    self.getBrandSelectList(cb);
                                }
                            ],
                            function() {
                                self.isLoading(false);
                            });
                    }
                }

                self.onGroupChange = function() {
                    if (!self.firstLoad() && !self.isLoading()) {
                        self.isLoading(true);
                        self.enableSaveBtn(false);
                        async.series([
                                function(cb) {
                                    self.getBrandSelectList(cb);
                                }
                            ],
                            function() {
                                self.isLoading(false);
                            });
                    }
                }

                self.onBrandChange = function() {
                    if (!self.firstLoad() && !self.isLoading()) {
                        self.enableSaveBtn(false);
                    }
                }

                self.onDateChange = function() {
                    if (!self.firstLoad() && !self.isLoading()) {
                        self.isLoading(true);
                        self.enableSaveBtn(false);
                        async.series([
                                function(cb){
                                    self.getAllGroupList(cb);
                                },
                                function(cb) {
                                    self.getShiftSelectList(cb);
                                },
                                function(cb) {
                                    self.getProcessSelectList(cb);
                                },
                                function(cb) {
                                    self.getGroupSelectList(cb);
                                },
                                function(cb) {
                                    self.getBrandSelectList(cb);
                                }
                            ],
                            function() {
                                self.isLoading(false);
                            });
                    }
                }

                self.onUnitProcessOnSelection = function() {
                    if (!self.firstLoad() && !self.isLoading()) {
                        self.isLoading(true);
                        self.enableSaveBtn(false);
                        async.series([
                                function(cb) {
                                    self.getGroupSelectList(cb);
                                },
                                function(cb) {
                                    self.getBrandSelectList(cb);
                                }
                            ],
                            function() {
                                self.isLoading(false);
                            });
                    }
                };

                //event on Year dropdown change
                self.onYearSelectedChange = function() {
                    if (!self.firstLoad() && !self.isLoading()) {
                        self.isLoading(true);
                        self.enableSaveBtn(false);
                        async.series([
                                function(cb) {
                                    self.GetWeekFromSelectList(cb);
                                },
                                function(cb) {
                                    self.setDateRange(cb);
                                }
                            ],
                            function() {
                                self.isLoading(false);
                            });
                    }
                };

                self.onWeekChange = function() {
                    if (!self.firstLoad() && !self.isLoading()) {
                        self.isLoading(true);
                        self.enableSaveBtn(false);
                        async.series([
                                function(cb) {
                                    self.setDateRange(cb);
                                },
                                function(cb) {
                                    self.getShiftSelectList(cb);
                                },
                                function(cb) {
                                    self.getProcessSelectList(cb);
                                },
                                function(cb) {
                                    self.getGroupSelectList(cb);
                                },
                                function(cb) {
                                    self.getBrandSelectList(cb);
                                }
                            ],
                            function() {
                                self.isLoading(false);
                            });
                    }
                }

                //get location name by location code
                self.getLocationNameFilter = function(cb) {
                    //for (var i = 0; i < self.itemLocations.length; i++) {
                    //    if (self.itemLocations[i].LocationCode == self.filterLocationCode()) {
                    //        self.filterLocationName(self.itemLocations[i].LocationName);
                    //        break;
                    //    }
                    //}
                    self.itemLocations().map(function(v) {
                        if (typeof v.LocationCode !== 'undefined' && v.LocationCode == self.filterLocationCode()) {
                            self.filterLocationName(v.LocationName);
                        }
                    });

                    if (typeof cb == 'function') cb();
                };

                //prepare unitCode selectlist data
                self.unitCodeSelectList = ko.observableArray();
                self.getUnitCodeSelectListByLocation = function(cb) {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/GetUnitCodeSelectListByLocationCode"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { locationCode: self.filterLocationCode() },
                        dataType: 'json',
                        success: function(data) {
                            $('#ddlUnitCodeFilter').find('option').remove();
                            $('#ddlUnitCodeFilter').selectpicker('refresh');
                            self.unitCodeSelectList(data);

                            if (self.firstInitFromUrl()) {
                                self.filterUnitCode('@Model.Param2UnitCode');
                            }
                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };

                //prepare Shift selectlist data
                self.shiftSelectList = ko.observableArray([]);
                self.getShiftSelectList = function(cb) {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/GetShiftByLocation"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { locationCode: self.filterLocationCode() },
                        dataType: 'json',
                        success: function(data) {
                            $('#ddlShiftFilter').find('option').remove();
                            $('#ddlShiftFilter').selectpicker('refresh');
                            var kpsWeekModel = [];
                            $.each(data,
                                function(index, value) {
                                    kpsWeekModel.push({ "Text": value.Text, "Value": value.Text });
                                });
                            self.shiftSelectList(kpsWeekModel);
                            self.filterShift(kpsWeekModel[0].Text);

                            if (self.firstInitFromUrl()) {
                                self.filterShift('@Model.Param3Shift');
                            }
                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };

                //prepare Process selectlist data
                self.processSelectList = ko.observableArray([]);
                self.getProcessSelectList = function(cb) {
                    $.ajax({
                        async: "false",
                        url: @Html.BaseUrl("ProductionCard/GetProcessByLocationCode"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: {
                            locationCode: self.filterLocationCode(),
                            unit: self.filterUnitCode(),
                            shift: self.filterShift(),
                            productionDate: self.filterDate()
                        },
                        dataType: 'json',
                        success: function(data) {
                            $('#ddlProcessFilter').find('option').remove();
                            $('#ddlProcessFilter').selectpicker('refresh');
                            var processModel = [];
                            $.each(data,
                                function(index, value) {
                                    processModel.push({ "Text": value.Text, "Value": value.Text });
                                });
                            self.processSelectList(processModel);
                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };

                // get all groupcode
                self.allGroupList = ko.observableArray([]);
                self.getAllGroupList = function(cb){
                    $.ajax({
                        async: "false",
                        url: @Html.BaseUrl("ProductionCard/GetAllGroupCodeByLocationCode"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: {
                            locationCode: self.filterLocationCode(),
                            unit: self.filterUnitCode,
                            productionDate: self.filterDate()
                        },
                        dataType: 'json',
                        success: function(data) {
                            $('#ddlGroupFilter').find('option').remove();
                            $('#ddlGroupFilter').selectpicker('refresh');
                            var groupModel = [];
                            $.each(data,
                                function(index, value) {
                                    groupModel.push({ "Text": value.Text, "Value": value.Text });
                                });
                            self.allGroupList(groupModel);
                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };

                //prepare Process selectlist data
                self.groupSelectList = ko.observableArray([]);
                self.getGroupSelectList = function(cb) {
                    $.ajax({
                        async: "false",
                        url: @Html.BaseUrl("ProductionCard/GetGroupCodeByLocationCode"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: {
                            locationCode: self.filterLocationCode(),
                            unit: self.filterUnitCode,
                            process: self.filterProcess,
                            productionDate: self.filterDate(),
                            page : 'ProdCard'
                        },
                        dataType: 'json',
                        success: function(data) {
                            $('#ddlGroupFilter').find('option').remove();
                            $('#ddlGroupFilter').selectpicker('refresh');
                            var groupModel = [];
                            $.each(data,
                                function(index, value) {
                                    groupModel.push({ "Text": value.Text, "Value": value.Text });
                                });
                            self.groupSelectList(groupModel);
                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };

                //prepare Brand selectlist data
                self.brandSelectList = ko.observableArray([]);
                self.getBrandSelectList = function(cb) {
                    $.ajax({
                        async: "false",
                        url: @Html.BaseUrl("ProductionCard/GetBrandCodeByLocationCode"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: {
                            locationCode: self.filterLocationCode(),
                            unit: self.filterUnitCode(),
                            process: self.filterProcess(),
                            productionDate: self.filterDate()
                        },
                        dataType: 'json',
                        success: function(data) {
                            $('#ddlBrandFilter').find('option').remove();
                            $('#ddlBrandFilter').selectpicker('refresh');
                            var brandModel = [];
                            $.each(data,
                                function(index, value) {
                                    brandModel.push({ "Text": value.Text, "Value": value.Text });
                                });
                            self.brandSelectList(brandModel);

                            if (self.firstInitFromUrl()) {
                                self.filterBrand('@Model.Param4BrandCode');
                            }
                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };


                //prepare Week selectlist data
                self.WeekFromSelectList = ko.observableArray([]);
                self.GetWeekFromSelectList = function(cb) {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/GetWeekByYear"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { year: self.filterYear() },
                        dataType: 'json',
                        success: function(data) {
                            $('#filterWeek').find('option').remove();
                            $('#filterWeek').selectpicker('refresh');
                            var kpsWeekModel = [];
                            $.each(data,
                                function(index, value) {
                                    kpsWeekModel.push({ "Text": value, "Value": value });
                                });
                            self.WeekFromSelectList(kpsWeekModel);
                            self.filterWeek('@Model.DefaultWeek');

                            if (self.firstInitFromUrl()) {
                                self.filterWeek('@Model.Param6KPSWeek');
                            }
                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };

                //prepare Date selectlist data
                self.DateFromSelectList = ko.observableArray([]);
                self.setDateRange = function(cb) {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/GetDateByYearWeek"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { year: self.filterYear(), week: self.filterWeek() },
                        dataType: 'json',
                        success: function(data) {
                            self.DateFromSelectList([]);
                            $('#filterDate').find('option').remove();
                            $('#filterDate').selectpicker('refresh');
                            var model = [];
                            $.each(data,
                                function(index, value) {
                                    model.push({ "Text": value.Text, "Value": value.Text });
                                });
                            self.DateFromSelectList(model);
                            self.filterDate(self.DateFromSelectList()[0]);

                            if (self.firstInitFromUrl()) {
                                var dt = moment('@Model.Param7Date', 'DD/MM/YYYY').format('DD/MM/YYYY');
                                self.filterDate(dt);
                            }
                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };

                self.gridView = new app.GridViewModel({
                    Criteria: {
                        PageSize: 10,
                        PageIndex: 1,
                        SortExpression: "EmployeeID",
                        SortOrder: "ASC",
                        LocationCode: self.filterLocationCode,
                        Unit: self.filterUnitCode,
                        Shift: self.filterShift,
                        Process: self.filterProcess,
                        Group: self.filterGroup,
                        Brand: self.filterBrand,
                        KPSYear: self.filterYear,
                        KPSWeek: self.filterWeek,
                        Date: self.filterDate
                    },
                    DataSourceUrl: @Html.BaseUrl("ProductionCard/GetProductionCards"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 1
                });

                self.gridView.mapping = {
                    create: function(options) {
                        return new prodCard(options.data);
                    }
                };

                // Field Validations
                self.gridView.applyValidationRules = function(entity) {
                };

                self.listSuratPeriode = ko.observableArray([]);
                self.listUpahLainAllGroup = ko.observableArray([]);
                self.employeeIdSuratPeriode = ko.observable('');
                self.absentTypeSuratPeriode = ko.observable('');
                self.maxDaySuratPeriode = ko.observable(0);

                //submit group
                self.showSubmitAllGroup = function() {
                    async.series([
                            function(cb) {
                                self.getTotalProdAndPayOther(cb);
                            }
                        ],
                        function() {
                            //panggil modal
                            $("#submitgroup").modal("toggle");
                        }
                    );
                };

                

                // get total prod and payment and show on popup grid
                self.getTotalProdAndPayOther = function(cb) {
                    self.listUpahLainAllGroup([]);
                    var list = [];
                    $.each(self.allGroupList(),
                        function(index, gr) {
                            list.push(gr.Value);
                        });
                    var datas = {
                        //"Parameters": {
                        "LocationCode": self.filterLocationCode(),
                        "Unit": self.filterUnitCode(),
                        "Shift": self.filterShift(),
                        "Process": self.filterProcess(), //process tidak dipakai (karna load all group)
                        "Group": list,
                        "Brand": self.filterBrand(),
                        "KPSYear": self.filterYear(),
                        "KPSWeek": self.filterWeek(),
                        "Date": self.filterDate()
                        //}
                    };

                    for (var d in datas.edit) {
                        parseToFloat(datas.edit[d].Upahlain);
                    }

                    datas = JSON.stringify(datas);
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/GetTotalProdAndUpahLainBasedOnGroupCode"),
                        type: 'POST',
                        data: datas,
                        dataType: 'json',
                        contentType: "application/json",
                        success: function(data) {
                            self.listUpahLainAllGroup(data);
                        }
                    });

                    //});

                    if (typeof cb == 'function') cb();
                }

                // Get List Data on Popup Surat Periode lalu
                self.showSuratPeriode = function(event, index) {
                    self.editIndexRow(index);
                    self.employeeIdSuratPeriode(event.EmployeeID);
                    var check = [];
                    var remarkRaw = event.Remark();
                    if (remarkRaw != null) {
                        check = remarkRaw.split(';');
                    }
                    self.getMaxDaySuratPeriode();

                    var data = {
                        employeeId: event.EmployeeID,
                        productionDate: event.ProductionDate,
                        locationCode: event.LocationCode,
                        unitCode: event.UnitCode,
                        shift: event.Shift,
                        groupCode: event.GroupCode,
                        processGroup: event.ProcessGroup,
                        brandCode: event.BrandCode,
                        revisionType: event.RevisionType
                    };

                    self.ProductionCardDetail(data);

                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/GetSuratPeriode"),
                        type: "GET",
                        data: {
                            employeeId: event.EmployeeID,
                            productionDate: event.ProductionDate,
                            locationCode: event.LocationCode,
                            unitCode: event.UnitCode,
                            shift: event.Shift,
                            groupCode: event.GroupCode,
                            processGroup: event.ProcessGroup,
                            brandCode: event.BrandCode,
                            remark: event.Remark
                        },
                        dataType: "json",
                        traditional: true,
                        contentType: "application/json; charset=utf-8",
                        success: function(data) {
                            var list = [];
                            $.each(data,
                                function(index, value) {
                                    var checked = false;
                                    $.each(check,
                                        function(i, j) {
                                            if (value.AlphaDate == j) {
                                                checked = true;
                                            }
                                        });
                                    //if((!!!value.Remark) | (value.Remark == 'x' && checked == true)) {
                                    //console.log('1')
                                    //if((!!!value.Remark)) {
                                    //console.log('2')
                                    list.push({
                                        "Status": ko.observable(checked),
                                        "AlphaDate": value.AlphaDate,
                                        "AbsentType": value.AbsentType,
                                        "RevisionType": value.RevisionType,
                                        "LocationCode": value.LocationCode,
                                        "UnitCode": value.UnitCode,
                                        "BrandCode": value.BrandCode,
                                        "ProcessGroup": value.ProcessGroup,
                                        "GroupCode": value.GroupCode,
                                        "EmployeeID": value.EmployeeID,
                                        "ProductionDate": value.ProductionDate
                                    });
                                    //}
                                });
                            self.listSuratPeriode(list);
                        }
                    });
                    $('#ddlAbsentTypeSuratPeriode').val(self.absentTypeSuratPeriode());
                    $('#ddlAbsentTypeSuratPeriode').trigger('change.abs.preserveSelected');
                    $('#ddlAbsentTypeSuratPeriode').selectpicker('refresh');
                };

                function prodCard(data) {
                    ko.mapping.fromJS(data, {}, this);

                    //data
                    var production = ko.isObservable(data.Production) ? data.Production() : data.Production;
                    var upahLain = ko.isObservable(data.UpahLain) ? data.UpahLain() : data.UpahLain;

                    //rounded value
                    this.Production = ko.observable(production).extend({ numeric: 2 });
                    this.UpahLain = ko.observable(upahLain).extend({ numeric: 2 });
                };

                // Get Max Day based EmployeeID and AbsentType
                self.getMaxDaySuratPeriode = function() {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/GetMaxDaySuratPeriodeLalu"),
                        type: "GET",
                        data: {
                            employeeId: ko.utils.unwrapObservable(self.employeeIdSuratPeriode()),
                            absentType: $("#ddlAbsentTypeSuratPeriode").val(),
                            year: self.filterYear
                        },
                        dataType: "json",
                        traditional: true,
                        contentType: "application/json; charset=utf-8",
                        success: function(data) {
                            self.maxDaySuratPeriode(data);
                        }
                    });
                };

                self.SelectAll = ko.computed({
                    read: function() {
                        var item = ko.utils.arrayFirst(self.listSuratPeriode(),
                            function(item) {
                                return !item.Status();
                            });
                        return item == null;
                    },
                    write: function(value) {
                        ko.utils.arrayForEach(self.listSuratPeriode(),
                            function(item) {
                                item.Status(value);
                            });
                    }
                });

                self.saveSuratPeriode = function() {
                    var count = 0;
                    var alphaReplace = "";
                    var remark = "";
                    var dates = "";
                    var result = "";
                    var isAlpa = false;
                    $.each(self.listSuratPeriode(),
                        function(index, value) {
                            //console.log('1 value.Status =' + ko.utils.unwrapObservable(value.Status));
                            if (ko.utils.unwrapObservable(value.Status)) {
                                dates += value.AlphaDate + ";";
                                count++;
                            }
                        });

                    if (self.maxDaySuratPeriode() < 0) {
                        $('#suratperiode').modal('hide');

                        SKTIS.Helper.Notification('Cannot choose Alpha Date if Max Day 0', 'error');

                        return;
                    }

                    if (self.maxDaySuratPeriode() != 0 && count > self.maxDaySuratPeriode()) {
                        $('#suratperiode').modal('hide');

                        SKTIS.Helper.Notification('Chosen Alpha date are greater than max day', 'error');

                        return;
                    }

                    for (var i = 0; i < self.itemAbsentTypes.length; i++) {
                        if (self.itemAbsentTypes[i].AbsentType == $("#ddlAbsentTypeSuratPeriode").val()) {
                            //console.log('self.itemAbsentTypes[i].AlphaReplace = ' + self.itemAbsentTypes[i].AlphaReplace);
                            alphaReplace = self.itemAbsentTypes[i].AlphaReplace;
                            //if(!isAlpa) {
                            //    alphaReplace = '';
                            //}
                            if (count <= 0) {
                                alphaReplace = '';
                            }
                            break;
                        }
                    }
                    //console.log(alphaReplace);
                    if (alphaReplace != "") {
                        result = (alphaReplace.replace('##',
                                Array(Math.max(2 - String(2).length + 1, 0)).join(0) + count)) +
                            ";" +
                            dates;
                        result = result.substring(0, result.length - 1)
                    }

                    self.gridView.listDataItems()[self.editIndexRow()].Remark(result);
                    //console.log('result = ' + result);
                    var suratPeriodeLaluData = ko.mapping.toJS(self.ProductionCardDetail());
                    suratPeriodeLaluData.SuratPeriodeLalu = ko.mapping.toJS(self.listSuratPeriode());
                    suratPeriodeLaluData.Remark = result;

                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/SaveSuratPeriodeLalu"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(suratPeriodeLaluData),
                        dataType: 'json'
                    }).done(function() {
                        $('#suratperiode').modal('hide');
                    })

                };

                self.save = function() {
                    $("#tbodyGrid").hide();

                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "Parameters": {
                            "saveButton": true
                        },
                        "edit": ko.mapping.toJS(self.gridView.listDataItems())
                    };

                    for (var d in datas.edit) {
                        //    //console.log(datas.edit[d].UpahLain);
                        parseToFloat(datas.edit[d].Upahlain);
                        //    console.log(datas.edit[d].UpahLain);
                    }

                    datas = JSON.stringify(datas);
                    self.saveProcess(datas, true);
                    self.saved(true);
                    self.enableSubmitBtn(true);
                    self.historyGridView.search({});
                    self.RoleButton();
                };

                self.saveOnSubmitButton = function(cb) {
                    $("#tbodyGrid").hide();

                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "Parameters": {
                            "saveButton": true
                        },
                        "edit": ko.mapping.toJS(self.gridView.listDataItems())
                    };

                    for (var d in datas.edit) {
                        //    //console.log(datas.edit[d].UpahLain);
                        parseToFloat(datas.edit[d].Upahlain);
                        //    console.log(datas.edit[d].UpahLain);
                    }

                    datas = JSON.stringify(datas);
                    self.saveProcess(datas, true);
                    self.saved(true);

                    if (typeof cb == 'function') cb();
                };

                self.saveProcess = function(datas, fromPopup) {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/SaveProductionCards"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {

                            var $notif = $('#noty_top_layout_container').children('li');

                            if (fromPopup && $notif.length <= 1)
                                SKTIS.Helper.ResponseNotification("", "Save Production Card", "");

                            self.gridView.sort('EmployeeID', 'ASC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                        }
                    });

                };

                // save & submit all group ( popup submit all group )
                self.submitAllGroup = function() {
                    async.series([
                            function(cb) {
                                var list = [];
                                $.each(self.listUpahLainAllGroup(),
                                    function(index, value) {
                                        //console.log(value);
                                        //if (ko.utils.unwrapObservable(value.Group)) {
                                            list.push({
                                                "GroupCode" : ko.utils.unwrapObservable(value.Group),
                                                "RevisionType" : value.RevisionType
                                            });
                                        //}
                                    });
                                //console.log(list);
                                //WPC/ID26/1/2023/2135/FA010783.18/2017/2/5/0
                                //WPC/ID26/1/2021/1111/FA064382.00/2017/20/4/0
                                var datas = {
                                    "Parameters": {
                                        "locationCode": self.filterLocationCode(),
                                        "shift": self.filterShift(),
                                        "unitCode": self.filterUnitCode(),
                                        "brandCode": self.filterBrand(),
                                        "year": self.filterYear(),
                                        "week": self.filterWeek(),
                                        "date": self.filterDate()
                                    },
                                    "Edit": list //ko.mapping.toJS(self.gridView.listDataItems())
                                };
                                datas = JSON.stringify(datas);

                                $.ajax({
                                    url: @Html.BaseUrl("ProductionCard/SubmitAllGroupProductionCards"),
                                    type: 'POST',
                                    contentType: 'application/json',
                                    data: datas,
                                    dataType: 'json',
                                    success: function(data) {

                                        if ($('#noty_top_layout_container').children('li').length <= 1)
                                            SKTIS.Helper.Notification(data);

                                        //self.gridView.sort('EmployeeID', 'ASC');
                                    },
                                    complete: function() {
                                        if (typeof cb == 'function') cb();
                                    }
                                });
                            },
                            function(cb) {
                                self.checkButtonCondition(cb);
                            }
                        ],
                        function() {
                            self.historyGridView.search({});
                            self.RoleButton();
                        }
                    );
                };

                self.submitDatas = function() {
                    $("#tbodyGrid").hide();

                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    async.series([
                            function(cb) {
                                //perform save before submit
                                $("#tbodyGrid").hide();

                                if (self.gridView.editingRowIndex() !== -1)
                                    return;

                                var datas = {
                                    "Parameters": {
                                        "saveButton": true
                                    },
                                    "edit": ko.mapping.toJS(self.gridView.listDataItems())
                                };

                                for (var d in datas.edit) {
                                    parseToFloat(datas.edit[d].Upahlain);
                                }

                                datas = JSON.stringify(datas);
                                //self.saveProcess(datas, true);
                                $.ajax({
                                    url: @Html.BaseUrl("ProductionCard/SaveProductionCards"),
                                    type: 'POST',
                                    contentType: 'application/json',
                                    data: datas,
                                    dataType: 'json',
                                    success: function(data) {

                                        var $notif = $('#noty_top_layout_container').children('li');

                                        if ($notif.length <= 1)
                                            SKTIS.Helper.ResponseNotification("", "Save Production Card", "");

                                        self.gridView.sort('EmployeeID', 'ASC');
                                        self.gridView.listNewItems.removeAll();
                                        self.gridView.listEditItems.removeAll();
                                        self.saved(true);
                                    },
                                    complete: function() {
                                        if (typeof cb == 'function') cb();
                                    }
                                });


                            },

                            //replace with new submit method
                            function(cb) {
                                var datas = {
                                    "Parameters": {
                                        "submitButton": true,
                                        "locationCode": self.filterLocationCode(),
                                        "unitCode": self.filterUnitCode(),
                                        "groupCode": self.filterGroup(),
                                        "brandCode": self.filterBrand(),
                                        "shift": self.filterShift(),
                                        "year": self.filterYear(),
                                        "week": self.filterWeek(),
                                        "date": self.filterDate()
                                    },
                                    "edit": ko.mapping.toJS(self.gridView.listDataItems())
                                };
                                datas = JSON.stringify(datas);

                                $.ajax({
                                    url: @Html.BaseUrl("ProductionCard/SubmitProductionCards"),
                                    type: 'POST',
                                    contentType: 'application/json',
                                    data: datas,
                                    dataType: 'json',
                                    success: function(data) {

                                        if ($('#noty_top_layout_container').children('li').length <= 1)
                                            SKTIS.Helper.Notification(data);

                                        //self.gridView.sort('EmployeeID', 'ASC');
                                    },
                                    complete: function() {
                                        if (typeof cb == 'function') cb();
                                    }
                                });

                            },
                            function(cb) {
                                self.checkButtonCondition(cb);
                            }
                        ],
                        function() {
                            self.historyGridView.search({});
                            self.RoleButton();
                        }
                    );

                    //self.enableSubmitBtn(false);
                    //self.enableCancelSubmitBtn(true);

                };

                self.cancelSubmit = function() {
                    $("#tbodyGrid").hide();

                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "Parameters": {
                            "submitButton": false,
                            "locationCode": self.filterLocationCode(),
                            "unitCode": self.filterUnitCode(),
                            "groupCode": self.filterGroup(),
                            "brandCode": self.filterBrand(),
                            "shift": self.filterShift(),
                            "year": self.filterYear(),
                            "week": self.filterWeek(),
                            "date": self.filterDate()
                        },
                        "edit": ko.mapping.toJS(self.gridView.listDataItems())
                    };
                    datas = JSON.stringify(datas);
                    self.CancelSubmitProductionCards(datas);
                    //self.enableSubmitBtn(true);
                    //self.enableCancelSubmitBtn(false);

                };

                self.generateTransactionLog = function(datas, cb) {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/SubmitProductionCards"),
                        type: 'POST',
                        async: true,
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {

                            if ($('#noty_top_layout_container').children('li').length <= 1)
                                SKTIS.Helper.Notification(data);

                            //self.gridView.sort('EmployeeID', 'ASC');
                        },
                        complete: function() {
                            if (typeof cb == 'function') cb();
                        }
                    });
                    self.checkButtonCondition();
                };

                self.CancelSubmitProductionCards = function(datas, cb) {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/CancelSubmitProductionCards"),
                        type: 'POST',
                        async: true,
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {

                            if ($('#noty_top_layout_container').children('li').length <= 1)
                                SKTIS.Helper.Notification(data);

                            //self.gridView.sort('EmployeeID', 'ASC');
                        },
                        complete: function() {
                            if (typeof cb == 'function') cb();
                        }
                    });
                    self.checkButtonCondition();
                };

                // Load Data
                self.search = function() {

                    self.enableSaveBtn(true);
                    //self.enableSubmitBtn(true);

                    $("#tbodyGrid").hide();
                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker
                        .modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) ==
                        true) {
                        return;
                    } else {
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }

                    self.gridView.search({},
                        function(response) {
                            if (response.status == 'KO') {
                                SKTIS.Helper.Notification(response.message, 'error');
                                $('.empty-row-message').html(response.message);
                            } else if (response.status == 'Empty') {

                                self.enableSaveBtn(false);
                                self.enableSubmitBtn(false);

                                self.RemoveNotification();

                                //SKTIS.Helper.Notification(response.message,'warning');
                                $('.empty-row-message').html('@CommonLabel.lblDataEmpty');


                                if (self.gridView.listDataItems().length) {
                                    self.gridView.listDataItems().map(function(item) {
                                        self.revisionType(item.RevisionType());
                                    });
                                    //self.checkButtonCondition();
                                }

                            }


                        });

                    async.series([
                            function(cb) {
                                self.checkButtonCondition(cb);
                            },
                            function(cb) {
                                self.RoleButton(cb);
                            },
                        ],
                        function() {
                            if (!self.isLoading()) {
                                self.loadHistory();
                                self.loadFlow();
                            }
                        });

                };

                self.RoleButton = function(cb) {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/RoleButton"),
                        type: 'POST',
                        async: true,
                        contentType: 'application/json',
                        data: ko.toJSON({
                            LocationCode: self.filterLocationCode,
                            Unit: self.filterUnitCode,
                            Shift: self.filterShift,
                            Process: self.filterProcess,
                            Group: self.filterGroup,
                            Brand: self.filterBrand,
                            KPSYear: self.filterYear,
                            KPSWeek: self.filterWeek,
                            Date: self.filterDate,
                            RevisionType: self.revisionType
                        }),
                        dataType: 'json',
                        success: function(data) {
                            self.RoleSave(data.Save);
                            self.RoleSubmit(data.Submit);
                            self.RoleCancelSubmit(data.CancelSubmit);
                            //console.log(self.RoleSave() +' / '+self.RoleSubmit() + ' / '+self.RoleCancelSubmit());
                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };

                self.latestCondition = ko.observable("");
                self.checkButtonCondition = function(cb) {
                    $.ajax({
                        url: @Html.BaseUrl("ProductionCard/GetLastConditionTranslogProdCard"),
                        type: 'POST',
                        async: true,
                        contentType: 'application/json',
                        data: ko.toJSON({
                            LocationCode: self.filterLocationCode,
                            Unit: self.filterUnitCode,
                            Shift: self.filterShift,
                            Process: self.filterProcess,
                            Group: self.filterGroup,
                            Brand: self.filterBrand,
                            KPSYear: self.filterYear,
                            KPSWeek: self.filterWeek,
                            Date: self.filterDate,
                            RevisionType: self.revisionType
                        }),
                        dataType: 'json',
                        success: function(data) {
                            if (self.gridView.listDataItems().length === 0) {
                                self.enableSaveBtn(false);
                                self.enableSubmitBtn(false);
                                return;
                            }
                            //console.log(data);
                            if (data == "Open") {
                                self.latestCondition(data);
                                self.enableSaveBtn(true);
                                self.enableSubmitBtn(false);
                                self.enableCancelSubmitBtn(false);
                                return;
                            }

                            if (data == "Submitted") {
                                self.enableSaveBtn(false);
                                self.enableSubmitBtn(false);
                                self.enableCancelSubmitBtn(true);
                                self.latestCondition(data);
                                return;
                            }

                            if (data == "Locked") {
                                self.enableSaveBtn(false);
                                self.enableSubmitBtn(false);
                                self.enableCancelSubmitBtn(false);
                                self.latestCondition(data);
                                return;
                            }

                        },
                        complete: function() {
                            if (typeof cb != 'undefined') cb();
                        }
                    });
                };

                //description : generateExcel
                self.generateExcel = function(formElement) {
                    $(formElement).find("input[name=LocationCode]").val($('#ddlFilterLocationCode').val());
                    $(formElement).find("input[name=Unit]").val($('#ddlUnitCodeFilter').val());
                    $(formElement).find("input[name=Shift]").val($('#ddlShiftFilter').val());
                    $(formElement).find("input[name=Process]").val($('#ddlProcessFilter').val());
                    $(formElement).find("input[name=Group]").val($('#ddlGroupFilter').val());
                    $(formElement).find("input[name=Brand]").val($('#ddlBrandFilter').val());
                    $(formElement).find("input[name=KPSYear]").val($('#filterYear').val());
                    $(formElement).find("input[name=KPSWeek]").val($('#filterWeek').val());
                    $(formElement).find("input[name=Date]").val($('#filterDate').val());
                    return true;
                };

                // TRANSACTION HISTORY AND FLOW
                self.historyGridView = new app.GridViewModel({
                    Criteria: {
                        PageSize: 10,
                        PageIndex: 1,
                        SortExpression: "UpdatedDate",
                        SortOrder: "DESC",
                        code_1: 'WPC',
                        code_2: self.filterLocationCode,
                        code_3: self.filterShift,
                        code_4: self.filterUnitCode,
                        code_5: self.filterGroup,
                        code_6: self.filterBrand,
                        code_7: self.filterYear,
                        code_8: self.filterWeek,
                        code_9: self.filterDate
                    },
                    DataSourceUrl: @Html.BaseUrl("ProductionCard/GetHistory"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 1
                });
                self.flowGridView = new app.GridViewModel({
                    Criteria: {
                        PageSize: 10,
                        PageIndex: 1,
                        SortExpression: "",
                        SortOrder: "",
                        FunctionName: 'ProductionCardApprovalDetail'
                    },
                    DataSourceUrl: @Html.BaseUrl("ProductionCard/GetFlow"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 1
                });

                self.loadHistory = function(cb) {
                    self.historyGridView.search({},
                        function(response) {
                            if (response.status == 'KO') {
                                SKTIS.Helper.Notification(response.message, 'error');
                                $('.empty-row-message').html(response.message);
                            } else if (response.status == 'Empty') {

                                self.RemoveNotification();

                                //SKTIS.Helper.Notification(response.message,'warning');
                                $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                            }

                            if (typeof cb != 'undefined') cb();
                        });
                };
                self.loadFlow = function(cb) {
                    self.flowGridView.search({},
                        function(response) {
                            if (response.status == 'KO') {
                                SKTIS.Helper.Notification(response.message, 'error');
                                $('.empty-row-message').html(response.message);
                            } else if (response.status == 'Empty') {

                                self.RemoveNotification();

                                //SKTIS.Helper.Notification(response.message,'warning');
                                $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                            }

                            if (typeof cb != 'undefined') cb();
                        });
                };
                // END OF TRANSACTION HISTORY AND FLOW

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };

                self.init = function() {

                    if (typeof '@Model.Param1LocationCode' != 'undefined' && '@Model.Param1LocationCode') {
                        self.firstInitFromUrl(true);
                    };

                    if (self.firstInitFromUrl()) {
                        self.filterYear('@Model.Param5KPSYear');
                        self.filterLocationCode('@Model.Param1LocationCode');
                    } else if (self.filterLocationCode() == null)
                        self.filterLocationCode(self.itemLocations()[0].LocationCode);

                    async.series([
                            function(cb) {
                                self.getLocationNameFilter(cb);
                            },
                            function(cb) {
                                if (self.firstInitFromUrl()) {
                                    self.filterLocationCode('@Model.Param1LocationCode');
                                }
                                self.getUnitCodeSelectListByLocation(cb);
                            },
                            function(cb) {
                                self.getShiftSelectList(cb);
                            },
                            function(cb) {
                                self.getProcessSelectList(cb);
                            },
                            function(cb) {
                                self.getGroupSelectList(cb);
                            },
                            function(cb) {
                                self.GetWeekFromSelectList(cb);
                            },
                            function(cb) {
                                self.setDateRange(cb);
                            },
                            function(cb) {
                                self.getBrandSelectList(cb);
                            },
                            function(cb){
                                self.getAllGroupList(cb);
                            }
                        ],
                        function() {
                            self.search();
                            self.firstLoad(false);
                            // Broadcast that page load filters already completed
                            self.isLoading(false);
                            self.firstInitFromUrl(false);
                        });
                };

                self.init();
            };
            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});

    </script>
}