@model SKTISWebsite.Models.TPOFeeAPOpen.InitTPOFeeAPOpenViewModel
@using SKTISWebsite.Helper
@{ Html.SetPageTitle(" TPO Fee Open List"); }
@using HMS.SKTIS.Application.Resources

<div class="col-lg-12" data-bind="with: gridView">
    <!--  Approval List Here  -->
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-3">
                Regional
            </label>
            <div class="col-lg-3">
                @Html.DropDownList("ddlFilterRegional", new SelectList(Model.Regional, "Text", "Text"),
                    new
                    {
                        @class = "selectpicker show-tick form-control",
                        id = "ddlFilterRegional",
                        data_live_search = "true",
                        data_bind = "value:$root.filterRegional"
                    })
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-3">
                KPS Year
            </label>
            <div class="col-lg-4">
                @Html.DropDownList("filterYear", Model.YearSelectList,
                             new Dictionary<string, object> { { "data-bind", "value:$root.filterYear, event : { change : $root.onYearSelectedChange('Hello World') }" },
                        { "class", "selectpicker show-tick form-controlt" },
                        {"data-live-search","true"},{"id","filterYear"} })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-3">
                KPS Week
            </label>
            <div class="col-lg-4">
                <select id="filterWeek" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterWeek, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.WeekFromSelectList }"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                    <button type="button" class="btn btn-primary" data-bind="click:$root.back">Back to List</button>
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">View</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Revise.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="enable: $root.enableRevise, click:$root.Revise">Revise</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Complete.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="enable: $root.enableComplete, click:$root.Complete">Complete</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.P1Template.ToString()))
                {
                    <button hidden type="button" class="btn btn-primary" >P1 Template</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString()))
                {
                    using (Html.BeginForm("GenerateExcel", "TPOFeeApOpen", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="Regional" />
                        <input type="hidden" name="Year" />
                        <input type="hidden" name="Week" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped clickable-table-row">
            <thead>
                <tr class="head">
                    <th rowspan="2" class="column-check"><input type="checkbox" data-bind="checked: $root.SelectAll"></th>
                    <th rowspan="2">Location</th>
                    <th rowspan="2" class="fifteen">Location Name</th>
                    <th rowspan="2" class="widthsmall">Brand</th>
                    <th rowspan="2">Note</th>
                    <th rowspan="2">Biaya Produksi</th>
                    <th rowspan="2">Jasa Manajemen</th>
                    <th rowspan="2">Productivity Incentives</th>
                    <th colspan="2">Pajak</th>
                    <th colspan="3">PPN</th>
                    <th rowspan="2">Total Bayar</th>
                    <th colspan="2">No Seri Faktur Pajak</th>
                    <th rowspan="2">Status</th>
                </tr>
                <tr class="head">
                    <th>Jasa Manajemen 2%</th>
                    <th>Productivity Incentives 2%</th>
                    <th>Biaya Produksi 10%</th>
                    <th>Jasa Maklon 10%</th>
                    <th>Productivity Incentives 10%</th>
                    <th>Biaya Produksi</th>
                    <th>Jasa Maklon</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                <tr data-bind="if: ($parent.editingRowIndex() !== $index())">
                    <td class="column-check"><input type="checkbox" data-bind="checked: Check, event : {click : $root.multicheckboxOnChange($data)}"></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.LocationCode"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.LocationName"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.SKTBrandCode"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.Note"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.BiayaProduksi, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.JasaManajemen, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.ProductivityIncentives, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.JasaManajemen2Percent, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.ProductivityIncentives2Percent, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.BiayaProduksi10Percent, precision:0"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.JasaMakloon10Percent, precision:0"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.ProductivityIncentives10Percent, precision:0"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="decimal:$data.TotalBayar, precision:3"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.TaxtNoProd"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.TaxtNoMgmt"></span></td>
                    <td data-bind="event: { click : $root.onGridClick }"><span data-bind="text:$data.Status"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="20" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.Extenders.js" type="text/javascript"></script>
    <script type="text/javascript">

    (function (app) {
        app.EditGrid = function () {
            var self = this;
            
            var DefaultRegional = $("#ddlFilterRegionalSubmission").val();
            var DefaultYear = '@Model.DefaultYear';
            var DefaultWeek= '@Model.DefaultWeek';
            if(!!getCookie('RegionalSubmission')) {
                DefaultRegional = getCookie('RegionalSubmission');
            }
            if(!!getCookie('KPSYear')) {
                DefaultYear = getCookie('KPSYear');
            }

            if(!!getCookie('KPSWeek')) {
                DefaultWeek = getCookie('KPSWeek');
            }

            self.filterRegional = ko.observable(DefaultRegional);
            self.filterYear = ko.observable(DefaultYear);
            self.filterWeek = ko.observable(DefaultWeek);
            self.enableRevise = ko.observable(false);
            self.enableComplete = ko.observable(false);
            //event on Year dropdown change
            self.onYearSelectedChange = function (type) {
                self.GetWeekFromSelectList();
            };

            self.onGridClick = function(e) {
                setCookie("RegionalSubmission",self.filterRegional(),0.1);
                setCookie("KPSYear",self.filterYear(),0.1);
                setCookie("KPSWeek",self.filterWeek(),0.1);
                window.document.location = @Html.BaseUrl("TPOFeeExeActualDetail") + "/index/" + e.TPOFeeCode().replace(/([/])/g,'_') + "/open";
            };

            self.back = function(e) {
                @*if('@Model.BackToList' == "detail")
                    window.document.location = @Html.BaseUrl("TPOFeeExeActualDetail") + "/index/" + '@Model.Param2' + "/approval";
                else*@
                    window.document.location = @Html.BaseUrl("TPOFeeExeAPOpen") + "/index";
            };

            //prepare Week Submission selectlist data
            self.WeekFromSelectList = ko.observableArray([]);
            self.GetWeekFromSelectList = function() {
                $.ajax({
                    url: @Html.BaseUrl("TPOFeeApOpen/GetWeekByYear"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { year: self.filterYear() },
                    dataType: 'json',
                    success: function(data) {
                        $('#filterWeek').find('option').remove();
                        $('#filterWeek').selectpicker('refresh');
                        var kpsWeekModel = [];
                        $.each(data, function(index, value) {
                            kpsWeekModel.push({ "Text": value, "Value": value });
                        });
                        self.WeekFromSelectList(kpsWeekModel);
                        self.filterWeek(DefaultWeek);
                    }
                });
            };

            self.gridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 9999,
                    PageIndex: 1,
                    SortExpression: "LocationCode",
                    SortOrder: "ASC",
                    Regional: self.filterRegional,
                    Year: self.filterYear,
                    Week: self.filterWeek
                },
                DataSourceUrl: @Html.BaseUrl("TPOFeeAPOpen/GetTPOFeeAPOpen"),
                    InlineEdit: true
                });

                self.SelectAll = ko.computed({
                    read: function() {
                        var item = ko.utils.arrayFirst(self.gridView.listDataItems(), function(item) {
                            return !item.Check();
                        });
                        return item == null;
                    },
                    write: function(value) {
                        ko.utils.arrayForEach(self.gridView.listDataItems(), function (item) {
                            item.Check(value);
                            self.multicheckboxOnChange(item);
                        });
                    }
                });

                self.Complete = function() {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "edit": ko.mapping.toJS(self.gridView.listDataItems())
                    };

                    datas = JSON.stringify(datas);
                    $.ajax({
                        url: @Html.BaseUrl("TPOFeeAPOpen/Complete"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {
                            SKTIS.Helper.Notification(data);
                            self.search();
                        }
                    });
                };
            

                self.Revise = function() {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "edit": ko.mapping.toJS(self.gridView.listDataItems())
                    };

                    datas = JSON.stringify(datas);
                    //transactionLog("Revise", datas);
                    $.ajax({
                        url: @Html.BaseUrl("TPOFeeAPOpen/Revise"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {
                            SKTIS.Helper.Notification(data);
                            self.search();
                        }
                    });
                };


                @*
                self.authorize = function() {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "edit": ko.mapping.toJS(self.gridView.listDataItems())
                    };

                    datas = JSON.stringify(datas);
                    transactionLog("Authorize", datas);
                };

                self.revise = function() {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "edit": ko.mapping.toJS(self.gridView.listDataItems())
                    };

                    datas = JSON.stringify(datas);
                    transactionLog("Revise", datas);
                };

                function transactionLog(methodName, datas) {
                    $.ajax({
                        url: @Html.BaseUrl("TPOFeeApproval/") + methodName,
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {
                            SKTIS.Helper.Notification(data);
                            self.search();
                        }
                    });
                };

                function checkDisableApproval(fieldName) {
                    return ko.computed({
                        read: function() {
                            var result = true;
                            ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                                var field = ko.isObservable(item[fieldName]) ? item[fieldName]() : item[fieldName];
                                if(!field) result = false;
                            });
                            return result;
                        },
                        write: function(value) {
                            //alert(value);
                        }
                    });
                };

                self.enableBtnApprove = checkDisableApproval('AlreadyApprove');*@

            self.multicheckboxOnChange = function(data){
                console.log(data.Check());
                self.enableComplete(false);
                self.enableRevise(false);

                ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                    console.log(item.Check());
                    if (item.Check()==true){
                        self.enableComplete(true);
                        self.enableRevise(true);
                    }
                });
                
            };

            self.generateExcel = function (formElement) {
                $(formElement).find("input[name=Regional]").val(self.filterRegional());
                $(formElement).find("input[name=Year]").val(self.filterYear());
                $(formElement).find("input[name=Week]").val(self.filterWeek());
                return true;
            };
            // Load Data
            self.search = function() {
                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                } else {
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }

                self.gridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        //self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });
            };

            self.RemoveNotification = function() {
                if ($('#noty_top_layout_container').length > 0) {
                    $('#noty_top_layout_container').remove();
                }
            };

            self.search();
            self.onYearSelectedChange();
        };
        ko.applyBindings(new app.EditGrid());
    })(app = this.app || {});

    </script>
}