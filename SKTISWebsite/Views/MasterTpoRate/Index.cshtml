@model SKTISWebsite.Models.MstTPOPackage.InitMstTPOPackageViewModel
@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MasterTPOFeeRate
@using SKTISWebsite.Helper

@{ Html.SetPageTitle(@MasterTPOFeeRate.PageTitle); }
<div data-bind="with: gridView" class="col-lg-12">
    @*Filter*@
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">
                @MasterTPOFeeRate.lblFilterTPOLocation
            </label>
            <div class="col-lg-3">
                @*@Html.DropDownList("ddlLocationFilter", Model.Locations,
                    new Dictionary<string, object> { { "data-bind", "value:$root.filterLocation, event : { change : $root.GetLocationNameFilter}" },
                        { "class", "selectpicker show-tick form-controlt" },
                        {"data-live-search","true"},{"id","ddlLocationFilter"} })*@
                <select id="ddlLocationFilter"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterLocation, optionsText: 'Text', optionsValue : 'Value', optionsAfterRender: $root.afterRender, selectPickerOptions: { optionsArray: $root.menuItemLocations}, event : { change : $root.GetLocationNameFilter}"></select>

            </div>
            <div class="col-lg-4">
                <span id="spLocationNameFilter" class="form-control" data-bind="text:$root.filters.LocationName" />
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                @MasterTPOFeeRate.lblFilterBrandGroupCode
            </label>
            <div class="col-lg-7">
                @*@Html.DropDownList("ddlBrandGroupCodeFilter", Model.BrandGroups,
                    new Dictionary<string, object> { { "data-bind", "value:$root.filterBrandGroupCode" },
                        { "class", "selectpicker show-tick form-controlt" },
                        {"data-live-search","true"},{"id","ddlBrandGroupCodeFilter"} })*@

                <select id="ddlBrandGroupCodeFilter" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterBrandGroupCode, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.BrandGroupCodeSelectList }"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                @MasterTPOFeeRate.lblFilterYear
            </label>
            <div class="col-lg-3">
                @Html.DropDownList("ddlYearFilter", Model.Years, @CommonLabel.ddlSelectAll,
                new Dictionary<string, object> { { "data-bind", "value:$root.filterYear" },
                    { "class", "selectpicker show-tick form-controlt" },
                    {"data-live-search","true"},{"id","ddlYearFilter"} })
            </div>
        </div>
    </div>
    @*Action Button and Page Size*@
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    using (Html.BeginForm("GenerateExcel", "MasterTpoRate", FormMethod.Post, new { @data_bind = "submit: $root.getLocationCode" }))
                    {
                        <input type="hidden" name="locationCode" />
                        <input type="hidden" name="brandGroupCode" />
                        <input type="hidden" name="year" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    @*Grid*@
    <div id="master-item-location" class="table-overflow">
        <table class="table table-striped table-hover">
            <thead>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'EffectiveDate'), css:sortCss('EffectiveDate', $data.sortExpression(), $data.sortOrder())" class="widthdate">@MasterTPOFeeRate.lblTitleEffectiveDate</th>
                    <th data-bind="click:sortBy.bind($data,'ExpiredDate'), css:sortCss('ExpiredDate', $data.sortExpression(), $data.sortOrder())" class="widthdate">@MasterTPOFeeRate.lblTitleExpiredDate</th>
                    <th data-bind="click:sortBy.bind($data,'JKN'), css:sortCss('JKN', $data.sortExpression(), $data.sortOrder())" class="widthmedium">@MasterTPOFeeRate.lblTitleJKN</th>
                    <th data-bind="click:sortBy.bind($data,'Jl1'), css:sortCss('Jl1', $data.sortExpression(), $data.sortOrder())" class="widthmedium">@MasterTPOFeeRate.lblTitleJL1</th>
                    <th data-bind="click:sortBy.bind($data,'Jl2'), css:sortCss('Jl2', $data.sortExpression(), $data.sortOrder())" class="widthmedium">@MasterTPOFeeRate.lblTitleJL2</th>
                    <th data-bind="click:sortBy.bind($data,'Jl3'), css:sortCss('Jl3', $data.sortExpression(), $data.sortOrder())" class="widthmedium">@MasterTPOFeeRate.lblTitleJL3</th>
                    <th data-bind="click:sortBy.bind($data,'Jl4'), css:sortCss('Jl4', $data.sortExpression(), $data.sortOrder())" class="widthmedium">@MasterTPOFeeRate.lblTitleJL4</th>
                    <th data-bind="click:sortBy.bind($data,'ManagementFee'), css:sortCss('ManagementFee', $data.sortExpression(), $data.sortOrder())">@MasterTPOFeeRate.lblTitleManagementFee</th>
                    <th data-bind="click:sortBy.bind($data,'ProductivityIncentives'), css:sortCss('ProductivityIncentives', $data.sortExpression(), $data.sortOrder())">@MasterTPOFeeRate.lblTitleProductivityIncentives</th>
                    <th class="widthdg15">@MasterTPOFeeRate.lblTitleMemoRef</th>
                    <th>@MasterTPOFeeRate.lblTitleAttachment</th>
                    <th class="widthsmall">@MasterTPOFeeRate.lblTitleRemark</th>
                    <th class="widthdate">@MasterTPOFeeRate.lblTitleUpdatedBy</th>
                    <th class="widthdate">@MasterTPOFeeRate.lblTitleUpdatedDate</th>
                </tr>
                <tr class="insertRow" data-bind="inlineAddProccess:[$data, $root.newData]">
                    <th class="widthdate">
                        <div id="insertEffectiveDate" class='input-group date time insidetable' data-bind="dateTimePicker: $root.newData.EffectiveDate, value:$root.newData.EffectiveDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true, useCurrent: false, appendToBody: true}">
                            <input type='text' class="form-control" readonly="readonly" autocomplete="off" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </th>
                    <th class="widthdate">
                        <div id="insertExpiredDate" class='input-group date time insidetable' data-bind="dateTimePicker: $root.newData.ExpiredDate, value:$root.newData.ExpiredDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true, useCurrent: false, appendToBody: true}">
                            <input type='text' class="form-control" readonly="readonly" autocomplete="off" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </th>
                    <th class="workhours"><input data-bind="value:$root.newData.JKN, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></th>
                    <th class="workhours"><input data-bind="value:$root.newData.Jl1, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></th>
                    <th class="workhours"><input data-bind="value:$root.newData.Jl2, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></th>
                    <th class="workhours"><input data-bind="value:$root.newData.Jl3, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></th>
                    <th class="workhours"><input data-bind="value:$root.newData.Jl4, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></th>
                    <th class="workhours"><input data-bind="value:$root.newData.ManagementFee, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1" /></th>
                    <th><input data-bind="value:$root.newData.ProductivityIncentives, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1" /></th>
                    <th class="widthdg15"><input data-bind="value:$root.newData.MemoRef, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th class="no-wrap">
                        <span data-bind="text: $root.newData.MemoFileName, visible: $root.newData.MemoFileName"></span>
                        <span class="file-input btn btn-primary btn-file" data-bind="enableWhenPrimaryFieldFilled:[$root.newData.EffectiveDate]">
                            @CommonLabel.btnChooseFile <input type="file" data-mode="insert" data-bind="enableWhenPrimaryFieldFilled:[$root.newData.EffectiveDate], event: { change: function() { $root.uploadFile($element) }}">
                        </span>
                    </th>
                    <th class="widthsmall"><input data-bind="value:$root.newData.Remark, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th class="widthdate"></th>
                    <th class="widthdate"></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                <tr data-bind="if: ($parent.editingRowIndex() !== $index())">
                    <!-- ko if: $root.checkDisableEffective($data) == true -->
                    <td class="current"><span data-bind="text:$data.EffectiveDate, click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisableEffective($data) == false -->
                    <td><span data-bind="text:$data.EffectiveDate"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current"><span data-bind="text:$data.ExpiredDate, click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td><span data-bind="text:$data.ExpiredDate"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current text-right"><span data-bind="roundedMoney:$data.JKN, click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td class="text-right"><span data-bind="roundedMoney:$data.JKN"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current text-right"><span data-bind="roundedMoney:$data.Jl1,click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td class="text-right"><span data-bind="roundedMoney:$data.Jl1"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current text-right"><span data-bind="roundedMoney:$data.Jl2,click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td class="text-right"><span data-bind="roundedMoney:$data.Jl2"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current text-right"><span data-bind="roundedMoney:$data.Jl3,click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td class="text-right"><span data-bind="roundedMoney:$data.Jl3"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current text-right"><span data-bind="roundedMoney:$data.Jl4,click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td class="text-right"><span data-bind="roundedMoney:$data.Jl4"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current text-right"><span data-bind="roundedMoney:$data.ManagementFee,click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td class="text-right"><span data-bind="roundedMoney:$data.ManagementFee"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current text-right"><span data-bind="roundedMoney:$data.ProductivityIncentives,click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td class="text-right"><span data-bind="roundedMoney:$data.ProductivityIncentives"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current"><span data-bind="text:$data.MemoRef,click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td class="text-right"><span data-bind="text:$data.MemoRef"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current">
                        @* Please change this to Samurai's CSS *@
                        <div data-bind="visible: $data.MemoFileName">
                            <span class="truncate uploadfile" style="display: inline-block; padding-top:5px;">
                                <a href="#" target="_blank" class="uploadfile newTabLink" data-bind="text: $data.MemoFileName, attr: {href: $root.getUrlFromMemo($data) },click: $parent.editInline3.bind($data,$index())"></a>
                            </span>
                        </div>
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td>
                        @* Please change this to Samurai's CSS *@
                        <div data-bind="visible: $data.MemoFileName">
                            <span class="truncate uploadfile" style="display: inline-block; padding-top:5px;">
                                <a href="#" target="_blank" class="uploadfile newTabLink" data-bind="text: $data.MemoFileName, attr: {href: $root.getUrlFromMemo($data) }"></a>
                            </span>
                        </div>
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == true -->
                    <td class="current"><span data-bind="text:$data.Remark,click: $parent.editInline3.bind($data,$index())"></span></td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisable($data) == false -->
                    <td><span data-bind="text:$data.Remark"></span></td>
                    <!-- /ko -->
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>

                </tr>
                @*edit template*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index()),
                                   click: $parent.selectRow.bind($data, $index())">
                    @*<td class="current">
                <div class='input-group date time insidetable' data-bind="dateTimePicker: $data.EffectiveDate, value:$data.EffectiveDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}}">
                    <input type='text' class="form-control" />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </td>*@
                    <!-- ko if: $root.checkDisableEffective($data) == true -->
                    <td class="current">
                        <div class='input-group date time insidetable' data-bind="dateTimePicker: $data.EffectiveDate, value:$data.EffectiveDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, ignoreReadonly: true, appendToBody: true}">
                            <input type='text' class="form-control" readonly="readonly" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.checkDisableEffective($data) == false -->
                    <td><span data-bind="text:$data.EffectiveDate"></span></td>
                    <!-- /ko -->
                    <td class="current">
                        <div class='input-group date time insidetable' data-bind="dateTimePicker: $data.ExpiredDate, value:$data.ExpiredDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, ignoreReadonly: true, appendToBody: true}">
                            <input type='text' class="form-control" readonly="readonly" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </td>
                    <td class="current"><input data-bind="value:$data.JKN, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></td>
                    <td class="current"><input data-bind="value:$data.Jl1, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></td>
                    <td class="current"><input data-bind="value:$data.Jl2, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></td>
                    <td class="current"><input data-bind="value:$data.Jl3, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></td>
                    <td class="current"><input data-bind="value:$data.Jl4, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" /></td>
                    <td class="current"><input data-bind="value:$data.ManagementFee, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1" /></td>
                    <td class="current"><input data-bind="value:$data.ProductivityIncentives, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1" /></td>
                    <td class="current"><input data-bind="value:$data.MemoRef, valueUpdate: 'afterkeydown'" class="form-control transparent" /></td>
                    <td class="current">
                        <span class="file-input btn btn-primary btn-file" data-bind="visible: !ko.utils.unwrapObservable($data.MemoFileName)">
                            @CommonLabel.btnChooseFile <input type="file" data-mode="update" data-bind="attr: {'data-filename':$data.MemoPath}, event: { change: function() { $root.uploadFile($element, $data) } }">
                        </span>
                        <div data-bind="visible: ko.utils.unwrapObservable($data.MemoFileName)" style="width: 160px;">
                            <span class="truncate uploadfile" style="display: inline-block; padding-top:5px;">
                                <a href="#" target="_blank" class="uploadfile newTabLink" data-bind="text: $data.MemoFileName, attr: {href: $root.getUrlFromMemo($data) }"></a>
                            </span>
                            <span class="pull-right">
                                <span class="file-input btn btn-primary btn-file">
                                    CHG <input type="file" data-mode="update" data-bind="attr: {'data-filename':$data.MemoPath}, event: { change: function() { $root.uploadFile($element, $data) } }">
                                </span>
                            </span>
                        </div>
                    </td>
                    <td class="current"><input data-bind="value:$data.Remark,tabToNext:[$parent,$data], valueUpdate: 'afterkeydown'" class="form-control transparent" /></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="14" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>
</div>
@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">
        (function(app) {
            app.EditGrid = function() {
                var self = this;
                self.itemLocations = @Html.Raw(Json.Encode(@Model.LocationDescs));
                self.menuItemLocations = ko.observableArray(@Html.Raw(Json.Encode(@Model.Locations)));

                self.filterYear = ko.observable('');
                self.filterLocation = ko.observable($("#ddlLocationFilter").val());
                self.filterBrandGroupCode = ko.observable();
                self.LocationCode = ko.observable(self.filterLocation());
                self.BrandGroupCode = ko.observable(self.filterBrandGroupCode());
                self.canEdit = ko.observable(true);

                self.afterRender = function(options, item)
                {
                    //console.log(item);
                    var locDesc;
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == item.Value) {
                            locDesc = self.itemLocations[i].LocationName;
                            break;
                        }
                    }

                    $(options).attr('title', item.Value);
                    $(options).attr(
                        'data-content',
                        "<span class='text'><span style='width: 35px; display: inline-block;'>" + item.Value + "</span> - " + locDesc + "</span>"
                    );

                }

                self.filters = {
                    LocationName: null
                };

                self.BrandGroupCodeSelectList = ko.observableArray([]);

                self.GetLocationNameFilter = function() {
                    self.filters.LocationName = "";
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == self.filterLocation()) {
                            self.filters.LocationName = self.itemLocations[i].LocationName;
                            break;
                        }
                    }
                    getBrandGroupCodeLists().done(function(data) {
                        $('#spLocationNameFilter').html(self.filters.LocationName);
                    });
                    
                }.bind(this);

                

                self.GetDefaultLocationNameFilter = function(cb) {
                    var result ="";
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == $("#ddlLocationFilter").val()) {
                            result = self.itemLocations[i].LocationName;
                            break;
                        }
                    }

                    getBrandGroupCodeLists().done(function() {
                        //cb(result);
                    });
                }.bind(this);

                

                self.uploadFile = function(el, $data)
                {
                    var that = el;
                    var mode = $(that).data('mode');
                    var files = el.files;
                    if (files.length > 0) {
                        if (window.FormData !== undefined) {
                            var data = new FormData();
                            data.append('mode',mode);
                            if(mode == 'update')
                                data.append('oldFileName',$(that).data('filename'));
                            for (var x = 0; x < files.length; x++) {
                                data.append(files[x].name, files[x]);
                            }
                            $.ajax({
                                type: "POST",
                                url: "MasterTpoPackage/Upload?modulepath=MasterTpoRate",
                                contentType: false,
                                processData: false,
                                data: data,
                                success: function (result) {
                                    SKTIS.Helper.Log(result);
                                    if(result.ResponseType == 'OK'){
                                        if(mode == 'insert')
                                        {
                                            self.newData.MemoPath(result.Filename);
                                            self.newData.MemoFileName(result.AbsoluteName);
                                        }
                                        else
                                        {
                                            $data.MemoPath(result.Filename);
                                            $data.MemoFileName(result.AbsoluteName);

                                        }
                                    }

                                    el.value = '';
                                },
                                error: function (xhr, status, p3, p4) {
                                    var err = "Error " + " " + status + " " + p3 + " " + p4;
                                    if (xhr.responseText && xhr.responseText[0] == "{")
                                        err = JSON.parse(xhr.responseText).Message;
                                    SKTIS.Helper.Log(err);
                                }
                            });
                        } else {
                            SKTIS.Helper.Notification("This browser doesn't support HTML5 file uploads!",'warning');
                        }
                    }
                }

                self.getUrlFromMemo = function(data)
                {
                    if (ko.isObservable(data.MemoFile)) {
                        return data.MemoFileName() != null ? '@Model.UploadPath' + data.MemoFileName() : null;
                    }

                    return null;
                }

                // function repopulate dropdown
                function getBrandGroupCodeLists() {
                    return $.ajax({
                        url: @Html.BaseUrl("MasterTpoRate/GetBrandGroupByLocationCode"),
                        type: 'GET',
                        //async: false,
                        contentType: 'application/json',
                        data: {locationCode : self.filterLocation()},
                        dataType: 'json',
                        success: function(data) {
                            //self.BrandGroupCodeSelectList([]);
                            $('#ddlBrandGroupCodeFilter').find('option').remove();
                            $('#ddlBrandGroupCodeFilter').selectpicker('refresh');
                            self.BrandGroupCodeSelectList(data);

                            self.filterBrandGroupCode($("#ddlBrandGroupCodeFilter :selected").val());
                        }
                    });
                }

                self.newData = {
                    LocationCode:ko.observableArray([]),
                    BrandGroupCode:self.filterBrandGroupCode,
                    EffectiveDate:ko.observable(''),
                    ExpiredDate:ko.observable(''),
                    JKN:ko.observable(''),
                    Jl1:ko.observable(''),
                    Jl2:ko.observable(''),
                    Jl3:ko.observable(''),
                    Jl4:ko.observable(''),
                    ManagementFee:ko.observable(''),
                    ProductivityIncentives:ko.observable(''),
                    MemoRef:ko.observable(''),
                    MemoFile:ko.observable(''),
                    MemoPath:ko.observable(''),
                    Remark:ko.observable(''),
                    MemoFileName:ko.observable('')
                };

                //description: init gridView
                self.gridView = new app.GridViewModel({
                    Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", LocationCode: self.filterLocation, BrandGroupCode: self.filterBrandGroupCode, Year: self.filterYear },
                    DataSourceUrl:  @Html.BaseUrl("MasterTpoRate/GetMstTPOFeeRate"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 0
                });

                self.checkDisable = function(data) {
                    var result = true;
                    var today = moment();
                    if(ko.isObservable(data.EffectiveDate)) {
                        var effectiveDate = moment(data.EffectiveDate(), "DD/MM/YYYY");
                        if(effectiveDate.isBefore(today)) {
                            result = false;
                        }
                    }
                    if(ko.isObservable(data.ExpiredDate)) {
                        var expiredDate = moment(data.ExpiredDate(), "DD/MM/YYYY");
                        if(expiredDate.isAfter(today)) {
                            result = true;
                        }
                    }
                    
                    return result;
                }
                
                self.checkDisableEffective = function(data) {
                    var result = true;
                    var today = moment();
                    if(ko.isObservable(data.EffectiveDate)) {
                        var effectiveDate = moment(data.EffectiveDate(), "DD/MM/YYYY");
                        if(effectiveDate.isBefore(today)) {
                            result = false;
                        }
                    }
                    
                    return result;
                }


                // Field Validations
                self.gridView.applyValidationRules = function (entity) {

                    self.RemoveNotification();

                    entity.EffectiveDate.extend({
                        required: {
                            message: "<strong>Effective Date</strong> cannot be empty!"
                        }
                    });
                    entity.ExpiredDate.extend({
                        //date: true,
                        cannotLessThan:  {
                            params: entity.EffectiveDate,
                            message: "Please enter a <strong>Expired Date</strong> value greater than or equal to <strong>Effective Date</strong>."
                        },
                        required: {
                            message: "<strong>Expired Date</strong> cannot be empty!"
                        }
                    });
                    //console.log(self.filterBrandGroupCode());
                    //if(self.filterBrandGroupCode() == "undefined")
                    //    SKTIS.Helper.Notification("This browser doesn't support HTML5 file uploads!",'warning');
                    entity.BrandGroupCode.extend({
                        required: {
                            message: "<strong>Brand Group Code</strong> cannot be empty!"
                        }
                    });
                    //entity.LocationCode.extend({
                    //    required: {
                    //        message:"<strong>Location Code</strong> cannot be empty!"
                    //    }
                    //});
                };

                // Reset Fields for Insert Row
                self.gridView.resetDefault = function (viewModel) {
                    viewModel.EffectiveDate('');
                    viewModel.ExpiredDate('');
                    viewModel.JKN('');
                    viewModel.Jl1('');
                    viewModel.Jl2('');
                    viewModel.Jl3('');
                    viewModel.Jl4('');
                    viewModel.ManagementFee('');
                    viewModel.ProductivityIncentives('');
                    viewModel.MemoRef('');
                    viewModel.Remark('');
                    viewModel.MemoPath('');
                    viewModel.MemoFile('');
                    viewModel.MemoFileName('');
                    $('.insertRow .input-group.date input').val(''); // Manually Reset DateTimePicker since the Element is no longer binded to it obervable
                    $('#insertEffectiveDate').data("DateTimePicker").clear();
                    $('#insertExpiredDate').data("DateTimePicker").clear();
                };

                //description: save bulk data
                self.saveData = function() {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    // Prevent Edited "New Row" data for triggering Edited message, so it will claimed as insert process only
                    // Primary Key : Only using EffectiveDate because LocationCode & BrandGroupCode not recorded to listNewItems() or listEditItems(), so we only need to compare both of arrays using EffectiveDate key for merge "Edited New Row" as one process.
                    var newItemLength = self.gridView.listNewItems().length;
                    $.each(self.gridView.listNewItems(),function(k,v){
                        var shouldBeAsNew = ko.utils.arrayFirst(self.gridView.listEditItems(),function(editItem){
                            if(editItem){
                                return editItem['EffectiveDate'] == v['EffectiveDate'];
                            }
                        });
                        if(shouldBeAsNew){
                            self.gridView.listNewItems()[k] = shouldBeAsNew;
                        }
                        self.gridView.listEditItems.remove(function(data) {
                            if(data){
                                return data['EffectiveDate'] == v['EffectiveDate'];
                            }
                        });
                    });

                    var datas = {
                        "Parameters": { "LocationCode": self.LocationCode, "BrandGroupCode": self.filterBrandGroupCode() },
                        "New": self.gridView.listNewItems(),
                        "Edit": self.gridView.listEditItems()
                    };
                    datas = JSON.stringify(datas);

                    $.ajax({
                        url:  @Html.BaseUrl("MasterTpoRate/SaveTPOFeeRate"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {
                            //console.log(data);
                            if (data.New) {
                                $.each(data.New, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Insert Master TPO Rate", value.EffectiveDate);
                                });
                            }

                            if (data.Edit) {
                                $.each(data.Edit, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Edit Master TPO Rate", value.LocationCode);
                                });
                            }

                            self.gridView.sort('UpdatedDate', 'DESC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                        }
                    });
                };

                self.getLocationCode = function(formElement) {
                    $(formElement).find("input[name=locationCode]").val(self.LocationCode),
                    $(formElement).find("input[name=brandGroupCode]").val(self.filterBrandGroupCode()),
                    $(formElement).find("input[name=year]").val(self.Year);
                    return true;
                };

                //description: load data
                self.search = function() {
                    //console.log('wahyu');
                    self.LocationCode = self.filterLocation();
                    self.BrandGroupCode = self.filterBrandGroupCode();
                    self.Year = self.filterYear();

                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    }else{
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }

                    
                    self.gridView.search({}, function (response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message,'error');
                            $('.empty-row-message').html(response.message);
                        }else if (response.status == 'Empty') {

                            self.RemoveNotification();

                            //SKTIS.Helper.Notification(response.message,'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });
                };

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };

                // Check whether New or Edit data is existing and not saved to database yet (on Request action)
                SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);

                self.LocationCode = $("#ddlLocationFilter").val();
                self.BrandGroupCode = $("#ddlBrandGroupCodeFilter").val();

                // Reset Observable variable when DateTimePicker cleared
                $('#insertEffectiveDate').on('dp.change',function(e){
                    self.newData.EffectiveDate('');
                });

                $('#insertExpiredDate').on('dp.change',function(e){
                    self.newData.ExpiredDate('');
                });

                

                self.GetDefaultLocationNameFilter(function(location) {
                    self.filters.LocationName = location;
                    //self.search();

                });

                
                $(document).ready(function(){
                    self.LocationCode = self.filterLocation();
                    self.GetLocationNameFilter();
                    self.BrandGroupCode = self.filterBrandGroupCode();
                    self.Year = self.filterYear();
                    $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    
                });


            };
            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});

    </script>
}