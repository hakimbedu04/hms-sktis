@using HMS.SKTIS.Application.Resources

@using SKTISWebsite.Helper
@{ Html.SetPageTitle("Flow"); }



<div data-bind="with: gridView" class="col-lg-12">
   
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
               
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div id="master-unit">
        <div class="table-overflow">
            <table class="table table-striped table-hover">
                <thead>
                    <tr class="head">
                        <th>ID Flow</th>
                        <th>Source Form</th>
                        <th>Action Button</th>
                        <th>Destination Form</th>
                        <th>Destination Role</th>
                        <th>Message Text</th>
                    </tr>
                    <tr class="insertRow" data-bind="click:cancelInline.bind(),inlineAddProccess:[$data, $root.newData]" tabindex="-1">
                        <th class="right widthsmall"></th>
                        <th class="widthmedium">
                            <select id="ddlFormSourceSelectList"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPicker: $root.newData.FormSource, value: $root.newData.FormSource, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlFormSourceSelectList, container: 'body' }, optionsAfterRender : $root.afterRender, event: { change: $root.onListFormSourceChange }"></select>

                        </th>

                        <th class="widthmedium">
                            <select id="ddlActionButtonSelectList"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPicker: $root.newData.ActionButton, value: $root.newData.ActionButton, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlActionButtonSelectList, container: 'body' }, optionsAfterRender : $root.afterRender, event: { change: $root.onListNewChange }"></select>

                        </th>

                        <th class="widthmedium">
                            <select id="ddlDestinationFormSelectList"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPicker: $root.newData.DestinationForm, value: $root.newData.DestinationForm, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlFormSourceSelectList, container: 'body' }, optionsAfterRender : $root.afterRender, event: { change: $root.onListNewChange }"></select>

                        </th>

                        <th>
                            <select id="ddlDestinationRoleSelectList"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPicker: $root.newData.DestinationRole, value: $root.newData.DestinationRole, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlDestinationRoleSelectList, container: 'body' }, optionsAfterRender : $root.afterRender, event: { change: $root.onListNewChange }"></select>                        
                        </th>

                        <th class="widthdg15">
                            <input data-bind="value:$root.newData.MessageText, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="15">
                        </th>

                    </tr>
                </thead>
                <tbody data-bind="foreach: listDataItems">
                    @*insert template2*@
                    <tr data-bind="if: ($parent.editingRowIndex() !== $index()), click: $parent.editInlineWithCallback.bind($data,$index(), $root.callbackInline.bind())">
                        <td><span data-bind="text:$data.IDFlow"></span></td>
                        <td class="current"><span data-bind="text:$data.FormSourceName"></span></td>
                        <td class="current"><span data-bind="text:$data.ActionButtonName"></span></td>
                        <td class="current"><span data-bind="text:$data.DestinationFormName"></span></td>
                        <td class="current"><span data-bind="text:$data.DestinationRoleName"></span></td>
                        <td class="current"><span data-bind="text:$data.MessageText"></span></td>
                    </tr>
                    <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                       if:($parent.editingRowIndex() === $index()),
                                       click: $parent.selectRow.bind($data, $index())" tabindex="-1">
                        <td><span data-bind="text:$data.IDFlow"></span></td>
                        <td class="current">
                            <select id="ddlFormSourceSelectListEdit"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPickerCustom: $data.FormSource, value: $data.FormSource, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlFormSourceSelectList}, optionsAfterRender : $root.afterRender, event: { change: $root.onListFormSourceChangeEdit.bind($data) }"></select>
                        </td>
                        <td class="current">
                            <select id="ddlActionButtonSelectListEdit"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPickerCustom: $root.newData.ActionButton, value: $data.ActionButton, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlActionButtonSelectListEdit}, optionsAfterRender : $root.afterRender, event: { change: $root.onListEditChange.bind($data) }"></select>
                        </td>
                        <td class="current">
                            <select id="ddlDestinationFormSelectListEdit"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPickerCustom: $data.DestinationForm, value: $data.DestinationForm, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlFormSourceSelectList}, optionsAfterRender : $root.afterRender, event: { change: $root.onListEditChange.bind($data) }"></select>
                        </td>
                        <td class="current">
                            <select id="ddlDestinationRoleSelectListEdit"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPickerCustom: $data.DestinationRole, value: $data.DestinationRole, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlDestinationRoleSelectList}, optionsAfterRender : $root.afterRender, event: { change: $root.onListEditChange.bind($data) }"></select>
                        </td>
                        <td class="current">
                            <input data-bind="value:$data.MessageText, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="15">
                        </td>
                    </tr>

                </tbody>
                <tbody data-bind="visible: !listDataItems().length">
                    <tr>
                        <td colspan="7" class="empty-row-message"><div class="loader"></div></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
            @Html.Partial("GridViewFooter")
        </div>
    </div>
</div>
@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.Extenders.js" type="text/javascript"></script>
    <script type="text/javascript">

    (function(app) {
        app.EditGrid = function() {
            var self = this;
            self.todayDate = ko.observable('');

            self.ddlFormSourceSelectList = ko.observableArray();
            self.ddlActionButtonSelectList = ko.observableArray();
            self.ddlResponsibilitySelectList = ko.observableArray();
            self.ddlResponsibilitySelectListEdit = ko.observableArray();

            // Filter
            self.newData = {
                FormSource: ko.observable(''),
                FormSourceName: ko.observable(''),
                ActionButton: ko.observable(''),
                ActionButtonName: ko.observable(''),
                DestinationForm: ko.observable(''),
                DestinationFormName: ko.observable(''),
                DestinationRoleName: ko.observable(''),
                DestinationRole: ko.observable(''),
                MessageText: ko.observable('')
            };

            self.ValidateDateIsPast= function(date,FormSource) {
                var dt = new Date();
                if(ko.utils.unwrapObservable(date) === '' || typeof ko.utils.unwrapObservable(date) === 'undefined') return false;
                var result =  moment(moment(ko.utils.unwrapObservable(date), 'DD/MM/YYYY').format('YYYY-MM-DD')).isBefore(dt);

                //if (result) {
                //    self.getResponsibilityByFormSourceEdit(FormSource);
                //}
                return result;

            };

            self.ddlFormSourceSelectList = ko.observableArray([]);
            self.ddlActionButtonSelectList = ko.observableArray([]);
            self.ddlActionButtonSelectListEdit = ko.observableArray([]);

            self.dicActionButton= ko.observableArray([]);
            self.dicFormSource = ko.observableArray([]);
            self.dicRole = ko.observableArray([]);

            
            self.ddlDestinationRoleSelectList = ko.observableArray([]);

            self.getFormSource = function() {
                var data = { "functionType" : "Page"};
                data = JSON.stringify(data);
                $.ajax({
                    url: @Html.BaseUrl("UtilWorkflowFlow/GetListFunction"),
                    type: 'POST',
                    data: data,
                    contentType: 'application/json',
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        $("#ddlFormSourceSelectList").find('option').remove();
                        $("#ddlFormSourceSelectList").selectpicker('refresh');

                        $("#ddlFormSourceSelectListEdit").find('option').remove();
                        $("#ddlFormSourceSelectListEdit").selectpicker('refresh');

                        if (data.length == 0) {
                            self.newData.FormSource(null);
                        }
                        $("#ddlFormSourceSelectListEdit").find('option').remove();
                        $("#ddlFormSourceSelectListEdit").selectpicker('refresh');

                        self.ddlFormSourceSelectList(data);

                        for(var k in data){
                            self.dicFormSource()[data[k].Value] = data[k].Text
                        }

                        self.newData.FormSourceName(self.dicFormSource()[self.newData.FormSource()]);
                        self.newData.DestinationFormName(self.dicFormSource()[self.newData.DestinationForm()]);
                    }
                });
            };

            
            self.getDestinationRole = function() {
                $.ajax({
                    url: @Html.BaseUrl("UtilWorkflowFlow/GetListRoles"),
                    type: 'GET',
                    contentType: 'application/json',
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        $("#ddlDestinationRoleSelectList").find('option').remove();
                        $("#ddlDestinationRoleSelectList").selectpicker('refresh');

                        if (data.length == 0) {
                            self.newData.DestinationRole(null);
                        }

                        $("#ddlDestinationRoleSelectList").find('option').remove();
                        $("#ddlDestinationRoleSelectList").selectpicker('refresh');
                        self.ddlDestinationRoleSelectList(data);

                        
                        for(var k in data){
                            self.dicRole()[data[k].Value] = data[k].Text
                        }

                        self.newData.DestinationRoleName(self.dicRole()[self.newData.DestinationRole()]);

                    }
                });
            };

            self.getActionButton = function(parentID, target, val) {
                var data = { "functionType" : "Button", "parentID" : parentID};
                data = JSON.stringify(data);
                $.ajax({
                    url: @Html.BaseUrl("UtilWorkflowFlow/GetListFunction"),
                    type: 'POST',
                    data: data,
                    contentType: 'application/json',
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        $("#" + target).find('option').remove();
                        $("#" + target).selectpicker('refresh');

                        if (data.length == 0) {
                            self.newData.ActionButton(null);
                        }

                        $("#" + target).find('option').remove();
                        if(typeof val != "undefined"){
                            $("#" + target).val(val);
                        }
                            
                        $("#" + target).selectpicker('refresh');
                        self[target](data);

                        for(var k in data){
                            self.dicActionButton()[data[k].Value] = data[k].Text;
                        }

                        self.newData.ActionButtonName(self.dicActionButton()[self.newData.ActionButton()]);
                    }
                });
            };



            self.ddlResponsibilitySelectList = ko.observableArray([]);

            self.getResponsibility = function() {
                $.ajax({
                    url: @Html.BaseUrl("UtilSecurityDelegations/GetListUserAd"),
                        type: 'GET',
                        contentType: 'application/json',
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            $("#ddlResponsibilitySelectList").find('option').remove();
                            $("#ddlResponsibilitySelectList").selectpicker('refresh');
                            self.ddlResponsibilitySelectList(data);
                        }
                    });
                };



                self.onListFormSourceChange = function() {
                    self.getActionButton(self.newData.FormSource(), "ddlActionButtonSelectList");
                    self.newData.FormSourceName(self.dicFormSource()[self.newData.FormSource()]);
                };
            
                self.onListNewChange = function() {
                    self.newData.ActionButtonName(self.dicActionButton()[self.newData.ActionButton()]);
                    self.newData.DestinationFormName(self.dicFormSource()[self.newData.DestinationForm()]);
                    self.newData.DestinationRoleName(self.dicRole()[self.newData.DestinationRole()]);
                };

                self.onListEditChange = function(data) {
                    data.ActionButtonName(self.dicActionButton()[data.ActionButton()]);
                    data.DestinationFormName(self.dicFormSource()[data.DestinationForm()]);
                    data.DestinationRoleName(self.dicRole()[data.DestinationRole()]);
                };

                self.onListFormSourceChangeEdit = function(data) {
                    self.getActionButton(data.FormSource(), "ddlActionButtonSelectListEdit");
                    data.FormSourceName(self.dicFormSource()[data.FormSource()]);
                };

                self.callbackInline = function(data) {
                    self.getActionButton(ko.utils.unwrapObservable(data.FormSource), "ddlActionButtonSelectListEdit", ko.utils.unwrapObservable(data.ActionButton));
                };

            // Gridview Initialization
            self.gridView = new app.GridViewModel({
                Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC"},
                DataSourceUrl: @Html.BaseUrl("UtilWorkflowFlow/GetWorkflow"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            // Field Validations
            self.gridView.applyValidationRules = function(entity) {

                self.RemoveNotification();

                entity.FormSource.extend({
                    required: {
                        message: "<strong>Form Source</strong> cannot be empty!"
                    }
                });


                entity.DestinationForm.extend({
                    required: {
                        message: "<strong>Destination Form</strong> cannot be empty!"
                    }
                });

                entity.DestinationRole.extend({
                    required: {
                        message: "<strong>Destination Role</strong> cannot be empty!"
                    }
                });

            }

            // Reset Fields for Insert Row
            self.gridView.resetDefault = function(viewModel) {
                viewModel.MessageText('');
            };


            // Save Action
            self.saveData = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "new": self.gridView.listNewItems(),
                    "edit": self.gridView.listEditItems()
                }

                datas = JSON.stringify(datas);

                $.ajax({
                    url: @Html.BaseUrl("UtilWorkflowFlow/SaveAllFlow"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        if (data.New) {
                            $.each(data.New, function(k, value) {
                                if (value) {
                                    SKTIS.Helper.ResponseNotification(value, "Insert Flow ", value.FormSource );
                                }
                            });
                        }
                        if (data.Edit) {
                            $.each(data.Edit, function(k, value) {
                                if (value) {
                                    SKTIS.Helper.ResponseNotification(value, "Edit Delegation ", value.FormSource);
                                }
                            });
                        }

                        //self.gridView.sort('UpdatedDate', 'DESC');
                        self.gridView.sort('IDFlow', 'ASC');
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }
                });
            }

            // Load Data
            self.search = function() {
                self.getFormSource();
                self.getDestinationRole();
                //self.getActionButtonAd();
                //self.getResponsibility();
                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                } else {
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }


                self.gridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message, 'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                    self.gridView.sort('IDFlow', 'ASC');
                });

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };
            };

            self.search();

            // Check whether New or Edit data is existing and not saved to database yet (on Request action)
            SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
        };

        $(document).ready(function(){
            $('table tr.insertRow .selectpicker').change(focusTableRow);
            $('table tr.insertRow').on('dp.change','#dtpStartDate,#dtpEndDate,#dtpEndDate2,#dtpStartDate3,#dtpEndDate3',focusTableRow);

        });

        function focusTableRow(){
            $('table tr.insertRow').focus();
        };

        ko.applyBindings(new app.EditGrid());

    })(app = this.app || {});


    </script>
}