@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MasterPlantUnit
@using SKTISWebsite.Helper

@{ Html.SetPageTitle(@MasterPlantUnit.PageTitle); }
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-10">
        <div class="row">
            <label class="form-label col-lg-2">@MasterPlantUnit.lblFilterLocationCode</label>
            <div class="col-lg-2">
                @*<select class="selectpicker show-tick form-control" data-live-search="true" data-bind="selectPicker:$root.filterLocationCode, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.LocationCodeSelectList }, event : { change : $root.onLocationCodeChange}"></select>*@
            
                <select id="ddlFilterSourceLocation"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterLocationCode, optionsText: 'Text', optionsValue : 'Value', optionsAfterRender : $root.afterRender, selectPickerOptions: { optionsArray: $root.LocationCodeSelectList}, event : { change : $root.onLocationCodeChange}"></select>
            
            </div>
            <div class="col-lg-3">
                <input data-bind="value: $root.filterLocationName" type="text" class="form-control" readonly="readonly">
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString())) {
                    using (Html.BeginForm("GenerateExcel", "MasterPlantUnit", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="locationCode" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div id="master-unit">
        <div class="table-overflow">
            <table class="table table-striped">
                <thead>
                    <tr class="head">
                        <th data-bind="click:sortBy.bind($data,'LocationCode'), css:sortCss('LocationCode', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@MasterPlantUnit.lblTitleLocationCode</th>
                        <th data-bind="click:sortBy.bind($data,'UnitCode'), css:sortCss('UnitCode', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@MasterPlantUnit.lblTitleUnitCode</th>
                        <th data-bind="click:sortBy.bind($data,'UnitName'), css:sortCss('UnitName', $data.sortExpression(), $data.sortOrder())" class="widthdg15">@MasterPlantUnit.lblTitleUnitName</th>
                        <th data-bind="click:sortBy.bind($data,'StatusActive'), css:sortCss('StatusActive', $data.sortExpression(), $data.sortOrder())">@CommonLabel.lblTitleStatusActive</th>
                        <th data-bind="click:sortBy.bind($data,'Remark'), css:sortCss('Remark', $data.sortExpression(), $data.sortOrder())">@CommonLabel.lblTitleRemark</th>
                        <th class="widthdate">@CommonLabel.lblTitleUpdatedBy</th>
                        <th class="widthdate">@CommonLabel.lblTitleUpdatedDate</th>
                    </tr>
                    <tr class="insertRow" data-bind="click:cancelInline.bind(),inlineAddProccess:[$data, $root.newData]">
                        <th class="widthsmall">
                            <select class="selectpicker show-tick form-control" data-live-search="true" data-bind="selectPicker:$root.newData.LocationCode, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.LocationCodeSelectList }"></select>
                        </th>
                        <th class="right widthsmall"><input data-bind="value:$root.newData.UnitCode, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="4" /></th>
                        <th class="widthdg15"><input data-bind="value:$root.newData.UnitName, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="15" /></th>
                        <th class="center"><input type="checkbox" data-bind="checked:$root.newData.StatusActive" /></th>
                        <th><input data-bind="value:$root.newData.Remark, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                        <th class="widthdate"><span data-bind="text:$root.newData.UpdatedBy"></span></th>
                        <th class="widthdate"><span data-bind="text:$root.newData.UpdatedDate"></span></th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: listDataItems">
                    @*item template*@
                    <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                   click: $parent.editInline3.bind($data,$index())">
                        <td><span data-bind="text:$data.LocationCode"></span></td>
                        <td class="right"><a data-toggle="modal" data-target="#detailunit" data-bind="attr:{'data-ppc':$data.PPC,'data-hra':$data.HRA}"><span data-bind="text:$data.UnitCode"></span></a></td>
                        <td><span data-bind="text:$data.UnitName"></span></td>
                        <td class="current center"><input type="checkbox" data-bind="checked:$data.StatusActive, enable: false" /></td>
                        <td class="current"><span data-bind="text:$data.Remark"></span></td>
                        <td><span data-bind="text:$data.UpdatedBy"></span></td>
                        <td><span data-bind="text:$data.UpdatedDate"></span></td>
                    </tr>
                    @*edit template*@
                    <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index()),
                                   click: $parent.selectRow.bind($data, $index())">
                        <td><span data-bind="text:$data.LocationCode"></span></td>
                        <td class="right"><a data-toggle="modal" data-target="#detailunit" data-bind="attr:{'data-ppc':$data.PPC,'data-hra':$data.HRA}"><span data-bind="text:$data.UnitCode"></span></a></td>
                        <td><span data-bind="text:$data.UnitName"></span></td>
                        <td class="current center"><input type="checkbox" data-bind="checked:$data.StatusActive" /></td>
                        <td class="current"><input data-bind="value:$data.Remark,tabToNext:[$parent,$data], valueUpdate: 'afterkeydown'" class="form-control transparent" /></td>
                        <td><span data-bind="text:$data.UpdatedBy"></span></td>
                        <td><span data-bind="text:$data.UpdatedDate"></span></td>
                    </tr>
                </tbody>
                <tbody data-bind="visible: !listDataItems().length">
                    <tr>
                        <td colspan="7" class="empty-row-message"><div class="loader"></div></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
            @Html.Partial("GridViewFooter")
        </div>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="detailunit" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Unit Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="table-overflow">
                        <table class="table table-striped" id="wips">
                            <thead>
                                <tr class="head">
                                    <th>PPC</th>
                                    <th>HRA</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><label id="ppc-name"></label></td>
                                    <td><label id="hra-name"></label></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- End Modal -->
</div>
@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">

        (function(app) {
            app.EditGrid = function() {
                var self = this;

                // Filter
                self.filterLocationCode = ko.observable('PLNT');
                self.filterExcelLocationCode = self.filterLocationCode();
                self.filterLocationName = ko.observable();
                self.locationDescriptions = @Html.Raw(Json.Encode(@Model.LocationNameLookupList));

                self.newData = {
                    LocationCode: ko.observableArray([]),
                    UnitCode: ko.observable(''),
                    UnitName: ko.observable(''),
                    StatusActive: ko.observable(true),
                    Remark: ko.observable('')
                }

                //get location name by location code
                self.onLocationCodeChange = function() {
                    for (var i = 0; i < self.locationDescriptions.length; i++) {
                        if (self.locationDescriptions[i].LocationCode == self.filterLocationCode()) {
                            self.filterLocationName(self.locationDescriptions[i].LocationName);
                            break;
                        }
                    }
                };

                self.afterRender = function(options, item)
                {
                    var locDesc;
                    for (var i = 0; i < self.locationDescriptions.length; i++) {
                        if (self.locationDescriptions[i].LocationCode == item.Value) {
                            locDesc = self.locationDescriptions[i].LocationName;
                            break;
                        }
                    }

                    $(options).attr('title', item.Value);
                    $(options).attr(
                        'data-content',
                        "<span class='text'><span style='width: 35px; display: inline-block;'>" + item.Value + "</span> - " + locDesc + "</span>"
                    );

                }

                // Options
                self.LocationCodeSelectList = ko.observableArray([{ "Name": 'PLNT' }]);
                $.ajax({
                    url: @Html.BaseUrl("MasterPlantUnit/GetLocationCodeSelectList"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: '',
                    dataType: 'json',
                    success: function(data) {
                        //var locationCodeModel = [];
                        //$.each(data, function(index, value) {
                        //    locationCodeModel.push({ "Name": value });
                        //});
                        self.LocationCodeSelectList(data);
                    }
                });

                // Gridview Initialization
                self.gridView = new app.GridViewModel({
                    Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", LocationCode: self.filterLocationCode },
                    DataSourceUrl: @Html.BaseUrl("MasterPlantUnit/GetUnits"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 1
                });

                // Field Validations
                self.gridView.applyValidationRules = function(entity) {

                    self.RemoveNotification();

                    entity.LocationCode.extend({
                        required: {
                            message: "<strong>Location Code</strong> cannot be empty!"
                        }
                    });
                    entity.UnitCode.extend({
                        required: {
                            message: "<strong>Unit Code</strong> cannot be empty!"
                        }
                    });
                    entity.UnitName.extend({
                        required: {
                            message: "<strong>Unit Name</strong> cannot be empty!"
                        }
                    });
                    entity.Remark.extend({
                        required: {
                            message: "<strong>Remark</strong> cannot be empty!",
                            onlyIf: function() {
                                return entity.StatusActive() === false;
                            }
                        }
                    });
                };

                // Reset Fields for Insert Row
                self.gridView.resetDefault = function(viewModel) {
                    viewModel.LocationCode('');
                    viewModel.UnitCode('');
                    viewModel.UnitName('');
                    viewModel.StatusActive(true);
                    viewModel.Remark('');
                };

                // Generate Excel
                self.generateExcel = function(formElement) {
                    $(formElement).find("input[name=locationCode]").val(self.filterExcelLocationCode);
                    return true;
                }

                // Save Action
                self.saveData = function() {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "new": self.gridView.listNewItems(),
                        "edit": self.gridView.listEditItems()
                    }

                    datas = JSON.stringify(datas);

                    $.ajax({
                        url: @Html.BaseUrl("MasterPlantUnit/SaveAllUnits"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {
                            if (data.New) {
                                $.each(data.New, function(k, value) {
                                    if (value) {
                                        SKTIS.Helper.ResponseNotification(value, "Insert Unit", value.LocationCode + " - " + value.UnitCode);
                                    }
                                });
                            }
                            if (data.Edit) {
                                $.each(data.Edit, function(k, value) {
                                    if (value) {
                                        SKTIS.Helper.ResponseNotification(value, "Edit Unit", value.LocationCode + " - " + value.UnitCode);
                                    }
                                });
                            }

                            self.gridView.sort('UpdatedDate', 'DESC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                        }
                    });
                }

                // Load Data
                self.search = function() {
                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    } else {
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }

                    self.filterExcelLocationCode = self.filterLocationCode();
                    self.gridView.search({}, function(response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message, 'error');
                            $('.empty-row-message').html(response.message);
                        } else if (response.status == 'Empty') {

                            self.RemoveNotification();

                            //SKTIS.Helper.Notification(response.message, 'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });

                    self.RemoveNotification = function() {
                        if ($('#noty_top_layout_container').length > 0) {
                            $('#noty_top_layout_container').remove();
                        }
                    };
                };

                self.onLocationCodeChange();
                self.search();

                // Check whether New or Edit data is existing and not saved to database yet (on Request action)
                SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
            };

            ko.applyBindings(new app.EditGrid());

        })(app = this.app || {});

        $(document).ready(function() {
            $('#detailunit').on('show.bs.modal', function(event) {
                var button = $(event.relatedTarget);
                var hra = button.data('hra');
                var ppc = button.data('ppc');
                var modal = $(this);
                modal.find('#ppc-name').text(ppc);
                modal.find('#hra-name').text(hra);
            });

            $('#detailunit').on('hide.bs.modal', function (event) {
                var modal = $(this);
                modal.find('#ppc-name').text('');
                modal.find('#hra-name').text('');
            });
        });
    </script>
}