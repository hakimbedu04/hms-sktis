@model SKTISWebsite.Models.ExePlantMaterialUsages.InitExePlantMaterialUsagesViewModel
@using HMS.SKTIS.Application.Resources
@using SKTISWebsite.Helper
@{ Html.SetPageTitle(" Material Usage "); }

<div class="container-fluid" data-bind="with: gridView">
    <div class="row">
        <div class="col-lg-12">
            <div class="col-lg-6">
                <div class="row">
                    <label class="form-label col-lg-4">
                        Location
                    </label>
                    <div class="col-lg-2">
                        @*@Html.DropDownList("ddlFilterLocationCode", new SelectList(Model.PLNTChildLocationLookupList, "LocationCode", "LocationCode"),
                            new
                            {
                                @class = "selectpicker show-tick form-control",
                                id = "ddlFilterLocationCode",
                                data_live_search = "true",
                                data_bind = "value:$root.filterLocationCode, event : { change : $root.onLocationCodeChange}"
                            })*@
                        <select id="ddlFilterLocationCode"
                                class="selectpicker show-tick form-control"
                                data-live-search="true"
                                data-bind="selectPicker:$root.filterLocationCode, optionsText: 'LocationCode', optionsValue : 'LocationCode', optionsAfterRender: locationDesc, selectPickerOptions: { optionsArray: $root.itemLocations }, event : { change : $root.onLocationCodeChange}"></select>
                    </div>
                    <div class="col-lg-4">
                        <input type="text" class="form-control" readonly="readonly" data-bind="value:$root.filterLocationName">
                    </div>
                </div>
                <div class="row">
                    <label class="form-label col-lg-4">
                        Unit
                    </label>
                    <div class="col-lg-6">
                        <select class="selectpicker show-tick form-control" id="ddlUnitFilter"
                                data-live-search="true"
                                data-bind="selectPicker: $root.filterUnit, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.UnitSelectList }"></select>
                    </div>
                </div>
                <div class="row">
                    <label class="form-label col-lg-4">
                        Shift
                    </label>
                    <div class="col-lg-6">
                        <select class="selectpicker show-tick form-control" id="ddlShiftFilter"
                                data-live-search="true"
                                data-bind="selectPicker: $root.filterShift, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ShiftSelectList }"></select>
                    </div>
                </div>
                <div class="row">
                    <label class="form-label col-lg-4">
                        Brand Group
                    </label>
                    <div class="col-lg-6">
                        <select class="selectpicker show-tick form-control" id="ddlBrandGroupFilter"
                                data-live-search="true"
                                data-bind="selectPicker: $root.filterBrandGroup, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.BrandGroupSelectList }, event : { change : $root.onBrandGroupSelectedChange}"></select>
                    </div>
                </div>
                <div class="row">
                    <label class="form-label col-lg-4">
                        Process
                    </label>
                    <div class="col-lg-6">
                        <select class="selectpicker show-tick form-control" id="ddlProcessFilter"
                                data-live-search="true"
                                data-bind="selectPicker: $root.filterProcess, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ProcessSelectList }, event: { change: $root.onProcessChange }"></select>
                    </div>
                </div>
                <div class="row">
                    <label class="form-label col-lg-4">
                        Material
                    </label>
                    <div class="col-lg-6">
                        <select class="selectpicker show-tick form-control" id="ddlMaterialFilter"
                                data-live-search="true"
                                data-bind="selectPicker: $root.filterMaterial, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.MaterialSelectList },  event : { change : $root.CheckMaterial }"></select>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="row">
                    <label class="form-label col-lg-3">
                        Year
                    </label>
                    <div class="col-lg-4">
                        @Html.DropDownList("filterYear", Model.YearSelectList,
                            new Dictionary<string, object> { { "data-bind", "value:$root.filterYear, event : { change : $root.onYearSelectedChange}" },
                                { "class", "selectpicker show-tick form-controlt" },
                                {"data-live-search","true"},{"id","filterYear"} })
                    </div>
                </div>
                <div class="row">
                    <label class="form-label col-lg-3">
                        Week
                    </label>
                    <div class="col-lg-4">
                        <select id="filterWeek" class="selectpicker show-tick form-control" data-live-search="true"
                                data-bind="selectPicker: $root.filterWeek, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.WeekFromSelectList },  event : { change : $root.GetDateFromSelectList }"></select>
                    </div>
                </div>
                <div class="row">
                    <label class="form-label col-lg-3" id="rdWeek">
                        Date
                    </label>
                    <div class="col-lg-4">
                        <select id="filterDate" class="selectpicker show-tick form-control" data-live-search="true"
                                data-bind="selectPicker: $root.filterDate, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.DateFromSelectList }"></select>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="action-btn">
                        @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString()))
                        {
                            <button type="button" class="btn btn-primary" data-bind="click:$root.search">View</button>
                        }
                        @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
                        {
                            <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">Save</button>
                        }
                        @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString()))
                        {
                            using (Html.BeginForm("GenerateExcel", "ExePlantMaterialUsages", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                            {
                                <input type="hidden" name="locationCode">
                                <input type="hidden" name="unit">
                                <input type="hidden" name="shift">
                                <input type="hidden" name="process">
                                <input type="hidden" name="brandGroup">
                                <input type="hidden" name="material">
                                <input type="hidden" name="year">
                                <input type="hidden" name="week">
                                <input type="hidden" name="date">
                                <button type="submit" class="btn btn-primary">Excel</button>
                            }
                        }
                        
                        @Html.Partial("GridViewPageSizeSelector")
                    </div>
                </div>
            </div>
            <div class="table-overflow">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr class="head">
                            <th rowspan="2">Group</th>
                            <th colspan="3">Take</th>
                            <th rowspan="2" class="widthsmall">Production</th>  
                            <th data-bind="visible: $root.isNotMaterialTobaco" rowspan="2" class="widthsmall">Residue</th>
                            <th data-bind="visible: $root.isNotMaterialTobaco" rowspan="2" class="widthsmall">Reject</th>
                            <th data-bind="visible: $root.isMaterialTobaco" colspan="3">Tobacco Residue</th>
                            <th rowspan="2">Lost</th>
                        </tr>
                        <tr class="head">
                            <th class="widthsmall">1</th>
                            <th class="widthsmall">2</th>
                            <th class="widthsmall">3</th>
                            <th data-bind="visible: $root.isMaterialTobaco" class="widthsmall">FM</th>
                            <th data-bind="visible: $root.isMaterialTobaco" class="widthsmall">Sapon</th>
                            <th data-bind="visible: $root.isMaterialTobaco" class="widthsmall">Stem</th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: listDataItems">
                        <tr data-bind="if: ($parent.editingRowIndex() !== $index()), click: $parent.editInline3.bind($data,$index())">
                            <td><span data-bind="text:$data.GroupCode"></span></td>
                            <td class="current"><span data-bind="decimal:$data.Ambil1"></span></td>
                            <td class="current"><span data-bind="decimal:$data.Ambil2"></span></td>
                            <td class="current"><span data-bind="decimal:$data.Ambil3"></span></td>
                            <td><span data-bind="decimal: $data.Production, precision:3"></span></td>
                            <td data-bind="visible: $root.isNotMaterialTobaco" class="current"><span data-bind="decimal:$data.Sisa"></span></td>
                            <td data-bind="visible: $root.isNotMaterialTobaco" class="current"><span data-bind="decimal:$data.CountableWaste"></span></td>
                            <td data-bind="visible: $root.isMaterialTobaco" class="current"><span data-bind="decimal:$data.TobFM"></span></td>
                            <td data-bind="visible: $root.isMaterialTobaco" class="current"><span data-bind="decimal:$data.TobStem"></span></td>
                            <td data-bind="visible: $root.isMaterialTobaco" class="current"><span data-bind="decimal:$data.TobSapon"></span></td>
                            <td><span data-bind="decimal:$data.UncountableWaste"></span></td>
                        </tr>
                        <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                       if:($parent.editingRowIndex() === $index()),
                                       click: $parent.selectRow.bind($data, $index())">
                            <td><span data-bind="text:$data.GroupCode"></span></td>
                            <td class="current"><input data-bind="value:$data.Ambil1, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="decimal-dot" min="0" /></td>
                            <td class="current"><input data-bind="value:$data.Ambil2, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="decimal-dot" min="0" /></td>
                            <td class="current"><input data-bind="value:$data.Ambil3, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="decimal-dot" min="0" /></td>
                            <td><span data-bind="decimal: $data.Production, precision:3"></span></td>
                            <td data-bind="visible: $root.isNotMaterialTobaco" class="current"><input data-bind="value:$data.Sisa, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="decimal-dot" min="0" /></td>
                            <td data-bind="visible: $root.isNotMaterialTobaco" class="current"><input data-bind="value:$data.CountableWaste, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="decimal-dot" min="0" /></td>
                            <td data-bind="visible: $root.isMaterialTobaco" class="current"><input data-bind="value:$data.TobFM, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="decimal-dot" min="0" /></td>
                            <td data-bind="visible: $root.isMaterialTobaco" class="current"><input data-bind="value:$data.TobStem, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="decimal-dot" min="0" /></td>
                            <td data-bind="visible: $root.isMaterialTobaco" class="current"><input data-bind="value:$data.TobSapon, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="decimal-dot" min="0" /></td>
                            <td><span data-bind="decimal:$data.UncountableWaste"></span></td>
                        </tr>
                    </tbody>
                    <tbody data-bind="visible: !listDataItems().length">
                        <tr>
                            <td colspan="10" class="empty-row-message"><div class="loader"></div></td>
                        </tr>
                    </tbody>
                    <tbody>
                        <tr>
                            <td align="center"><strong>Total</strong></td>
                            <td><strong><span data-bind="decimal:$root.TotalAmbil1"></span></strong></td>
                            <td><strong><span data-bind="decimal:$root.TotalAmbil2"></span></strong></td>
                            <td><strong><span data-bind="decimal:$root.TotalAmbil3"></span></strong></td>
                            <td><strong><span data-bind="decimal:$root.TotalProduction, precision:3"></span></strong></td>
                            <td data-bind="visible: $root.isNotMaterialTobaco"><strong><span data-bind="decimal:$root.TotalResidue"></span></strong></td>
                            <td data-bind="visible: $root.isNotMaterialTobaco"><strong><span data-bind="decimal:$root.TotalReject"></span></strong></td>
                            <td data-bind="visible: $root.isMaterialTobaco" class="current"><strong><span data-bind="decimal:$root.TotalTobFM"></span></strong></td>
                            <td data-bind="visible: $root.isMaterialTobaco" class="current"><strong><span data-bind="decimal:$root.TotalTobStem"></span></strong></td>
                            <td data-bind="visible: $root.isMaterialTobaco" class="current"><strong><span data-bind="decimal:$root.TotalTobSapon"></span></strong></td>
                            <td><strong><span data-bind="decimal:$root.TotalLost"></span></strong></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
                @Html.Partial("GridViewFooter")
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.Extenders.js" type="text/javascript"></script>
    <script type="text/javascript">

    (function (app) {
        app.EditGrid = function () {
            var self = this;
            self.itemLocations = ko.observableArray(@Html.Raw(Json.Encode(@Model.PLNTChildLocationLookupList)));

            self.filterLocationCode = ko.observable($("#ddlFilterLocationCode").val());
            self.filterLocationName = ko.observable();
            self.filterUnit = ko.observable('');
            self.filterShift = ko.observable('');
            self.filterProcess = ko.observable('');
            self.filterBrandGroup = ko.observable('');
            self.filterMaterial = ko.observable('');
            self.filterYear = ko.observable('@Model.DefaultYear');
            self.filterWeek = ko.observable('@Model.DefaultWeek');
            self.filterDate = ko.observable('@Model.DefaultDate');
            self.firstLoad = true;
            self.firstLoadDate = true;

            //event on location dropdown change
            self.onLocationCodeChange = function(callback) {
                async.series([
                function(cb) {
                    self.getLocationNameFilter(cb);//location
                },
                function(cb) {
                    self.getUnitSelectListByLocation(cb);//unit
                },
                function(cb) {
                    self.getShiftSelectListByLocation(cb);//shift
                },
                function(cb) {
                    self.getBrandGroupSelectListByLocation(cb);//brand
                }
                ], function() {
                    if (typeof callback == 'function') callback();
                });
                //self.getLocationNameFilter();
                //self.getUnitSelectListByLocation();
                //self.getShiftSelectListByLocation();
                //self.getBrandGroupSelectListByLocation();
            };

            self.onBrandGroupSelectedChange = function(){
                self.getProcessSelectListByLocation();
            };

            self.onYearSelectedChange = function() {
                self.GetWeekFromSelectList();
            };

            self.onProcessChange = function() {
                self.getMaterialSelectListByLocation();
            };

            self.newData = {
                GroupCode: ko.observable(''),
                Ambil1: ko.observable(0),
                Ambil2: ko.observable(0),
                Ambil3: ko.observable(0),
                Sisa: ko.observable(0),
                CountableWaste: ko.observable(0),
                TobFM: ko.observable(0),
                TobStem: ko.observable(0),
                TobSapon: ko.observable(0),
                UncountableWaste: ko.observable(0)
            };

            //get location name by location code
            self.getLocationNameFilter = function(cb) {
                self.itemLocations().map(function(v) {
                    if (typeof v.LocationCode !== 'undefined' && v.LocationCode == self.filterLocationCode()) {
                        self.filterLocationName(v.LocationName);
                    }
                });
                if (typeof cb == 'function') cb();
            };

            self.isMaterialTobaco = ko.observable(true);
            self.isNotMaterialTobaco = ko.observable(true);
            self.CheckMaterial = function() {
                if (self.filterMaterial()) {
                    $.ajax({
                        url: @Html.BaseUrl("ExePlantMaterialUsages/CheckMaterial"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { materialCode: self.filterMaterial(), brandGroup: self.filterBrandGroup() },
                        dataType: 'json',
                        success: function(data) {
                            if (data) {
                                self.isMaterialTobaco(true);
                                self.isNotMaterialTobaco(false);
                            } else {
                                self.isMaterialTobaco(false);
                                self.isNotMaterialTobaco(true);
                            }


                        }
                    });
                }
            }

            self.UnitSelectList = ko.observableArray();
            self.getUnitSelectListByLocation = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("ExePlantMaterialUsages/GetUnits"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { locationCode: self.filterLocationCode() },
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlUnitFilter').find('option').remove();
                        $('#ddlUnitFilter').selectpicker('refresh');
                        self.UnitSelectList(data);
                        if (typeof cb == 'function') cb();
                    }
                });
            };

            self.ShiftSelectList = ko.observableArray();
            self.getShiftSelectListByLocation = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("ExePlantMaterialUsages/GetShifts"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { locationCode: self.filterLocationCode() },
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlShiftFilter').find('option').remove();
                        $('#ddlShiftFilter').selectpicker('refresh');

                        var kpsWeekModel = [];
                        $.each(data, function(index, value) {
                            kpsWeekModel.push({ "Text": value.Text, "Value": value.Text });
                        });
                        self.ShiftSelectList(kpsWeekModel);
                        if (typeof cb == 'function') cb();
                    }
                });
            };

            self.ProcessSelectList = ko.observableArray();
            self.getProcessSelectListByLocation = function() {
                $.ajax({
                    url: @Html.BaseUrl("ExePlantMaterialUsages/GetProcess"),
                    type: 'GET',
                    async: false,
                    contentType: 'application/json',
                    data: {
                        locationCode    : self.filterLocationCode(),
                        KPSYear         : self.filterYear(),
                        KPSWeek         : self.filterWeek()
                    },
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlProcessFilter').find('option').remove();
                        $('#ddlProcessFilter').selectpicker('refresh');
                        self.ProcessSelectList(data);
                        //self.getBrandGroupSelectListByLocation();
                    }
                });
            };

            self.BrandGroupSelectList = ko.observableArray();
            self.getBrandGroupSelectListByLocation = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("ExePlantMaterialUsages/GetBrandGroup"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: {
                        locationCode    : self.filterLocationCode(),
                        ProcessGroup    : self.filterProcess(),
                        KPSYear         : self.filterYear(),
                        KPSWeek         : self.filterWeek()
                    },
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlBrandGroupFilter').find('option').remove();
                        $('#ddlBrandGroupFilter').selectpicker('refresh');
                        //self.filterBrandGroup('');
                        self.filterBrandGroup('');
                        self.BrandGroupSelectList(data);
                        if (typeof cb == 'function') cb();
                    }
                });
            };

            self.MaterialSelectList = ko.observableArray();
            self.getMaterialSelectListByLocation = function() {
                $.ajax({
                    url: @Html.BaseUrl("ExePlantMaterialUsages/GetMaterial"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: {
                        brandGroup: self.filterBrandGroup(),
                        ProcessGroup: self.filterProcess()
                    },
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlMaterialFilter').find('option').remove();
                        $('#ddlMaterialFilter').selectpicker('refresh');

                        self.filterMaterial('');
                        self.MaterialSelectList(data);
                        if (self.firstLoad) {
                            self.search();
                            self.firstLoad = false;
                        }
                    }
                });
            };

            self.WeekFromSelectList = ko.observableArray([]);
            self.GetWeekFromSelectList = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("ExePlantMaterialUsages/GetWeekByYear"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { year: self.filterYear() },
                    dataType: 'json',
                    success: function(data) {
                        $('#filterWeek').find('option').remove();
                        $('#filterWeek').selectpicker('refresh');
                        var kpsWeekModel = [];
                        $.each(data, function(index, value) {
                            kpsWeekModel.push({ "Text": value, "Value": value });
                        });
                        self.WeekFromSelectList(kpsWeekModel);

                        self.filterWeek('@Model.DefaultWeek');

                        //self.GetDateFromSelectList();
                        if (typeof cb == 'function') cb();
                    }
                });
            };

            self.DateFromSelectList = ko.observableArray([]);
            self.GetDateFromSelectList = function() {
                if (!self.firstLoadDate) {
                    $.ajax({
                        url: @Html.BaseUrl("ExePlantMaterialUsages/GetDateByYearWeek"),
                        type: 'GET',
                        async:'false',
                        contentType: 'application/json',
                        data: { year: self.filterYear(), week: self.filterWeek() },
                        dataType: 'json',
                        success: function(data) {
                            $('#filterDate').find('option').remove();
                            $('#filterDate').selectpicker('refresh');
                            var model = [];
                            $.each(data, function(index, value) {
                                model.push({ "Text": value.Text, "Value": value.Text });
                            });
                            self.DateFromSelectList(model);
                            var curDate = moment().format('DD/MM/YYYY');
                            self.filterDate(curDate);

                            //self.getProcessSelectListByLocation();
                        }
                    });
                } else {
                    self.firstLoadDate = false;
                }
            };

            self.gridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "GroupCode",
                    SortOrder: "ASC",
                    LocationCode: self.filterLocationCode,
                    Unit: self.filterUnit,
                    Shift: self.filterShift,
                    Process: self.filterProcess,
                    BrandGroup: self.filterBrandGroup,
                    Material: self.filterMaterial,
                    Year: self.filterYear,
                    Week: self.filterWeek,
                    Date: self.filterDate
                },
                DataSourceUrl: @Html.BaseUrl("ExePlantMaterialUsages/GetExePlantMaterialUsages"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            //description: validations
            self.gridView.applyValidationRules = function(entity) {
                self.RemoveNotification();

                entity.Ambil1(parseToFloat(entity.Ambil1()));
                entity.Ambil2(parseToFloat(entity.Ambil2()));
                entity.Ambil3(parseToFloat(entity.Ambil3()));
                entity.Sisa(parseToFloat(entity.Sisa()));
                entity.TobFM(parseToFloat(entity.TobFM()));
                entity.TobStem(parseToFloat(entity.TobStem()));
                entity.TobSapon(parseToFloat(entity.TobSapon()));
                entity.UncountableWaste(parseToFloat(entity.UncountableWaste()));
                entity.CountableWaste(parseToFloat(entity.CountableWaste()));
                entity.Production(parseToFloat(entity.Production()));
            };

            function mappingDatas(data) {
                ko.mapping.fromJS(data, {}, this);
                this.UncountableWaste = ko.computed({
                    read: function() {

                        var ambil1 = parseToFloat(this.Ambil1());
                        var ambil2 = parseToFloat(this.Ambil2());
                        var ambil3 = parseToFloat(this.Ambil3());
                        var sisa = parseToFloat(this.Sisa());
                        var tobFom = parseToFloat(this.TobFM());
                        var tobStem = parseToFloat(this.TobStem());
                        var tobSapon = parseToFloat(this.TobSapon());
                        var production = parseToFloat(this.Production());
                        var reject = parseToFloat(this.CountableWaste());
                        //isNaN(value) ? 0 : value;
                        var result = !self.isNotMaterialTobaco()
                            ? ambil1 + ambil2 + ambil3 - production - tobFom - tobStem - tobSapon
                            : ambil1 + ambil2 + ambil3 - production - sisa - reject;

                        return isNaN(result) ? 0 : parseToFloat(result.toFixed(2));
                    },
                    write: function(value) {
                        //update your self.chosenAge().population value here
                    },
                    owner: this
                }, this);
            }

            self.gridView.mapping = {
                create: function(options) {
                    return new mappingDatas(options.data);
                }
            };

            self.TotalAmbil1 = CalculateTotal('Ambil1');
            self.TotalAmbil2 = CalculateTotal('Ambil2');
            self.TotalAmbil3 = CalculateTotal('Ambil3');
            self.TotalProduction = CalculateTotal('Production');
            self.TotalResidue = CalculateTotal('Sisa');
            self.TotalReject = CalculateTotal('CountableWaste');
            self.TotalFM = CalculateTotal('TobFM');
            self.TotalStem = CalculateTotal('TobStem');
            self.TotalSapon = CalculateTotal('TobSapon');
            self.TotalLost = CalculateTotal('UncountableWaste');

            function CalculateTotal(fieldName){
                return ko.computed({
                    read: function() {
                        var total = 0;
                        ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                            var field = ko.isObservable(item[fieldName]) ? item[fieldName]() : item[fieldName];
                            var value = parseFloat(field);
                            if (!isNaN(value)) {
                                total += value;
                            }
                        });
                        return parseToFloat(total).toFixed(2);
                    },
                    write: function(value) {
                        //alert(value);
                    }
                });
            }

            //description: save bulk data
            self.saveData = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                if (self.filterUnit() == "" || typeof self.filterUnit() === "undefined") {
                    SKTIS.Helper.Notification("<strong>Unit</strong> cannot be empty!", 'error');
                    return;
                }

                if (self.filterProcess() == "" || typeof self.filterProcess() === "undefined") {
                    SKTIS.Helper.Notification("<strong>Process</strong> cannot be empty!", 'error');
                    return;
                }

                if (self.filterBrandGroup() == "" || typeof self.filterBrandGroup() === "undefined") {
                    SKTIS.Helper.Notification("<strong>Brand Group</strong> cannot be empty!", 'error');
                    return;
                }

                if (self.filterMaterial() == "" || typeof self.filterMaterial() === "undefined") {
                    SKTIS.Helper.Notification("<strong>Material</strong> cannot be empty!", 'error');
                    return;
                }

                if (self.filterDate() == "" || typeof self.filterDate() === "undefined") {
                    SKTIS.Helper.Notification("<strong>Date</strong> cannot be empty!", 'error');
                    return;
                }

                var datas = {
                    "Parameters": {
                        "Material": self.filterMaterial(),
                        "ProductionDate": self.filterDate()
                    },
                    "Edit": self.gridView.listEditItems()
                };
                datas = JSON.stringify(datas);
                $.ajax({
                    url: @Html.BaseUrl("ExePlantMaterialUsages/SaveAllMaterialUsages"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        if (data.Edit) {
                            $.each(data.Edit, function(k, value) {
                                if (value)
                                    SKTIS.Helper.ResponseNotification(value, "Save Master Plant Production Group", value.GroupCode);
                            });
                        }

                        self.gridView.reload();
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }
                });
            };
            self.listItemResult = ko.observableArray();
            // Check whether New or Edit data is existing and not saved to database yet (on Request action)
            SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
            // Load Data
            self.search = function() {
                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                } else {
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }
                //console.log(self.gridView.listDataItems);
                //self.filterExcelListGroup = self.filterListGroup();
                self.gridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };


            };

            //self.onYearSelectedChange(); TODO AJAX
            //self.onLocationCodeChange();
            //self.getProcessSelectListByLocation();

            //description : generateExcel
            self.generateExcel = function(formElement) {
                $(formElement).find("input[name=locationCode]").val($('#ddlFilterLocationCode').val());
                $(formElement).find("input[name=unit]").val($('#ddlUnitFilter').val());
                $(formElement).find("input[name=shift]").val($('#ddlShiftFilter').val());
                $(formElement).find("input[name=process]").val($('#ddlProcessFilter').val());
                $(formElement).find("input[name=brandGroup]").val($('#ddlBrandGroupFilter').val());
                $(formElement).find("input[name=material]").val($('#ddlMaterialFilter').val());
                $(formElement).find("input[name=year]").val($('#filterYear').val());
                $(formElement).find("input[name=week]").val($('#filterWeek').val());
                $(formElement).find("input[name=date]").val($('#filterDate').val());
                return true;
            };
            self.init = function() {
                //Asynch setting
                async.series([
                    function(callback) {
                        self.GetWeekFromSelectList(callback);
                    },
                    function(callback) {
                        self.onLocationCodeChange(callback);
                    },
                    function(callback) {
                        self.search();
                    }
                ]);

                self.firstLoad = false;
                self.firstLoadDate = false;
            };
            //self.search(); TODO AJAX
            self.init();
        };
        ko.applyBindings(new app.EditGrid());
    })(app = this.app || {});

    </script>
}