@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MaintenanceEquipmentTransfer
@using SKTISWebsite.Helper
@model SKTISWebsite.Models.EquipmentTransfer.InitEquipmentTransferViewModel

@{ Html.SetPageTitle(@MaintenanceEquipmentTransfer.PageTitle); }
<div class="col-lg-12" data-bind="with: gridView">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">
                @MaintenanceEquipmentTransfer.lblFilterSourceLocation
            </label>
            <div class="col-lg-3">
                @*@Html.DropDownList("ddlFilterSourceLocation", new SelectList(Model.LocationLookupList, "LocationCode", "LocationCode"),
                new
                {
                    @class = "selectpicker show-tick form-control",
                    id = "ddlFilterSourceLocation",
                    data_live_search = "true",
                    data_bind = "value:$root.filterSourceLocation, event : { change : $root.onSourceLocationChange }"
                })*@

                <select id="ddlFilterSourceLocation"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="enable: !$root.isBusy(), selectPicker:$root.filterSourceLocation, optionsText: 'LocationCode', optionsValue : 'LocationCode', optionsAfterRender: locationDesc, selectPickerOptions: { optionsArray: $root.menuItemLocationsSource }, event : { change : $root.onSourceLocationChange}"></select>

            </div>
            <div class="col-lg-4">
                <input type="text" class="form-control" readonly="readonly" data-bind="value:$root.filterSourceLocationName">
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                @MaintenanceEquipmentTransfer.lblFilterDestinationLocation
            </label>
            <div class="col-lg-3">
                @*@Html.DropDownList("ddlFilterDestinationLocation", new SelectList(Model.LocationLookupList, "LocationCode", "LocationCode"),
                    new
                    {
                        @class = "selectpicker show-tick form-control",
                        id = "ddlFilterDestinationLocation",
                        data_live_search = "true",
                        data_bind = "value:$root.filterDestinationLocation, event : { change : $root.onDestinationLocationChange }"
                    })*@

                <select id="ddlFilterDestinationLocation"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="enable: !$root.isBusy(), selectPicker:$root.filterDestinationLocation, optionsText: 'LocationCode', optionsValue : 'LocationCode', optionsAfterRender: locationDesc, selectPickerOptions: { optionsArray: $root.menuItemLocationsDestination }, event : { change : $root.onDestinationLocationChange}"></select>

            </div>
            <div class="col-lg-4">
                <input type="text" class="form-control" readonly="readonly" data-bind="value:$root.filterDestinationLocationName">
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Unit Code Destination
            </label>
            <div class="col-lg-3">
                <select id="ddlUnitCodeDestination" class="selectpicker show-tick form-control" data-live-search="true"
                        data-bind="enable: !$root.isBusy(), selectPicker: $root.UnitCodeDestination, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.UnitCodesSelectList }"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                @MaintenanceEquipmentTransfer.lblFilterTransferDate
            </label>
            <div class="col-lg-6">
                <div id="dtpTransferDate" class="input-group date notime">
                    @Html.TextBoxFor(model => model.DefaultTransferDate, new { @class = "form-control" })
                    @*<input type="text" class="form-control" data-bind="value:$root.filterTransferDate" />*@
                    <span class="input-group-addon" data-bind="enable: !$root.isBusy()">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="enable: !$root.isBusy(), click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="enable:($root.disableSave && !$root.isBusy()), click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString())) { 
                    using (Html.BeginForm("GenerateExcel", "MaintenanceEquipmentTransfer", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="sourceLocationCode" />
                        <input type="hidden" name="destinationLocationCode" />
                        <input type="hidden" name="transferDate" />
                        <input type="hidden" name="unitCodeDestination" />
    <button type="submit" class="btn btn-primary" data-bind="enable: !$root.isBusy()">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped">
            <thead>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'ItemCode'), css:sortCss('ItemCode', $data.sortExpression(), $data.sortOrder())">@MaintenanceEquipmentTransfer.lblTitleItemCode</th>
                    <th data-bind="click:sortBy.bind($data,'MstMntcItem.ItemDescription'), css:sortCss('MstMntcItem.ItemDescription', $data.sortExpression(), $data.sortOrder())">@MaintenanceEquipmentTransfer.lblTitleItemDescription</th>
                    <th data-bind="click:sortBy.bind($data,'MstMntcItem.UOM'), css:sortCss('MstMntcItem.UOM', $data.sortExpression(), $data.sortOrder())">@MaintenanceEquipmentTransfer.lblTitleUOM</th>
                    <th class="widthsmall">Stock</th>
                    <th class="widthsmall" data-bind="click:sortBy.bind($data,'QtyTransfer'), css:sortCss('QtyTransfer', $data.sortExpression(), $data.sortOrder())">@MaintenanceEquipmentTransfer.lblTitleQuantity</th>
                    <th data-bind="click:sortBy.bind($data,'TransferNote'), css:sortCss('TransferNote', $data.sortExpression(), $data.sortOrder())">@MaintenanceEquipmentTransfer.lblTitleDeliveryNote</th>
                </tr>
                <tr class="insertRow" data-bind="click: cancelInline.bind(),inlineAddProccess:[$data, $root.newData]">
                    <th>
                        <select id="ddlInsertItemCode" class="show-tick form-control" data-live-search="true"
                                data-bind="selectPicker: $root.newData.ItemCode,
                                optionsText: 'ItemCompact',
                                optionsValue : 'ItemCode',
                                selectPickerOptions: { optionsArray: $root.itemCodes, container: 'body' },
                                optionsAfterRender : $root.afterRender,
                                event: { change: $root.onItemCodeChange }"></select>
                    </th>
                    <th><span data-bind="text:$root.newData.ItemDescription"></span></th>
                    <th><span data-bind="text:$root.newData.UOM"></span></th>
                    <th><span data-bind="text: $root.itemStock"></span></th>
                    <th><input data-bind="value:$root.newData.Quantity, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1"/></th>
                    <th><input data-bind="value:$root.newData.DeliveryNote, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                @*item template*@
                <tr data-bind="if: ($parent.editingRowIndex() !== $index() && !$root.ValidateDateIsPast($data.UpdatedDate)),
                                   click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td><span data-bind="text:$data.ItemDescription"></span></td>
                    <td><span data-bind="text:$data.UOM"></span></td>
                    <td><span data-bind="decimal:$data.Stock"></span></td>
                    <td class="current right"><span data-bind="decimal:$data.Quantity"></span></td>
                    <td class="current"><span data-bind="text:$data.DeliveryNote"></span></td>
                </tr>
                <tr data-bind="if: ($parent.editingRowIndex() !== $index() && $root.ValidateDateIsPast($data.UpdatedDate)),
                                   click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td><span data-bind="text:$data.ItemDescription"></span></td>
                    <td><span data-bind="text:$data.UOM"></span></td>
                    <td><span data-bind="decimal:$data.Stock"></span></td>
                    <td class="right"><span data-bind="decimal:$data.Quantity"></span></td>
                    <td><span data-bind="text:$data.DeliveryNote"></span></td>
                </tr>
                @*edit template*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index() && !$root.ValidateDateIsPast($data.UpdatedDate)),
                                   click: $parent.selectRow.bind($data, $index()),
                                    event: {keydown:$parent.keydown}">
                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td><span data-bind="text:$data.ItemDescription"></span></td>
                    <td><span data-bind="text:$data.UOM"></span></td>
                    <td><span data-bind="decimal:$data.Stock"></span></td>
                    <td class="current"><input class="form-control transparent right" data-bind="value:$data.Quantity, valueUpdate:'afterkeydown'" type="number" data-sktis-validation="number" min="1"></td>
                    <td class="current"><input class="form-control transparent" data-bind="value:$data.DeliveryNote,tabToNext:[$parent,$data], valueUpdate:'afterkeydown'"></td>
                </tr>
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index() && $root.ValidateDateIsPast($data.UpdatedDate)),
                                   click: $parent.selectRow.bind($data, $index()),
                                    event: {keydown:$parent.keydown}">
                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td><span data-bind="text:$data.ItemDescription"></span></td>
                    <td><span data-bind="text:$data.UOM"></span></td>
                    <td><span data-bind="decimal:$data.Stock"></span></td>
                    <td><span data-bind="decimal:$data.Quantity"></span></td>
                    <td><span data-bind="text:$data.DeliveryNote"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="6" class="empty-row-message">
                        <div class="loader"></div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>
</div>
@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">

        (function(app) {
            app.EditGrid = function() {
                var self = this;

                // Filter
                self.menuItemLocationsSource = ko.observableArray(@Html.Raw(Json.Encode(@Model.LocationLookupList)));
                self.menuItemLocationsDestination = ko.observableArray(@Html.Raw(Json.Encode(@Model.LocationDestinationLookupList)));
                self.itemLocations = @Html.Raw(Json.Encode(Model.LocationDestinationLookupList));
                self.filterSourceLocation = ko.observable('@Model.DefaultLocation');
                self.filterDestinationLocation = ko.observable('@Model.DefaultLocationDestination');
                self.filterTransferDate = ko.observable($('#dtpTransferDate input').val());
                self.filterSourceLocationName = ko.observable();
                self.filterDestinationLocationName = ko.observable();
                self.itemCodes = ko.observableArray();
                self.itemCompacts = ko.observableArray();
                self.filterExcelSourceLocation = self.filterSourceLocation();
                self.filterExcelDestinationLocation = self.filterDestinationLocation();
                self.filterExcelTransferDate = self.filterTransferDate();
                self.UnitCodeDestination = ko.observable();
                self.itemStock = ko.observable(0);
                self.disableSave = ko.observable(true);
                
                //================= busy button state ================//
                self.isBusy = ko.observable(true);

                $(document).ajaxComplete(function () {
                    if ($.active <= 1) {
                        self.isBusy(false);
                    }
                });

                $(document).ajaxStart(function () {
                    if (!self.isBusy()) self.isBusy(true);
                });
                //================= busy button state ================//
                

                //get location name by location code
                function getLocationNameFilter(locationCode) {
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == locationCode) {
                            return self.itemLocations[i].LocationName;
                        }
                    }
                    return '';
                };

                //get itemcode by location
                self.UnitCodesSelectList = ko.observableArray();
                function getUnitCodeDestination() {
                    $.ajax({
                        url: @Html.BaseUrl("MaintenanceEquipmentTransfer/GetUnitCodeSelectList"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { locationCode: self.filterSourceLocation(), locationCodeDestination: self.filterDestinationLocation() },
                        dataType: 'json',
                        success: function(data) {
                            $('#ddlUnitCodeDestination').find('option').remove();
                            $('#ddlUnitCodeDestination').selectpicker('refresh');
                            self.UnitCodesSelectList(data);
                        }
                    });
                };

                //get itemcode by location
                function getItemCodeSelectList() {
                    $.ajax({
                        url: @Html.BaseUrl("MaintenanceEquipmentTransfer/GetItemCodeSelectList"),
                        type: 'GET',
                        contentType: 'application/json',
                        data: { locationCode: self.filterSourceLocation() },
                        dataType: 'json',
                        success: function(data) {
                            $('#ddlInsertItemCode').find('option').remove();
                            $('#ddlInsertItemCode').selectpicker('refresh');
                            var listItemCode = [];
                            $.each(data, function(index, value) {
                                listItemCode.push({ 
                                    ItemCode: value.ItemCode,
                                    ItemDescription: value.ItemDescription,
                                    ItemCompact: value.ItemDescription + ' - ' + value.ItemCode,
                                    UOM: value.UOM
                                });
                            });
                            //sorting
                            for (var j = 0; j < listItemCode.length; j++) {
                                for (var i = j; i < listItemCode.length; i++) {
                                    if (listItemCode[i].ItemDescription<listItemCode[j].ItemDescription){
                                        var temp = listItemCode[i];
                                        listItemCode[i] = listItemCode[j];
                                        listItemCode[j] = temp;
                                    }
                                
                                }
                            }
                            self.itemCodes(listItemCode);
                        }
                    });
                };

                //get item stock
                self.getItemStock = function() {
                    $.ajax({
                        url: @Html.BaseUrl("MaintenanceEquipmentTransfer/GetItemStock"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ LocationCodeSource: self.filterSourceLocation(), ItemCode: self.newData.ItemCode(), TransferDate: self.filterTransferDate() }),
                        dataType: 'json',
                        success: function(data) {
                            self.itemStock(data);
                        }
                    });
                };

                self.onSourceLocationChange = function() {
                    self.filterSourceLocationName(getLocationNameFilter(self.filterSourceLocation()));
                    getItemCodeSelectList();
                    self.GetUnitCode();
                };

                self.afterRender = function(options, item)
                {
                    if (typeof(item) === 'undefined') return;

                    $(options).attr('title', item.ItemCode);
                } 

                self.onDestinationLocationChange = function() {
                    self.filterDestinationLocationName(getLocationNameFilter(self.filterDestinationLocation()));
                    self.GetUnitCode();
                };

                self.GetUnitCode = function() {
                    getUnitCodeDestination();
                };

                //get item description and uom
                self.onItemCodeChange = function() {
                    for (var i = 0; i < self.itemCodes().length; i++) {
                        if (self.itemCodes()[i].ItemCode == self.newData.ItemCode()) {
                            self.newData.ItemDescription(self.itemCodes()[i].ItemDescription);
                            self.newData.UOM(self.itemCodes()[i].UOM);
                            self.newData.ItemCompact(self.itemCodes()[i].ItemDescription);
                            break;
                        }
                    }
                    self.getItemStock();
                };

                $('#dtpTransferDate').on('dp.change', function(e) {
                    self.filterTransferDate($('#dtpTransferDate input').val());
                });

                self.newData = {
                    ItemCompact: ko.observable(''),
                    ItemCode: ko.observable(''),
                    ItemDescription: ko.observable(''),
                    UOM: ko.observable(''),
                    Quantity: ko.observable(''),
                    DeliveryNote: ko.observable('')
                };

                // Gridview Initialization
                self.gridView = new app.GridViewModel({
                    Criteria: {
                        PageSize: 10,
                        PageIndex: 1,
                        SortExpression: "UpdatedDate",
                        SortOrder: "DESC",
                        SourceLocationCode: self.filterSourceLocation,
                        DestinationLocationCode: self.filterDestinationLocation,
                        TransferDate: self.filterTransferDate,
                        UnitCodeDestination: self.UnitCodeDestination
                    },
                    DataSourceUrl: @Html.BaseUrl("MaintenanceEquipmentTransfer/GetEquipmentTransfers"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 1
                });

                // Field Validations
                self.gridView.applyValidationRules = function(entity) {

                    self.RemoveNotification();

                    entity.ItemCode.extend({
                        required: {
                            message: "<strong>Item Code</strong> cannot be empty!"
                        }
                    });
                    entity.Quantity.extend({
                        required: {
                            message: "<strong>Quantity</strong> cannot be empty!"
                        },
                        number: {
                            message: "<strong>Quantity</strong> must be a number!"
                        }
                    });
                };

                // Reset Fields for Insert Row
                self.gridView.resetDefault = function(viewModel) {
                    //viewModel.ItemCode('');
                    //viewModel.ItemDescription('');
                    //viewModel.UOM('');
                    viewModel.Quantity('');
                    viewModel.DeliveryNote('');
                };

                self.ValidateDateIsPast= function(date) {
                    if(ko.utils.unwrapObservable(date) === '' || typeof ko.utils.unwrapObservable(date) === 'undefined') return false;
                    return moment(moment(ko.utils.unwrapObservable(date), 'DD/MM/YYYY').format('YYYY-MM-DD')).isBefore(moment().format('YYYY-MM-DD'));
                };

                self.generateExcel = function(formElement) {
                    $(formElement).find("input[name=sourceLocationCode]").val(self.filterExcelSourceLocation);
                    $(formElement).find("input[name=destinationLocationCode]").val(self.filterExcelDestinationLocation);
                    $(formElement).find("input[name=transferDate]").val(self.filterExcelTransferDate);
                    $(formElement).find("input[name=unitCodeDestination]").val(self.UnitCodeDestination());
                    return true;
                };

                // Save Action
                self.saveData = function() {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    // Prevent Edited new Row data for triggering Edited message
                    // Primary Key : ListGroup, ListDetail (need to compare both of arrays using unique key[s])
                    //var newItemLength = self.gridView.listNewItems().length;
                    //$.each(self.gridView.listNewItems(),function(k,v){
                    //    var shouldBeAsNew = ko.utils.arrayFirst(self.gridView.listEditItems(),function(editItem){
                    //        if(editItem){
                    //            return editItem['ItemCode'] == v['ItemCode'];
                    //        }
                    //    });
                    //    if(shouldBeAsNew){
                    //        self.gridView.listNewItems()[k] = shouldBeAsNew;
                    //    }
                    //    self.gridView.listEditItems.remove(function(data) {
                    //        if(data){
                    //            return data['ItemCode'] == v['ItemCode'];
                    //        }
                    //    });
                    //});

                    var datas = {
                        "Parameters": { "LocationCodeSource": self.filterSourceLocation(),
                            "LocationCodeDestination": self.filterDestinationLocation(),
                            "TransferDate": self.filterTransferDate(),
                            "UnitCodeDestination": self.UnitCodeDestination()
                        },
                        "new": self.gridView.listNewItems(),
                        "edit": self.gridView.listEditItems()
                    };

                    datas = JSON.stringify(datas);

                    $.ajax({
                        url: @Html.BaseUrl("MaintenanceEquipmentTransfer/SaveAllEquipmentTransfers"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        beforeSend:function(){
                            self.disableSave(false);
                        },
                        dataType: 'json',
                        success: function (data) {
                            //console.log(data);
                            if (data.New) {
                                $.each(data.New, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Insert Equipment Transfer",
                                            self.filterSourceLocation() + " - " + self.filterTransferDate() + " - " + value.ItemCode);
                                });
                            }

                            if (data.Edit) {
                                $.each(data.Edit, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Edit Equipment Transfer",
                                            value.LocationCodeSource + " - " + value.TransferDate + " - " + value.ItemCode);
                                });
                            }

                            self.gridView.sort('UpdatedDate', 'DESC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                            //hakim
                            self.getItemStock();

                        },complete: function(){
                            self.disableSave(true);
                        }
                    });
                };

                // Load Data
                self.search = function() {
                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    } else {
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }

                    self.filterExcelSourceLocation = self.filterSourceLocation();
                    self.filterExcelDestinationLocation = self.filterDestinationLocation();
                    self.filterExcelTransferDate = self.filterTransferDate();

                    self.gridView.search({}, function(response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message, 'error');
                            $('.empty-row-message').html(response.message);
                        } else if (response.status == 'Empty') {

                            self.RemoveNotification();

                            //SKTIS.Helper.Notification(response.message,'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });

                    self.RemoveNotification = function() {
                        if ($('#noty_top_layout_container').length > 0) {
                            $('#noty_top_layout_container').remove();
                        }
                    };
                };
                self.onSourceLocationChange();
                self.onDestinationLocationChange();
                self.search();

                // Check whether New or Edit data is existing and not saved to database yet (on Request action)
                SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);

                $(document).ready(function(){
                    $('#dtpTransferDate').on('dp.change',function(){
                        self.getItemStock();
                    });
                });
            };
            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});

    </script>
}