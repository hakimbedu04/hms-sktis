@using HMS.SKTIS.Application.Resources
@using SKTISWebsite.Helper
@using HMS.SKTIS.Application.Resources.Views.MasterMntcItemLocation
@model SKTISWebsite.Models.MasterMntcItemLocation.InitItemLocationViewModel


@{Html.SetPageTitle(@MasterMntcItemLocation.PageTitle);}
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-10">
        <div class="row">
            <label class="form-label col-lg-2">@MasterMntcItemLocation.lblFilterLocation</label>
            <div class="col-lg-2">
                @*@Html.DropDownList("ddlLocation", Model.Location,
                                             new Dictionary<string, object> { { "data-bind", "value:$root.filterLocation, event : { change : $root.onLocationCodeChange}" },
                                                                     { "class", "selectpicker show-tick form-controlt" },
                                                                     {"data-live-search","true"},{"id","ddlLocation"} })*@
                <select id="ddlLocation"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterLocation, optionsText: 'Value', optionsValue : 'Value', optionsAfterRender: $root.afterRender, selectPickerOptions: { optionsArray: $root.menuItemLocations}, event : { change : $root.onLocationCodeChange}">
                </select>
            </div>
            <div class="col-lg-3">
                <input data-bind="value: $root.filterLocationName" type="text" class="form-control" readonly="readonly">
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString())) {
                    using (Html.BeginForm("GenerateExcel", "MasterMntcItemLocation", FormMethod.Post, new { @data_bind = "submit: $root.getLocationCode" }))
                    {
                        <input type="hidden" name="locationCode" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>

    <div id="master-item-location" class="table-overflow">
        <table class="table table-striped table-hover">
            <thead>
                <tr class="head">
                    <th rowspan="2" data-bind="click:sortBy.bind($data,'ItemCode'), css:sortCss('ItemCode', $data.sortExpression(), $data.sortOrder())" class="widthdg15">@MasterMntcItemLocation.lblTitleItemCode</th>
                    <th rowspan="2" data-bind="click:sortBy.bind($data,'ItemDescription'), css:sortCss('ItemDescription', $data.sortExpression(), $data.sortOrder())" class="widthmedium">@MasterMntcItemLocation.lblTitleItemDescription</th>
                    <th rowspan="2" data-bind="click:sortBy.bind($data,'BufferStock'), css:sortCss('BufferStock', $data.sortExpression(), $data.sortOrder())">@MasterMntcItemLocation.lblTitleBuffer</th>
                    <th rowspan="2" data-bind="click:sortBy.bind($data,'MinOrder'), css:sortCss('MinOrder', $data.sortExpression(), $data.sortOrder())">@MasterMntcItemLocation.lblTitleOrder</th>
                    <th colspan="2">@MasterMntcItemLocation.lblTitleStock</th>
                    @*<th colspan="2">@MasterMntcItemLocation.lblTitleSDD</th>*@
                    <th rowspan="2">@MasterMntcItemLocation.lblRemark</th>
                    <th rowspan="2">@MasterMntcItemLocation.lblTitleUpdatedBy</th>
                    <th rowspan="2">@MasterMntcItemLocation.lblTitleUpdatedDate</th>
                </tr>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'StockReadyToUse'), css:sortCss('StockReadyToUse', $data.sortExpression(), $data.sortOrder())">@MasterMntcItemLocation.lblTitleStockReady</th>
                    <th data-bind="click:sortBy.bind($data,'StockAll'), css:sortCss('StockAll', $data.sortExpression(), $data.sortOrder())">@MasterMntcItemLocation.lblTitleStockAll</th>
                    @*<th data-bind="click:sortBy.bind($data,'SDDMin'), css:sortCss('SDDMin', $data.sortExpression(), $data.sortOrder())">@MasterMntcItemLocation.lblTitleSDDMin</th>
                        <th data-bind="click:sortBy.bind($data,'SDDMax'), css:sortCss('SDDMax', $data.sortExpression(), $data.sortOrder())">@MasterMntcItemLocation.lblTitleSDDMax</th>*@
                </tr>
                <tr class="insertRow" data-bind="click: cancelInline.bind(),inlineAddProccess:[$data, $root.newData]">
                    <th class="widthdg15">
                        @Html.DropDownList("ItemCode", Model.Item, new Dictionary<string, object> { { "data-bind", "value:$root.newData.ItemCode, event : { change : $root.NewItemCodeChange}" } ,
                                                                                                    { "class", "selectpicker show-tick form-control" },
                                                                                                    {"data-live-search","true"}})
                    </th>
                    <th class="widthmedium"><span id="spItemDescription" data-bind="text:$root.newData.ItemDescription, valueUpdate: 'afterkeydown'"></span></th>
                    <th class="current"><input data-bind="value:$root.newData.BufferStock, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="1" /></th>
                    <th class="current"><input data-bind="value:$root.newData.MinOrder, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="1" /></th>
                    <th><input data-bind="value:$root.newData.StockReadyToUse, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="1" /></th>
                    <th><input data-bind="value:$root.newData.StockAll, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="1" /></th>
                    @*<th class="current"><input data-bind="value:$root.newData.SDDMin" class="form-control transparent" /></th>
                        <th class="current"><input data-bind="value:$root.newData.SDDMax" class="form-control transparent" /></th>*@
                    <th class="current"><input data-bind="value:$root.newData.Remark, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                   click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td><span data-bind="text:$data.ItemDescription"></span></td>
                    <td class="current"><span data-bind="text:$data.BufferStock"></span></td>
                    <td class="current"><span data-bind="text:$data.MinOrder"></span></td>
                    <td><span data-bind="text:$data.StockReadyToUse"></span></td>
                    <td><span data-bind="text:$data.StockAll"></span></td>
                    @*<td class="current"><span data-bind="text:$data.SDDMin"></span></td>
                        <td class="current"><span data-bind="text:$data.SDDMax"></span></td>*@
                    <td class="current"><span data-bind="text:$data.Remark"></span></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
                @*edit template*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index()),
                                   click: $parent.selectRow.bind($data, $index())">
                    <td><span data-bind="text:$data.ItemCode"></span></td>
                    <td><span data-bind="text:$data.ItemDescription"></span></td>
                    <td class="current"><input data-bind="value:$data.BufferStock, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="1" /></td>
                    <td class="current"><input data-bind="value:$data.MinOrder, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="1" /></td>
                    <td><span data-bind="text:$data.StockReadyToUse"></span></td>
                    <td><span data-bind="text:$data.StockAll"></span></td>
                    @*<td class="current"><input data-bind="value:$data.SDDMin" class="form-control transparent" /></td>
                        <td class="current"><input data-bind="value:$data.SDDMax" class="form-control transparent" /></td>*@
                    <td class="current"><input data-bind="value:$data.Remark,tabToNext:[$parent,$data], valueUpdate: 'afterkeydown'" class="form-control transparent" /></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="9" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>
</div>

@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">
    (function(app) {
        app.EditGrid = function() {
            var self = this;
            self.itemDescriptions = @Html.Raw(Json.Encode(@Model.ItemDescription));
            self.menuItemLocations = ko.observableArray(@Html.Raw(Json.Encode(@Model.Location)));

            self.filterLocation = ko.observable('SKT');
            self.LocationCode = ko.observable(self.filterLocation());
            self.locationDescriptions = @Html.Raw(Json.Encode(@Model.LocationNameLookupList));
            self.filterLocationName = ko.observable('');

            //get location name by location code
            self.onLocationCodeChange = function() {
                for (var i = 0; i < self.locationDescriptions.length; i++) {
                    if (self.locationDescriptions[i].LocationCode == self.filterLocation()) {
                        self.filterLocationName(self.locationDescriptions[i].LocationName);
                        break;
                    }
                }
            };

            self.ItemCodeChange = function(value) {
                for (var i = 0; i < self.itemDescriptions.length; i++) {
                    if (self.itemDescriptions[i].ItemCode == value.ItemCode()) {
                        value.ItemDescription(self.itemDescriptions[i].ItemDescription);
                        break;
                    }
                }
            }.bind(this);

            self.afterRender = function(options, item)
            {
                var locDesc;
                for (var i = 0; i < self.locationDescriptions.length; i++) {
                    if (self.locationDescriptions[i].LocationCode == item.Value) {
                        locDesc = self.locationDescriptions[i].LocationName;
                        break;
                    }
                }

                $(options).attr('title', item.Value);
                $(options).attr(
                    'data-content',
                    "<span class='text'><span style='width: 35px; display: inline-block;'>" + item.Value + "</span> - " + locDesc + "</span>"
                );

            }

            self.NewItemCodeChange = function() {
                for (var i = 0; i < self.itemDescriptions.length; i++) {
                    if (self.itemDescriptions[i].ItemCode == self.newData.ItemCode()) {
                        console.log(self.itemDescriptions[i]);
                        self.newData.ItemDescription = self.itemDescriptions[i].ItemDescription;
                        self.newData.ItemType = self.itemDescriptions[i].ItemType;
                        $('#spItemDescription').html(self.newData.ItemDescription);
                        break;
                    }
                }
            }.bind(this);

            self.getDefaultItemDescription = function() {
                var result ="";
                for (var i = 0; i < self.itemDescriptions.length; i++) {
                    if (self.itemDescriptions[i].ItemCode == $("#ItemCode").val()) {
                        result = self.itemDescriptions[i].ItemDescription;
                        break;
                    }
                }
                return result;
            };

            self.getDefaultItemType = function() {
                var result ="";
                for (var i = 0; i < self.itemDescriptions.length; i++) {
                    if (self.itemDescriptions[i].ItemCode == $("#ItemCode").val()) {
                        result = self.itemDescriptions[i].ItemType;
                        break;
                    }
                }
                return result;
            };

            self.newData = {
                ItemCode : ko.observableArray([]),
                ItemDescription : self.getDefaultItemDescription(),
                ItemType : self.getDefaultItemType(),
                BufferStock : ko.observable(''),
                MinOrder : ko.observable(''),
                StockReadyToUse : ko.observable(''),
                StockAll : ko.observable(''),
                AVGWeeklyUsage :ko.observable(''),
                //SDDMin : ko.observable(''),
                //SDDMax : ko.observable(''),
                Remark : ko.observable(''),
            };

            //description: init gridView
            self.gridView = new app.GridViewModel({
                Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", LocationCode: self.filterLocation },
                DataSourceUrl:  @Html.BaseUrl("MasterMntcItemLocation/GetMstItemLocation"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            //description: validations
            self.gridView.applyValidationRules = function(entity) {

                self.RemoveNotification();

                entity.ItemCode.extend({
                    required: {
                        message: "<strong>Item Code</strong> cannot be empty!"
                    }
                });
                entity.StockReadyToUse.extend({
                    required: {
                        message: "<strong>Stock Ready to use</strong> cannot be empty!"
                    }
                });
                entity.StockAll.extend({
                    required: {
                        message: "<strong>Stock All</strong> cannot be empty!"
                    }
                });
            };

            // Reset Fields for Insert Row
            self.gridView.resetDefault = function (viewModel) {
                viewModel.BufferStock('');
                viewModel.MinOrder('');
                viewModel.StockReadyToUse('');
                viewModel.StockAll('');
                viewModel.AVGWeeklyUsage('');
                //viewModel.SDDMin('');
                //viewModel.SDDMax('');
                viewModel.Remark('');
            };

            //description: save bulk data
            self.saveData = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    "Parameters": { "LocationCode": $('#ddlLocation option:selected').text() },
                    "New": self.gridView.listNewItems(),
                    "Edit": self.gridView.listEditItems()
                };
                datas = JSON.stringify(datas);
                $.ajax({
                    url:  @Html.BaseUrl("MasterMntcItemLocation/SaveItemLocation"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {
                            if (data.New) {
                                $.each(data.New, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Insert Item Location", value.ItemCode);
                                });
                            }

                            if (data.Edit) {
                                $.each(data.Edit, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Edit Item Location", value.ItemCode);
                                });
                            }

                            self.gridView.sort('UpdatedDate', 'DESC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                        }
                    });
                };

                self.getLocationCode = function(formElement) {
                    $(formElement).find("input[name=locationCode]").val($("#ddlLocation").val());
                    return true;
                };

                //description: load data
                self.search = function() {

                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    }else{
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }
                    self.LocationCode = self.filterLocation();
                    self.gridView.search({}, function (response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message,'error');
                            $('.empty-row-message').html(response.message);
                        }else if (response.status == 'Empty') {

                            self.RemoveNotification();

                            //SKTIS.Helper.Notification(response.message,'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });

                    self.RemoveNotification = function() {
                        if ($('#noty_top_layout_container').length > 0) {
                            $('#noty_top_layout_container').remove();
                        }
                    };
                };
                self.onLocationCodeChange();
                self.search();

                // Check whether New or Edit data is existing and not saved to database yet (on Request action)
                SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
                self.LocationCode = $("#ddlLocation").val();

            };
            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});

    </script>
}