@model SKTISWebsite.Models.PlanningPlantTPU.InitPlantTPUViewModel
@using HMS.SKTIS.Application.Resources
@using SKTISWebsite.Helper
@{ Html.SetPageTitle(" Target Production Units (TPU)"); }
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">
                Location
            </label>
            <div class="col-lg-2">
                @*@Html.DropDownList("ddlFilterLocationCode", new SelectList(Model.PLNTChildLocationLookupList, "LocationCode", "LocationCode"),
                new
                {
                    @class = "selectpicker show-tick form-control",
                    id = "ddlFilterLocationCode",
                    data_live_search = "true",
                    data_bind = "value:$root.filterLocationCode, event : { change : $root.onLocationCodeChange}"
                })*@
                <select class="selectpicker show-tick form-control" data-live-search="true" id="ddlFilterLocationCode"
                        data-bind="selectPicker: $root.filterLocationCode, optionsText: 'LocationCompat', optionsValue : 'LocationCode', optionsAfterRender : $root.afterRender, selectPickerOptions: { optionsArray: $root.ListLocation }, event : { change : $root.onLocationCodeChange}, isDisabled: $root.isLoading()"></select>
            </div>
            <div class="col-lg-5">
                <input type="text" class="form-control" readonly="readonly" data-bind="value:$root.filterLocationName">
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Brand
            </label>
            <div class="col-lg-7">
                <select id="ddlFilterBrandCode" class="show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterBrandCode, optionsText: 'Text', optionsValue : 'Value',
                        selectPickerOptions: { optionsArray: $root.BrandCodeSelectList }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Shift
            </label>
            <div class="col-lg-7">
                <select id="ddlFilterShift" class="show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterShift, optionsText: 'Text', optionsValue : 'Value',
                        selectPickerOptions: { optionsArray: $root.ShiftSelectList }, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                Conversion
            </label>
            <div class="col-lg-7">
                @Html.DropDownList("ddlFilterConversion", Model.ConversionSelectList, new
                {
                    @class = "selectpicker show-tick form-control",
                    id = "ddlFilterConversion",
                    data_live_search = "true",
                    data_bind = "value:$root.filterConversion, isDisabled: $root.isLoading(),event : { change : $root.onFilterConversionChange}"
                    
                })
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">
                KPS Year
            </label>
            <div class="col-lg-4">
                @Html.DropDownList("ddlFilterKPSYear", Model.YearSelectList,
                new
                {
                    @class = "selectpicker show-tick form-control",
                    id = "ddlFilterKPSYear",
                    data_live_search = "true",
                    data_bind = "value:$root.filterKPSYear, event : { change : $root.onKPSYearChange }, isDisabled: $root.isLoading()"
                })
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                KPS Week
            </label>
            <div class="col-lg-4">
                <select id="ddlKPSWeekFilter" class="show-tick form-control" data-live-search="true"
                        data-bind="selectPicker: $root.filterKPSWeek, optionsText: 'Text', optionsValue : 'Value',
                        selectPickerOptions: { optionsArray: $root.KPSWeekSelectList }, event:{change:$root.onKPSWeekChange}, isDisabled: $root.isLoading()"></select>
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                <input type="checkbox" data-bind="checked: $root.isFilterCurrentDayForward, enable: $root.filterCurrenDayEnabled, click: $root.onCurrentDayForwardChange($root.isFilterCurrentDayForward)">
                Current Day Forward
            </label>
            <div class="col-lg-4">
                <div id="filterCurrentDayForward" class='input-group date time' data-bind="dateTimePicker: $root.filterCurrentDayForward, value: $root.filterCurrentDayForward, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true}">
                    <input id="dtFilterFrom" class="form-control" readonly="readonly" />
                    <span class="input-group-addon" data-bind="visible: $root.filterCurrenDayEnabled">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <p class="bg-primary">WPP Information: In Stick <span data-bind="decimal:$root.InStickCalculation"></span>, In Box <span data-bind="decimal:$root.InBoxCalculation"></span></p>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData, enable: $root.saveEnabled">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Submit.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.submitData, enable:$root.submitEnabled">Submit</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString()))
                {
                    using (Html.BeginForm("GenerateExcel", "PlanningPlantTPU", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="locationCode">
                        <input type="hidden" name="brandCode">
                        <input type="hidden" name="shift">
                        <input type="hidden" name="year">
                        <input type="hidden" name="week">
                        <input type="hidden" name="conversion">
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.UnitWorkHours.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">Unit Work Hours</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Calculate.ToString()))
                {
                    <button class="btn btn-success" type="button" data-bind="click:$root.calculateData, enable:$root.ButtonCalculate">Calculate</button>
                }
            </div>
        </div>
    </div>
    <div class="table-overflow">
        <table class="table table-striped sticktable">
            <thead>
                <tr class="head">
                    <th rowspan="5" class="rotate-90"><div><span>Unit</span></div></th>
                    <th rowspan="3" colspan="3">Rolling Worker</th>
                    <th colspan="5">Monday</th>
                    <th colspan="5">Tuesday</th>
                    <th colspan="5">Wednesday</th>
                    <th colspan="5">Thursday</th>
                    <th colspan="5">Friday</th>
                    <th colspan="5">Saturday</th>
                    <th colspan="5">Sunday</th>
                    <th rowspan="2" colspan="2">Total</th>
                </tr>
                <tr class="head">
                    <th colspan="5"><span data-bind="text:$root.mondayDate"></span></th>
                    <th colspan="5"><span data-bind="text:$root.tuesdayDate"></span></th>
                    <th colspan="5"><span data-bind="text:$root.wednesdayDate"></span></th>
                    <th colspan="5"><span data-bind="text:$root.thursdayDate"></span></th>
                    <th colspan="5"><span data-bind="text:$root.fridayDate"></span></th>
                    <th colspan="5"><span data-bind="text:$root.saturdayDate"></span></th>
                    <th colspan="5"><span data-bind="text:$root.sundayDate"></span></th>
                </tr>
                <tr>

                    <th colspan="5" class="current" data-bind="visible: $root.mondayEditable() == true, click:$root.confirmSave"><input type="text" style="text-align:center;" class="form-control transparent right alphanumeric" data-bind="value:$root.largestStandardHourMon.Value, event: { change: $root.onUWHChange($root.largestStandardHourMon) }" data-sktis-validation="decimal-dot" /></th>
                    <th colspan="5" data-bind="visible: $root.mondayEditable() == false"><span data-bind="text:$root.largestStandardHourMon.Value"></span></th>

                    <th colspan="5" class="current" data-bind="visible: $root.tuesdayEditable() == true, click:$root.confirmSave"><input type="text" style="text-align:center;" class="form-control transparent right alphanumeric" data-bind="value:$root.largestStandardHourTue.Value, event: { change: $root.onUWHChange($root.largestStandardHourTue) }" data-sktis-validation="decimal-dot" /></th>
                    <th colspan="5" data-bind="visible: $root.tuesdayEditable() == false"><span data-bind="text:$root.largestStandardHourTue.Value"></span></th>

                    <th colspan="5" class="current" data-bind="visible: $root.wednesdayEditable() == true, click:$root.confirmSave"><input type="text" style="text-align:center;" class="form-control transparent right alphanumeric" data-bind="value:$root.largestStandardHourWed.Value, event: { change: $root.onUWHChange($root.largestStandardHourWed) }" data-sktis-validation="decimal-dot" /></th>
                    <th colspan="5" data-bind="visible: $root.wednesdayEditable() == false"><span data-bind="text:$root.largestStandardHourWed.Value"></span></th>

                    <th colspan="5" class="current" data-bind="visible: $root.thursdayEditable() == true, click:$root.confirmSave"><input type="text" style="text-align:center;" class="form-control transparent right alphanumeric" data-bind="value:$root.largestStandardHourThu.Value, event: { change: $root.onUWHChange($root.largestStandardHourThu) }" data-sktis-validation="decimal-dot" /></th>
                    <th colspan="5" data-bind="visible: $root.thursdayEditable() == false"><span data-bind="text:$root.largestStandardHourThu.Value"></span></th>

                    <th colspan="5" class="current" data-bind="visible: $root.fridayEditable() == true, click:$root.confirmSave"><input type="text" style="text-align:center;" class="form-control transparent right alphanumeric" data-bind="value:$root.largestStandardHourFri.Value, event: { change: $root.onUWHChange($root.largestStandardHourFri) }" data-sktis-validation="decimal-dot" /></th>
                    <th colspan="5" data-bind="visible: $root.fridayEditable() == false"><span data-bind="text:$root.largestStandardHourFri.Value"></span></th>

                    <th colspan="5" class="current" data-bind="visible: $root.saturdayEditable() == true, click:$root.confirmSave"><input type="text" style="text-align:center;" class="form-control transparent right alphanumeric" data-bind="value:$root.largestStandardHourSat.Value, event: { change: $root.onUWHChange($root.largestStandardHourSat) }" data-sktis-validation="decimal-dot" /></th>
                    <th colspan="5" data-bind="visible: $root.saturdayEditable() == false"><span data-bind="text:$root.largestStandardHourSat.Value"></span></th>

                    <th colspan="5" class="current" data-bind="visible: $root.sundayEditable() == true, click:$root.confirmSave"><input type="text" style="text-align:center;" class="form-control transparent right alphanumeric" data-bind="value:$root.largestStandardHourSun.Value, event: { change: $root.onUWHChange($root.largestStandardHourSun) }" data-sktis-validation="decimal-dot" /></th>
                    <th colspan="5" data-bind="visible: $root.sundayEditable() == false"><span data-bind="text:$root.largestStandardHourSun.Value"></span></th>

                    <th colspan="2" class="head"><span data-bind="text:$root.totalLargestStandardHour"></span></th>
                </tr>
                <tr class="head">
                    <th rowspan="2" class="rotate-90"><div><span>Registered</span></div></th>
                    <th rowspan="2" class="rotate-90"><div><span>Available</span></div></th>
                    <th rowspan="2" class="rotate-90"><div><span>Allocation</span></div></th>
                    <th rowspan="2" class="rotate-90"><div><span>% Attendance</span></div></th>
                    <th colspan="2">Historical Capacity</th>
                    <th colspan="2">Target<br /><span data-bind="text:$root.targetLabel"></span></th>
                    <th rowspan="2" class="rotate-90"><div><span>% Attendance</span></div></th>
                    <th colspan="2">Historical Capacity</th>
                    <th colspan="2">Target<br /><span data-bind="text:$root.targetLabel"></span></th>
                    <th rowspan="2" class="rotate-90"><div><span>% Attendance</span></div></th>
                    <th colspan="2">Historical Capacity</th>
                    <th colspan="2">Target<br /><span data-bind="text:$root.targetLabel"></span></th>
                    <th rowspan="2" class="rotate-90"><div><span>% Attendance</span></div></th>
                    <th colspan="2">Historical Capacity</th>
                    <th colspan="2">Target<br /><span data-bind="text:$root.targetLabel"></span></th>
                    <th rowspan="2" class="rotate-90"><div><span>% Attendance</span></div></th>
                    <th colspan="2">Historical Capacity</th>
                    <th colspan="2">Target<br /><span data-bind="text:$root.targetLabel"></span></th>
                    <th rowspan="2" class="rotate-90"><div><span>% Attendance</span></div></th>
                    <th colspan="2">Historical Capacity</th>
                    <th colspan="2">Target<br /><span data-bind="text:$root.targetLabel"></span></th>
                    <th rowspan="2" class="rotate-90"><div><span>% Attendance</span></div></th>
                    <th colspan="2">Historical Capacity</th>
                    <th colspan="2">Target<br /><span data-bind="text:$root.targetLabel"></span></th>
                    <th colspan="2">Target</th>
                </tr>
                <tr class="head">
                    <th class="rotate-90"><div><span>Worker</span></div></th>
                    <th class="rotate-90"><div><span>Unit</span></div></th>
                    <th class="rotate-90"><div><span>System</span></div></th>
                    <th class="rotate-90"><div><span>Manual</span></div></th>
                    <th class="rotate-90"><div><span>Worker</span></div></th>
                    <th class="rotate-90"><div><span>Unit</span></div></th>
                    <th class="rotate-90"><div><span>System</span></div></th>
                    <th class="rotate-90"><div><span>Manual</span></div></th>
                    <th class="rotate-90"><div><span>Worker</span></div></th>
                    <th class="rotate-90"><div><span>Unit</span></div></th>
                    <th class="rotate-90"><div><span>System</span></div></th>
                    <th class="rotate-90"><div><span>Manual</span></div></th>
                    <th class="rotate-90"><div><span>Worker</span></div></th>
                    <th class="rotate-90"><div><span>Unit</span></div></th>
                    <th class="rotate-90"><div><span>System</span></div></th>
                    <th class="rotate-90"><div><span>Manual</span></div></th>
                    <th class="rotate-90"><div><span>Worker</span></div></th>
                    <th class="rotate-90"><div><span>Unit</span></div></th>
                    <th class="rotate-90"><div><span>System</span></div></th>
                    <th class="rotate-90"><div><span>Manual</span></div></th>
                    <th class="rotate-90"><div><span>Worker</span></div></th>
                    <th class="rotate-90"><div><span>Unit</span></div></th>
                    <th class="rotate-90"><div><span>System</span></div></th>
                    <th class="rotate-90"><div><span>Manual</span></div></th>
                    <th class="rotate-90"><div><span>Worker</span></div></th>
                    <th class="rotate-90"><div><span>Unit</span></div></th>
                    <th class="rotate-90"><div><span>System</span></div></th>
                    <th class="rotate-90"><div><span>Manual</span></div></th>
                    <th class="rotate-90"><div><span>System</span></div></th>
                    <th class="rotate-90"><div><span>Manual</span></div></th>
                </tr>
                <tr class="insertRow" data-bind="click: cancelInline.bind(),inlineAddProccess:[$data, $root.newData]" style="display: none">
                    <th colspan="35">
                        <input type="text" />
                    </th>
                </tr>
            </thead>
            <tbody data-bind="visible: listDataItems().length, foreach: listDataItems">
                <tr>
                    <td class="right">
                        <span data-bind="text:$data.UnitCode"></span>
                    </td>
                    <td class="right"><span data-bind="decimal:$data.WorkerRegister"></span></td>
                    <td class="right"><span data-bind="decimal:$data.WorkerAvailable"></span></td>
                    <td class="current right">
                        <input data-bind="value: $data.Allocation, event:{change:$root.EditedRowCalculate.bind($parent,$data), click:$root.confirmSave}" type="text" class="form-control transparent right" data-sktis-validation="decimal-dot" />
                    </td>
                    @*Monday*@
                    <td class="right">
                        <span data-bind="decimal:$data.PercentAttendance1"></span>
                    </td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityWorker1"></span></td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityGroup1"></span></td>
                    <td><span data-bind="decimal:$data.TargetSystem1"></span></td>
                    <!-- ko if: $root.mondayEditable() == true -->
                    <td class="current right">
                        <input data-bind="value:$data.TargetManualMon, event:{change:$root.EditedRow.bind($parent,$data), click:$root.confirmCalculate}" type="text" data-sktis-validation="decimal-dot" class="form-control transparent right" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.mondayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualMon"></span>
                    </td>
                    <!-- /ko -->
                    @*Tuesday*@
                    <td class="right">
                        <span data-bind="decimal:$data.PercentAttendance2"></span>
                    </td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityWorker2"></span></td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityGroup2"></span></td>
                    <td><span data-bind="decimal:$data.TargetSystem2"></span></td>
                    <!-- ko if: $root.tuesdayEditable() == true -->
                    <td class="current right">
                        <input data-bind="value:$data.TargetManualTue, event:{change:$root.EditedRow.bind($parent,$data), click:$root.confirmCalculate}" type="text" data-sktis-validation="decimal-dot" class="form-control transparent right" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.tuesdayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualTue"></span>
                    </td>
                    <!-- /ko -->
                    @*Wednesday*@
                    <td class="right">
                        <span data-bind="decimal:$data.PercentAttendance3"></span>
                    </td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityWorker3"></span></td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityGroup3"></span></td>
                    <td><span data-bind="decimal:$data.TargetSystem3"></span></td>
                    <!-- ko if: $root.wednesdayEditable() == true -->
                    <td class="current right">
                        <input data-bind="value:$data.TargetManualWed, event:{change:$root.EditedRow.bind($parent,$data), click:$root.confirmCalculate}" type="text" data-sktis-validation="decimal-dot" class="form-control transparent right" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.wednesdayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualWed"></span>
                    </td>
                    <!-- /ko -->
                    @*Thursday*@
                    <td class="right">
                        <span data-bind="decimal:$data.PercentAttendance4"></span>
                    </td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityWorker4"></span></td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityGroup4"></span></td>
                    <td><span data-bind="decimal:$data.TargetSystem4"></span></td>
                    <!-- ko if: $root.thursdayEditable() == true -->
                    <td class="current right">
                        <input data-bind="value:$data.TargetManualThu, event:{change:$root.EditedRow.bind($parent,$data), click:$root.confirmCalculate}" type="text" data-sktis-validation="decimal-dot" class="form-control transparent right" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.thursdayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualThu"></span>
                    </td>
                    <!-- /ko -->
                    @*Friday*@
                    <td class="right">
                        <span data-bind="decimal:$data.PercentAttendance5"></span>
                    </td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityWorker5"></span></td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityGroup5"></span></td>
                    <td><span data-bind="decimal:$data.TargetSystem5"></span></td>
                    <!-- ko if: $root.fridayEditable() == true -->
                    <td class="current right">
                        <input data-bind="value:$data.TargetManualFri, event:{change:$root.EditedRow.bind($parent,$data), click:$root.confirmCalculate}" type="text" data-sktis-validation="decimal-dot" class="form-control transparent right" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.fridayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualFri"></span>
                    </td>
                    <!-- /ko -->
                    @*Saturday*@
                    <td class="right">
                        <span data-bind="decimal:$data.PercentAttendance6"></span>
                    </td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityWorker6"></span></td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityGroup6"></span></td>
                    <td><span data-bind="decimal:$data.TargetSystem6"></span></td>
                    <!-- ko if: $root.saturdayEditable() == true -->
                    <td class="current right">
                        <input data-bind="value:$data.TargetManualSat, event:{change:$root.EditedRow.bind($parent,$data), click:$root.confirmCalculate}" type="text" data-sktis-validation="decimal-dot" class="form-control transparent right" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.saturdayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualSat"></span>
                    </td>
                    <!-- /ko -->
                    @*Sunday*@
                    <td class="right">
                        <span data-bind="decimal:$data.PercentAttendance7"></span>
                    </td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityWorker7"></span></td>
                    <td><span data-bind="decimal:$data.HistoricalCapacityGroup7"></span></td>
                    <td><span data-bind="decimal:$data.TargetSystem7"></span></td>
                    <!-- ko if: $root.sundayEditable() == true -->
                    <td class="current right">
                        <input data-bind="value:$data.TargetManualSun, event:{change:$root.EditedRow.bind($parent,$data), click:$root.confirmCalculate}" type="text" data-sktis-validation="decimal-dot" class="form-control transparent right" />
                    </td>
                    <!-- /ko -->
                    <!-- ko if: $root.sundayEditable() == false -->
                    <td>
                        <span data-bind="decimal: $data.TargetManualSun"></span>
                    </td>
                    <!-- /ko -->
                    <td class="total right"><span data-bind="decimal:$data.TotalTargetSystem"></span></td>
                    <td class="total right"><span data-bind="decimal:$data.TotalTargetManual"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="41" class="empty-row-message">
                        <div class="loader"></div>
                    </td>
                </tr>
            </tbody>
            <tfoot data-bind="visible: listDataItems().length">
                <tr class="total">
                    <td class="right">Total</td>
                    <td class="right"><span data-bind="text: listDataItems().length"></span></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetSystemMon"></span></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetManualMon"></span></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetSystemTue"></span></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetManualTue"></span></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetSystemWed"></span></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetManualWed"></span></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetSystemThu"></span></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetManualThu"></span></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetSystemFri"></span></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetManualFri"></span></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetSystemSat"></span></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetManualSat"></span></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetSystemSun"></span></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetManualSun"></span></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetSystem"></span></td>
                    <td class="right"><span data-bind="decimal: $root.totalTargetManual"></span></td>
                </tr>
            </tfoot>
        </table>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Unit Work Hours</h4>
                </div>
                <div class="modal-body">
                    <table class="table table-striped" id="uwh">
                        <thead>
                            <tr class="head">
                                <th>Unit</th>
                                <th>Brand</th>
                                <th>Monday</th>
                                <th>Tuesday</th>
                                <th>Wednesday</th>
                                <th>Thursday</th>
                                <th>Friday</th>
                                <th>Saturday</th>
                                <th>Sunday</th>
                            </tr>
                        </thead>
                        <tbody data-bind="visible: listDataItems().length, foreach: listDataItems">
                            <tr>
                                <td><span data-bind="text:$data.UnitCode"></span></td>
                                <td><span data-bind="text:$data.BrandCode"></span></td>
                                <!-- ko if: $root.mondayEditable() == true -->
                                <td class="current right">
                                    <input data-bind="value: $data.ProcessWorkHoursMon, event:{change:$root.EditedWorkUnitHour.bind($parent,$data,$data.ProcessWorkHoursMon, $data.UnitCode, 1), click:$root.confirmSave}" type="text" class="form-control transparent right" data-sktis-validation="decimal-dot" />
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.mondayEditable() == false -->
                                <td>
                                    <span data-bind="decimal: $data.ProcessWorkHoursMon"></span>
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.tuesdayEditable() == true -->
                                <td class="current right">
                                    <input data-bind="value: $data.ProcessWorkHoursTue, event:{change:$root.EditedWorkUnitHour.bind($parent,$data,$data.ProcessWorkHoursTue, $data.UnitCode, 2), click:$root.confirmSave}" type="text" class="form-control transparent right" data-sktis-validation="decimal-dot" />
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.tuesdayEditable() == false -->
                                <td>
                                    <span data-bind="decimal: $data.ProcessWorkHoursTue"></span>
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.wednesdayEditable() == true -->
                                <td class="current right">
                                    <input data-bind="value: $data.ProcessWorkHoursWed, event:{change:$root.EditedWorkUnitHour.bind($parent,$data,$data.ProcessWorkHoursWed, $data.UnitCode, 3), click:$root.confirmSave}" type="text" class="form-control transparent right" data-sktis-validation="decimal-dot" />
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.wednesdayEditable() == false -->
                                <td>
                                    <span data-bind="decimal: $data.ProcessWorkHoursWed"></span>
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.thursdayEditable() == true -->
                                <td class="current right">
                                    <input data-bind="value: $data.ProcessWorkHoursThu, event:{change:$root.EditedWorkUnitHour.bind($parent,$data, $data.ProcessWorkHoursThu, $data.UnitCode, 4), click:$root.confirmSave}" type="text" class="form-control transparent right" data-sktis-validation="decimal-dot" />
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.thursdayEditable() == false -->
                                <td>
                                    <span data-bind="decimal: $data.ProcessWorkHoursThu"></span>
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.fridayEditable() == true -->
                                <td class="current right">
                                    <input data-bind="value: $data.ProcessWorkHoursFri, event:{change:$root.EditedWorkUnitHour.bind($parent,$data,$data.ProcessWorkHoursFri, $data.UnitCode, 5), click:$root.confirmSave}" type="text" class="form-control transparent right" data-sktis-validation="decimal-dot" />
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.fridayEditable() == false -->
                                <td>
                                    <span data-bind="decimal: $data.ProcessWorkHoursFri"></span>
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.saturdayEditable() == true -->
                                <td class="current right">
                                    <input data-bind="value: $data.ProcessWorkHoursSat, event:{change:$root.EditedWorkUnitHour.bind($parent,$data,$data.ProcessWorkHoursSat, $data.UnitCode, 6), click:$root.confirmSave}" type="text" class="form-control transparent right" data-sktis-validation="decimal-dot" />
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.saturdayEditable() == false -->
                                <td>
                                    <span data-bind="decimal: $data.ProcessWorkHoursSat"></span>
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.sundayEditable() == true -->
                                <td class="current right">
                                    <input data-bind="value: $data.ProcessWorkHoursSun, event:{change:$root.EditedWorkUnitHour.bind($parent,$data,$data.ProcessWorkHoursSun, $data.UnitCode, 7), click:$root.confirmSave}" type="text" class="form-control transparent right" data-sktis-validation="decimal-dot" />
                                </td>
                                <!-- /ko -->
                                <!-- ko if: $root.sundayEditable() == false -->
                                <td>
                                    <span data-bind="decimal: $data.ProcessWorkHoursSun"></span>
                                </td>
                                <!-- /ko -->
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!-- End Modal -->
    @Html.Partial("TransactionHistory")

</div>

@section Scripts
{
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.Extenders.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery.jstepper.min.js" type="text/javascript"></script>
    <script type="text/javascript">

    (function(app) {
        app.EditGrid = function() {
            var self = this;

            // State Buttons
            self.submitEnabled = ko.observable(false);
            self.saveEnabled = ko.observable(true);
            self.UWHEnabled = ko.observable(true);
            self.filterCurrenDayEnabled = ko.observable(true);


            self.maximumWorkHour = ko.observable(10);
            self.firstInit = true;
            //Filter
            self.unitStatus = false;
            self.isAlreadySubmitted = ko.observable(false);
            self.isLoading = ko.observable(false);
            self.EditedTargetManual = ko.observable(false);
            self.EditedCanculation = ko.observable(false);
            self.itemLocations = @Html.Raw(Json.Encode(@Model.PLNTChildLocationLookupList));
            self.filterLocationCode = ko.observable($('#ddlFilterLocationCode').val());
            self.locationCodeurl = ko.observable("@Model.LocationCode");
            self.filterLocationName = ko.observable();
            self.filterBrandCode = ko.observable('@Model.DefaultBrandCode');
            self.filterShift = ko.observable(@Model.DefaultShift);
            self.filterConversion = ko.observable('@Model.DefaultConversion');
            self.filterKPSYear = ko.observable(@Model.DefaultYear);
            self.filterKPSWeek = ko.observable(@Model.DefaultWeek);
            self.BrandCodeSelectList = ko.observableArray([]);
            self.ShiftSelectList = ko.observableArray([]);
            self.KPSWeekSelectList = ko.observableArray([]);
            self.ButtonCalculate = ko.observable(false);
            self.TargetWPP = ko.observable(@Model.DefaultTargetWPP);
            self.filterCurrentDayForward = ko.observable('@Model.TodayDate');
            self.isFilterCurrentDayForward = ko.observable(false);
            self.StickPerBox = ko.observable(0);
            self.targetLabel = ko.observable('(stick/d)');
            self.onCurrentDayForwardChange = function(item) {
                if (self.filterCurrenDayEnabled() == true && item() == true){
                    var date = self.filterCurrentDayForward();
                    var day = moment(date, "DD/MM/YYYY").weekday();
                    switch(day)
                    {
                        case 0:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(false);
                            self.thursdayEditable(false);
                            self.fridayEditable(false);
                            self.saturdayEditable(false);
                            self.sundayEditable(false);
                            break;
                        case 1:
                            self.mondayEditable(true);
                            self.tuesdayEditable(true);
                            self.wednesdayEditable(true);
                            self.thursdayEditable(true);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 2:
                            self.mondayEditable(false);
                            self.tuesdayEditable(true);
                            self.wednesdayEditable(true);
                            self.thursdayEditable(true);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 3:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(true);
                            self.thursdayEditable(true);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 4:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(false);
                            self.thursdayEditable(true);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 5:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(false);
                            self.thursdayEditable(false);
                            self.fridayEditable(true);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                        case 6:
                            self.mondayEditable(false);
                            self.tuesdayEditable(false);
                            self.wednesdayEditable(false);
                            self.thursdayEditable(false);
                            self.fridayEditable(false);
                            self.saturdayEditable(true);
                            self.sundayEditable(true);
                            break;
                    }
                }
                else if(self.filterCurrenDayEnabled() == true && item() == false){
                    self.mondayEditable(true);
                    self.tuesdayEditable(true);
                    self.wednesdayEditable(true);
                    self.thursdayEditable(true);
                    self.fridayEditable(true);
                    self.saturdayEditable(true);
                    self.sundayEditable(true);
                }
                //return true;
            }
            self.InStickCalculation = ko.pureComputed(function() {
                return self.TargetWPP();
            }, self);
            self.InBoxCalculation = ko.pureComputed(function() {
                return self.TargetWPP() / self.StickPerBox();
            }, self);

            self.confirmSave = function(){
                if(!self.EditedTargetManual())
                    return;
                if(confirm("Save All Target Manual?")){
                    self.saveData();
                }else{
                    self.search();
                    self.EditedTargetManual(false);
                }
            }

            self.confirmCalculate = function(){
                if(!self.EditedCanculation())
                    return;
                if(confirm("Do you want Calculate?")){
                    self.calculateData();
                }else{
                    self.search();
                    self.EditedCanculation(false);
                }
            }
            //global value
            self.targetWPP = ko.observable();
            self.transLog = ko.observable();

            //excel
            self.filterExcelLocationCode = self.filterLocationCode();
            self.filterExcelBrandCode = self.filterBrandCode();
            self.filterExcelShift = self.filterShift();
            self.filterExcelKPSYear = self.filterKPSYear();
            self.filterExcelKPSWeek = self.filterKPSWeek();

            // State
            self.KPSWeekReady = ko.observable(false);

            //event on location dropdown change
            //self.onLocationCodeChange = function() {
            //    self.getLocationNameFilter();
            //    self.getBrandCodeList();
            //    self.getShiftList();
            //};

            self.onLocationCodeChange = function(cb) {
                if (self.firstLoad || self.isLoading()) return;
                
                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.getLocationNameFilter(cb);
                    },
                    function(cb) {
                        self.getBrandCodeList(cb);
                    },
                    function(cb) {
                        self.getShiftList(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
                
            };

            self.onKPSYearChange = function() {
                if (self.firstLoad || self.isLoading() || !self.KPSWeekReady()) return;
                
                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.getBrandCodeList(cb);
                    },
                    function(cb) {
                        self.setDateRange(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
            }

            self.onKPSWeekChange = function()
            {
                if (self.firstLoad || self.isLoading() || !self.KPSWeekReady()) return;
                
                self.isLoading(true);

                async.series([
                    function(cb) {
                        self.getBrandCodeList(cb);
                    },
                    function(cb) {
                        self.setDateRange(cb);
                    }
                ], function() {
                    self.isLoading(false);
                });
            }

            self.onFilterConversionChange = function() {
                var currentConversion = $('#ddlFilterConversion').val();
                if(currentConversion == 'STICK') {
                    self.targetLabel('(stick/d)');
                }else{
                    self.targetLabel('(box/d)');
                }
            }

            //get location name by location code
            //self.getLocationNameFilter = function() {
            //    for (var i = 0; i < self.itemLocations.length; i++) {
            //        if (self.itemLocations[i].LocationCode == self.filterLocationCode()) {
            //            self.filterLocationName(self.itemLocations[i].LocationName);
            //            break;
            //        }
            //    }
            //};

            self.getLocationNameFilter = function(cb) {
                self.ListLocation().map(function(v) {
                    if (typeof v.LocationCode !== 'undefined' && v.LocationCode == self.filterLocationCode()) {
                        self.filterLocationName(v.LocationName);
                        
                        if (typeof cb == 'function') cb();
                    }
                });
            };

            // set edit flag to true on change event
            self.EditedRow = function(event) {
                self.EditedTargetManual(true);
                self.saveEnabled(true);
                event.Message('true');
            };

            //self.EditedWorkUnitHour = function(event, value)
            //{
            //    if (value() > self.maximumWorkHour())
            //        value(self.maximumWorkHour());
            //    else if (value() < 0)
            //        value(0);

            //    self.ButtonCalculate(true);
            //    self.EditedCanculation(true);
            //    self.saveEnabled(false);
            //    self.submitEnabled(false);
            //    event.Message('true');
            //}

            self.EditedWorkUnitHour = function(event, value, unit, day)
            {
                if (value() > self.maximumWorkHour())
                    value(self.maximumWorkHour());
                else if (value() < 0)
                    value(0);
               
                var monday = [];
                var tuesday = [];
                var wednesday = [];
                var thursday = [];
                var friday = [];
                var saturday = [];
                var sunday = [];
                $.each(self.gridView.listDataItems(), function(i, item) {
                    monday[item.ProcessWorkHours1()] = (monday[item.ProcessWorkHours1()] || 0)+1;
                    tuesday[item.ProcessWorkHours2()] = (tuesday[item.ProcessWorkHours2()] || 0)+1;
                    wednesday[item.ProcessWorkHours3()] = (wednesday[item.ProcessWorkHours3()] || 0)+1;
                    thursday[item.ProcessWorkHours4()] = (thursday[item.ProcessWorkHours4()] || 0)+1;
                    friday[item.ProcessWorkHours5()] = (friday[item.ProcessWorkHours5()] || 0)+1;
                    saturday[item.ProcessWorkHours6()] = (saturday[item.ProcessWorkHours6()] || 0)+1;
                    sunday[item.ProcessWorkHours7()] = (sunday[item.ProcessWorkHours7()] || 0)+1;
                    if(item.UnitCode() == unit())
                    {
                        switch(day)
                        {
                            case 1:
                                item.ProcessWorkHours1(value());
                                break;
                            case 2:
                                item.ProcessWorkHours2(value());
                                break;
                            case 3:
                                item.ProcessWorkHours3(value());
                                break;
                            case 4:
                                item.ProcessWorkHours4(value());
                                break;
                            case 5:
                                item.ProcessWorkHours5(value());
                                break;
                            case 6:
                                item.ProcessWorkHours6(value());
                                break;
                            case 7:
                                item.ProcessWorkHours7(value());
                                break;
                        }
                    }
                        
                });

                var max_monday = getMaxKeyOfArray(monday);
                monday.forEach(function(i,v) {
                    if(i == max_monday) {
                        self.largestStandardHourMon.Value(v);
                    }
                    
                });

                var max_tuesday = getMaxKeyOfArray(tuesday);
                tuesday.forEach(function(i,v) {
                    if(i == max_tuesday) {
                        self.largestStandardHourTue.Value(v);
                    }
                    
                });

                var max_wednesday = getMaxKeyOfArray(wednesday);
                wednesday.forEach(function(i,v) {
                    if(i == max_wednesday) {
                        self.largestStandardHourWed.Value(v);
                    }
                    
                });

                var max_thursday = getMaxKeyOfArray(thursday);
                thursday.forEach(function(i,v) {
                    if(i == max_thursday) {
                        self.largestStandardHourThu.Value(v);
                    }
                    
                });

                var max_friday = getMaxKeyOfArray(friday);
                friday.forEach(function(i,v) {
                    if(i == max_friday) {
                        self.largestStandardHourFri.Value(v);
                    }
                    
                });

                var max_saturday = getMaxKeyOfArray(saturday);
                saturday.forEach(function(i,v) {
                    if(i == max_saturday) {
                        self.largestStandardHourSat.Value(v);
                    }
                    
                });

                var max_sunday = getMaxKeyOfArray(sunday);
                sunday.forEach(function(i,v) {
                    if(i == max_sunday) {
                        self.largestStandardHourSun.Value(v);
                    }
                    
                });
                $.each(self.historyGridView.listDataItems(), function(i, item) {
                    if(item.action() == 'Submit'){
                        self.isAlreadySubmitted(true);
                    }
                });
                if(self.isAlreadySubmitted()){
                    self.filterCurrenDayEnabled(true);
                    self.isFilterCurrentDayForward(true);
                }
                self.ButtonCalculate(true);
                self.EditedCanculation(true);
                self.saveEnabled(false);
                self.submitEnabled(false);
                event.Message('true');
            }
            
            self.EditedRowCalculate = function(event, value) {
                $.each(self.historyGridView.listDataItems(), function(i, item) {
                    if(item.action() == 'Submit'){
                        self.isAlreadySubmitted(true);
                    }
                });
                if(self.isAlreadySubmitted()){
                    self.filterCurrenDayEnabled(true);
                    self.isFilterCurrentDayForward(true);
                }
                self.EditedCanculation(true);
                self.ButtonCalculate(true)
                self.saveEnabled(false);
                self.submitEnabled(false);
                event.Message('true');
            };
            self.EditedHeaderCalculate = function(event) {
                $.each(self.historyGridView.listDataItems(), function(i, item) {
                    if(item.action() == 'Submit'){
                        self.isAlreadySubmitted(true);
                    }
                });
                if(self.isAlreadySubmitted()){
                    self.filterCurrenDayEnabled(true);
                    self.isFilterCurrentDayForward(true);
                }
                self.EditedCanculation(true);
                self.ButtonCalculate(true);
                self.saveEnabled(false);
                self.submitEnabled(false);
            };

            

            //get Stick PerBox By Brand COde
            self.getStickPerBox = function() {
                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/GetStickPerBox"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { brandCode: self.filterBrandCode() },
                    dataType: 'json',
                    success: function(data) {
                        self.StickPerBox(data);
                    }
                });
            };

            //calculate bobot all unit per week
            function getBobotAllUnitPerWeek() {
                var total = 0;
                ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                    var bobotPerUnitMon = ko.isObservable(item.bobotPerUnit1) ? item.bobotPerUnit1() : item.bobotPerUnit1;
                    var bobotPerUnitTue = ko.isObservable(item.bobotPerUnit2) ? item.bobotPerUnit2() : item.bobotPerUnit2;
                    var bobotPerUnitWed = ko.isObservable(item.bobotPerUnit3) ? item.bobotPerUnit3() : item.bobotPerUnit3;
                    var bobotPerUnitThu = ko.isObservable(item.bobotPerUnit4) ? item.bobotPerUnit4() : item.bobotPerUnit4;
                    var bobotPerUnitFri = ko.isObservable(item.bobotPerUnit5) ? item.bobotPerUnit5() : item.bobotPerUnit5;
                    var bobotPerUnitSat = ko.isObservable(item.bobotPerUnit6) ? item.bobotPerUnit6() : item.bobotPerUnit6;
                    var bobotPerUnitSun = ko.isObservable(item.bobotPerUnit7) ? item.bobotPerUnit7() : item.bobotPerUnit7;
                    var bobotPerUnit = parseToFloat(bobotPerUnitMon) + parseToFloat(bobotPerUnitTue) + parseToFloat(bobotPerUnitWed)
                        + parseToFloat(bobotPerUnitThu) + parseToFloat(bobotPerUnitFri) + parseToFloat(bobotPerUnitSat) + parseToFloat(bobotPerUnitSun);
                    if (!isNaN(bobotPerUnit)) {
                        total += bobotPerUnit;
                    }
                });
                return total.toFixed(2);
            };

            //calculate historical capacity group
            function getHistoricalCapacityGroup(workerAlocation, capacityWorker) {
                var result = parseToFloat(workerAlocation) * parseToFloat(capacityWorker);
                return result;
            };

            //calculate total target
            function getComputedTargetValue(fieldName) {
                return ko.computed({
                    read: function() {
                        var total = 0;
                        ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                            var field = ko.isObservable(item[fieldName]) ? item[fieldName]() : item[fieldName];
                            var value = parseFloat(field);
                            if (!isNaN(value)) {
                                total += value;
                            }
                        });
                        //return Math.round(parseToFloat(total),3);
                        return total;
                    },
                    write: function(value) {
                        //alert(value);
                    }
                });
            };

            function setTarget() {
                return;
                ko.utils.arrayForEach(self.gridView.listDataItems(), function(x) {
                    // prevent division by zero resulting NaN
                    var calculatedSystem1 = 0;
                    var calculatedSystem2 = 0;
                    var calculatedSystem3 = 0;
                    var calculatedSystem4 = 0;
                    var calculatedSystem5 = 0;
                    var calculatedSystem6 = 0;
                    var calculatedSystem7 = 0;

                    var bobotAllUnitInOneWeek = getBobotAllUnitPerWeek();
                    if (bobotAllUnitInOneWeek > 0) {
                        calculatedSystem1 = (parseToFloat(x.bobotPerUnit1()) / parseToFloat(bobotAllUnitInOneWeek)) * parseToFloat(x.Value1());
                        calculatedSystem2 = (parseToFloat(x.bobotPerUnit2()) / parseToFloat(bobotAllUnitInOneWeek)) * parseToFloat(x.Value1());
                        calculatedSystem3 = (parseToFloat(x.bobotPerUnit3()) / parseToFloat(bobotAllUnitInOneWeek)) * parseToFloat(x.Value1());
                        calculatedSystem4 = (parseToFloat(x.bobotPerUnit4()) / parseToFloat(bobotAllUnitInOneWeek)) * parseToFloat(x.Value1());
                        calculatedSystem5 = (parseToFloat(x.bobotPerUnit5()) / parseToFloat(bobotAllUnitInOneWeek)) * parseToFloat(x.Value1());
                        calculatedSystem6 = (parseToFloat(x.bobotPerUnit6()) / parseToFloat(bobotAllUnitInOneWeek)) * parseToFloat(x.Value1());
                        calculatedSystem7 = (parseToFloat(x.bobotPerUnit7()) / parseToFloat(bobotAllUnitInOneWeek)) * parseToFloat(x.Value1());
                    }
                    x.TargetSystem1(calculatedSystem1);
                    x.TargetManual1(calculatedSystem1);
                    x.TargetSystem2(calculatedSystem2);
                    x.TargetManual2(calculatedSystem2);
                    x.TargetSystem3(calculatedSystem3);
                    x.TargetManual3(calculatedSystem3);
                    x.TargetSystem4(calculatedSystem4);
                    x.TargetManual4(calculatedSystem4);
                    x.TargetSystem5(calculatedSystem5);
                    x.TargetManual5(calculatedSystem5);
                    x.TargetSystem6(calculatedSystem6);
                    x.TargetManual6(calculatedSystem6);
                    x.TargetSystem7(calculatedSystem7);
                    x.TargetManual7(calculatedSystem7);
                });
            };

            function recalculateAllTarget() {
                return;
                var oldTotalTarget = self.totalTargetSystem();
                var newTotalTarget = self.totalTargetManual();
                ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                    var newTarget1Value = (parseToFloat(item.TargetManual1()) / newTotalTarget) * oldTotalTarget;
                    var newTarget2Value = (parseToFloat(item.TargetManual2()) / newTotalTarget) * oldTotalTarget;
                    var newTarget3Value = (parseToFloat(item.TargetManual3()) / newTotalTarget) * oldTotalTarget;
                    var newTarget4Value = (parseToFloat(item.TargetManual4()) / newTotalTarget) * oldTotalTarget;
                    var newTarget5Value = (parseToFloat(item.TargetManual5()) / newTotalTarget) * oldTotalTarget;
                    var newTarget6Value = (parseToFloat(item.TargetManual6()) / newTotalTarget) * oldTotalTarget;
                    var newTarget7Value = (parseToFloat(item.TargetManual7()) / newTotalTarget) * oldTotalTarget;

                    item.TargetSystem1(newTarget1Value);
                    item.TargetSystem2(newTarget2Value);
                    item.TargetSystem3(newTarget3Value);
                    item.TargetSystem4(newTarget4Value);
                    item.TargetSystem5(newTarget5Value);
                    item.TargetSystem6(newTarget6Value);
                    item.TargetSystem7(newTarget7Value);

                    item.TargetManual1(newTarget1Value);
                    item.TargetManual2(newTarget2Value);
                    item.TargetManual3(newTarget3Value);
                    item.TargetManual4(newTarget4Value);
                    item.TargetManual5(newTarget5Value);
                    item.TargetManual6(newTarget6Value);
                    item.TargetManual7(newTarget7Value);
                });
            }

            function planTPU(data) {
                ko.mapping.fromJS(data, {}, this);

                //data
                var targetsystem1Value = ko.isObservable(data.TargetSystem1) ? data.TargetSystem1() : data.TargetSystem1;
                var targetsystem2Value = ko.isObservable(data.TargetSystem2) ? data.TargetSystem2() : data.TargetSystem2;
                var targetsystem3Value = ko.isObservable(data.TargetSystem3) ? data.TargetSystem3() : data.TargetSystem3;
                var targetsystem4Value = ko.isObservable(data.TargetSystem4) ? data.TargetSystem4() : data.TargetSystem4;
                var targetsystem5Value = ko.isObservable(data.TargetSystem5) ? data.TargetSystem5() : data.TargetSystem5;
                var targetsystem6Value = ko.isObservable(data.TargetSystem6) ? data.TargetSystem6() : data.TargetSystem6;
                var targetsystem7Value = ko.isObservable(data.TargetSystem7) ? data.TargetSystem7() : data.TargetSystem7;

                var targetmanual1Value = ko.isObservable(data.TargetManual1) ? data.TargetManual1() : data.TargetManual1;
                var targetmanual2Value = ko.isObservable(data.TargetManual2) ? data.TargetManual2() : data.TargetManual2;
                var targetmanual3Value = ko.isObservable(data.TargetManual3) ? data.TargetManual3() : data.TargetManual3;
                var targetmanual4Value = ko.isObservable(data.TargetManual4) ? data.TargetManual4() : data.TargetManual4;
                var targetmanual5Value = ko.isObservable(data.TargetManual5) ? data.TargetManual5() : data.TargetManual5;
                var targetmanual6Value = ko.isObservable(data.TargetManual6) ? data.TargetManual6() : data.TargetManual6;
                var targetmanual7Value = ko.isObservable(data.TargetManual7) ? data.TargetManual7() : data.TargetManual7;

                var historicalCapacityWorker1Value = ko.isObservable(data.HistoricalCapacityWorker1) ? data.HistoricalCapacityWorker1() : data.HistoricalCapacityWorker1;
                var historicalCapacityWorker2Value = ko.isObservable(data.HistoricalCapacityWorker2) ? data.HistoricalCapacityWorker2() : data.HistoricalCapacityWorker2;
                var historicalCapacityWorker3Value = ko.isObservable(data.HistoricalCapacityWorker3) ? data.HistoricalCapacityWorker3() : data.HistoricalCapacityWorker3;
                var historicalCapacityWorker4Value = ko.isObservable(data.HistoricalCapacityWorker4) ? data.HistoricalCapacityWorker4() : data.HistoricalCapacityWorker4;
                var historicalCapacityWorker5Value = ko.isObservable(data.HistoricalCapacityWorker5) ? data.HistoricalCapacityWorker5() : data.HistoricalCapacityWorker5;
                var historicalCapacityWorker6Value = ko.isObservable(data.HistoricalCapacityWorker6) ? data.HistoricalCapacityWorker6() : data.HistoricalCapacityWorker6;
                var historicalCapacityWorker7Value = ko.isObservable(data.HistoricalCapacityWorker7) ? data.HistoricalCapacityWorker7() : data.HistoricalCapacityWorker7;

                var historicalCapacityGroup1Value = ko.isObservable(data.HistoricalCapacityGroup1) ? data.HistoricalCapacityGroup1() : data.HistoricalCapacityGroup1;
                var historicalCapacityGroup2Value = ko.isObservable(data.HistoricalCapacityGroup2) ? data.HistoricalCapacityGroup2() : data.HistoricalCapacityGroup2;
                var historicalCapacityGroup3Value = ko.isObservable(data.HistoricalCapacityGroup3) ? data.HistoricalCapacityGroup3() : data.HistoricalCapacityGroup3;
                var historicalCapacityGroup4Value = ko.isObservable(data.HistoricalCapacityGroup4) ? data.HistoricalCapacityGroup4() : data.HistoricalCapacityGroup4;
                var historicalCapacityGroup5Value = ko.isObservable(data.HistoricalCapacityGroup5) ? data.HistoricalCapacityGroup5() : data.HistoricalCapacityGroup5;
                var historicalCapacityGroup6Value = ko.isObservable(data.HistoricalCapacityGroup6) ? data.HistoricalCapacityGroup6() : data.HistoricalCapacityGroup6;
                var historicalCapacityGroup7Value = ko.isObservable(data.HistoricalCapacityGroup7) ? data.HistoricalCapacityGroup7() : data.HistoricalCapacityGroup7;

                //rounded value
                this.TargetSystem1 = ko.observable(targetsystem1Value).extend({ numeric: 3 });
                this.TargetSystem2 = ko.observable(targetsystem2Value).extend({ numeric: 3 });
                this.TargetSystem3 = ko.observable(targetsystem3Value).extend({ numeric: 3 });
                this.TargetSystem4 = ko.observable(targetsystem4Value).extend({ numeric: 3 });
                this.TargetSystem5 = ko.observable(targetsystem5Value).extend({ numeric: 3 });
                this.TargetSystem6 = ko.observable(targetsystem6Value).extend({ numeric: 3 });
                this.TargetSystem7 = ko.observable(targetsystem7Value).extend({ numeric: 3 });

                this.TargetManual1 = ko.observable(targetmanual1Value).extend({ numeric: 3 });
                this.TargetManual2 = ko.observable(targetmanual2Value).extend({ numeric: 3 });
                this.TargetManual3 = ko.observable(targetmanual3Value).extend({ numeric: 3 });
                this.TargetManual4 = ko.observable(targetmanual4Value).extend({ numeric: 3 });
                this.TargetManual5 = ko.observable(targetmanual5Value).extend({ numeric: 3 });
                this.TargetManual6 = ko.observable(targetmanual6Value).extend({ numeric: 3 });
                this.TargetManual7 = ko.observable(targetmanual7Value).extend({ numeric: 3 });

                //2 digit behind comma value
                this.HistoricalCapacityWorker1 = ko.observable(historicalCapacityWorker1Value).extend({ numeric: 2 });
                this.HistoricalCapacityWorker2 = ko.observable(historicalCapacityWorker2Value).extend({ numeric: 2 });
                this.HistoricalCapacityWorker3 = ko.observable(historicalCapacityWorker3Value).extend({ numeric: 2 });
                this.HistoricalCapacityWorker4 = ko.observable(historicalCapacityWorker4Value).extend({ numeric: 2 });
                this.HistoricalCapacityWorker5 = ko.observable(historicalCapacityWorker5Value).extend({ numeric: 2 });
                this.HistoricalCapacityWorker6 = ko.observable(historicalCapacityWorker6Value).extend({ numeric: 2 });
                this.HistoricalCapacityWorker7 = ko.observable(historicalCapacityWorker7Value).extend({ numeric: 2 });

                this.WorkerAlocationFirstLoad = ko.observable(this.WorkerAlocation());

                if (self.unitStatus)
                {
                    this.HistoricalCapacityGroup1 = ko.observable(historicalCapacityGroup1Value).extend({ numeric: 2 });
                    this.HistoricalCapacityGroup2 = ko.observable(historicalCapacityGroup2Value).extend({ numeric: 2 });
                    this.HistoricalCapacityGroup3 = ko.observable(historicalCapacityGroup3Value).extend({ numeric: 2 });
                    this.HistoricalCapacityGroup4 = ko.observable(historicalCapacityGroup4Value).extend({ numeric: 2 });
                    this.HistoricalCapacityGroup5 = ko.observable(historicalCapacityGroup5Value).extend({ numeric: 2 });
                    this.HistoricalCapacityGroup6 = ko.observable(historicalCapacityGroup6Value).extend({ numeric: 2 });
                    this.HistoricalCapacityGroup7 = ko.observable(historicalCapacityGroup7Value).extend({ numeric: 2 });

                }

                //calculate historical capacity group
                //this.HistoricalCapacityGroup1 = ko.observable(HistoricalCapacityGroup1Value).extend({ numeric: 2 });
                this.HistoricalCapacityGroup1 = ko.pureComputed({
                    read: function() {
                        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.WorkerAlocationFirstLoad(), this.HistoricalCapacityWorker1())).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this).extend({ numeric: 2 });

                this.HistoricalCapacityGroup2 = ko.pureComputed({
                    read: function() {
                        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.WorkerAlocationFirstLoad(), this.HistoricalCapacityWorker2())).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this).extend({ numeric: 2 });

                this.HistoricalCapacityGroup3 = ko.pureComputed({
                    read: function() {
                        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.WorkerAlocationFirstLoad(), this.HistoricalCapacityWorker3())).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this).extend({ numeric: 2 });

                this.HistoricalCapacityGroup4 = ko.pureComputed({
                    read: function() {
                        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.WorkerAlocationFirstLoad(), this.HistoricalCapacityWorker4())).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this).extend({ numeric: 2 });

                this.HistoricalCapacityGroup5 = ko.pureComputed({
                    read: function() {
                        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.WorkerAlocationFirstLoad(), this.HistoricalCapacityWorker5())).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this).extend({ numeric: 2 });

                this.HistoricalCapacityGroup6 = ko.pureComputed({
                    read: function() {
                        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.WorkerAlocationFirstLoad(), this.HistoricalCapacityWorker6())).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this).extend({ numeric: 2 });

                this.HistoricalCapacityGroup7 = ko.pureComputed({
                    read: function() {
                        var formattedResult = ko.observable(getHistoricalCapacityGroup(this.WorkerAlocationFirstLoad(), this.HistoricalCapacityWorker7())).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this).extend({ numeric: 2 });

                //calculate bobot per unit
                this.bobotPerUnit1 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup1()) * parseToFloat(this.PercentAttendance1()) * parseToFloat(this.ProcessWorkHours1());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerUnit2 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup2()) * parseToFloat(this.PercentAttendance2()) * parseToFloat(this.ProcessWorkHours2());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();

                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerUnit3 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup3()) * parseToFloat(this.PercentAttendance3()) * parseToFloat(this.ProcessWorkHours3());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerUnit4 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup4()) * parseToFloat(this.PercentAttendance4()) * parseToFloat(this.ProcessWorkHours4());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerUnit5 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup5()) * parseToFloat(this.PercentAttendance5()) * parseToFloat(this.ProcessWorkHours5());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerUnit6 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup6()) * parseToFloat(this.PercentAttendance6()) * parseToFloat(this.ProcessWorkHours6());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                this.bobotPerUnit7 = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.HistoricalCapacityGroup7()) * parseToFloat(this.PercentAttendance7()) * parseToFloat(this.ProcessWorkHours7());
                        var formattedResult = ko.observable(result).extend({ numeric: 2 });
                        return formattedResult();
                    },
                    write: function(value) {

                    }
                }, this);

                //Allocation
                this.Allocation = ko.computed({
                    read: function() {
                        return this.WorkerAlocation();
                    },
                    write: function(value) {
                        this.WorkerAlocation(parseToFloat(value));
                        if (value != '') {
                            setTarget();
                        }
                        return value;
                    }
                }, this);

                //Work hours
                this.ProcessWorkHoursMon = ko.computed({
                    read: function() {
                        return this.ProcessWorkHours1();
                    },
                    write: function(value) {
                        this.ProcessWorkHours1(parseToFloat(value));
                        if (value != '') {
                            setTarget();
                        }
                        return value;
                    }
                }, this);

                this.ProcessWorkHoursTue = ko.computed({
                    read: function() {
                        return this.ProcessWorkHours2();
                    },
                    write: function(value) {
                        this.ProcessWorkHours2(parseToFloat(value));
                        if (value != '') {
                            setTarget();
                        }
                        return value;
                    }
                }, this);

                this.ProcessWorkHoursWed = ko.computed({
                    read: function() {
                        return this.ProcessWorkHours3();
                    },
                    write: function(value) {
                        this.ProcessWorkHours3(parseToFloat(value));
                        if (value != '') {
                            setTarget();
                        }
                        return value;
                    }
                }, this);

                this.ProcessWorkHoursThu = ko.computed({
                    read: function() {
                        return this.ProcessWorkHours4();
                    },
                    write: function(value) {
                        this.ProcessWorkHours4(parseToFloat(value));
                        if (value != '') {
                            setTarget();
                        }
                        return value;
                    }
                }, this);

                this.ProcessWorkHoursFri = ko.computed({
                    read: function() {
                        return this.ProcessWorkHours5();
                    },
                    write: function(value) {
                        this.ProcessWorkHours5(parseToFloat(value));
                        if (value != '') {
                            setTarget();
                        }
                        return value;
                    }
                }, this);

                this.ProcessWorkHoursSat = ko.computed({
                    read: function() {
                        return this.ProcessWorkHours6();
                    },
                    write: function(value) {
                        this.ProcessWorkHours6(parseToFloat(value));
                        if (value != '') {
                            setTarget();
                        }
                        return value;
                    }
                }, this);

                this.ProcessWorkHoursSun = ko.computed({
                    read: function() {
                        return this.ProcessWorkHours7();
                    },
                    write: function(value) {
                        this.ProcessWorkHours7(parseToFloat(value));
                        if (value != '') {
                            setTarget();
                        }
                        return value;
                    }
                }, this);

                //target manual
                this.TargetManualMon = ko.computed({
                    read: function() {
                        return this.TargetManual1();
                    },
                    write: function(value) {
                        this.TargetManual1(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualTue = ko.computed({
                    read: function() {
                        return this.TargetManual2();
                    },
                    write: function(value) {
                        this.TargetManual2(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualWed = ko.computed({
                    read: function() {
                        return this.TargetManual3();
                    },
                    write: function(value) {
                        this.TargetManual3(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualThu = ko.computed({
                    read: function() {
                        return this.TargetManual4();
                    },
                    write: function(value) {
                        this.TargetManual4(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualFri = ko.computed({
                    read: function() {
                        return this.TargetManual5();
                    },
                    write: function(value) {
                        this.TargetManual5(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualSat = ko.computed({
                    read: function() {
                        return this.TargetManual6();
                    },
                    write: function(value) {
                        this.TargetManual6(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                this.TargetManualSun = ko.computed({
                    read: function() {
                        return this.TargetManual7();
                    },
                    write: function(value) {
                        this.TargetManual7(parseToFloat(value));
                        if (value != '') {
                            recalculateAllTarget();
                        }
                        return value;
                    }
                }, this);

                //calculate total target system
                this.TotalTargetSystem = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.TargetSystem1()) + parseToFloat(this.TargetSystem2())
                            + parseToFloat(this.TargetSystem3()) + parseToFloat(this.TargetSystem4())
                            + parseToFloat(this.TargetSystem5()) + parseToFloat(this.TargetSystem6())
                            + parseToFloat(this.TargetSystem7());
                        return result;
                    },
                    write: function(value) {
                        // alert(value);
                    }
                }, this);
                //calculate total target manual
                this.TotalTargetManual = ko.pureComputed({
                    read: function() {
                        var result = parseToFloat(this.TargetManual1()) + parseToFloat(this.TargetManual2())
                            + parseToFloat(this.TargetManual3()) + parseToFloat(this.TargetManual4())
                            + parseToFloat(this.TargetManual5()) + parseToFloat(this.TargetManual6())
                            + parseToFloat(this.TargetManual7());
                        return result;
                    },
                    write: function(value) {
                        // alert(value);
                    }
                }, this);
            };

            //get largest standard hour
            function getLargestStandardHour(fieldName) {
                return ko.computed({
                    read: function() {
                        var result = 0;
                        if (self.gridView.listDataItems().length > 0) {
                            result = Math.max.apply(Math, self.gridView.listDataItems().map(function(item) {
                                return ko.isObservable(item[fieldName]) ? item[fieldName]() : item[fieldName];
                            }));

                            if (result > self.maximumWorkHour())
                                result = self.maximumWorkHour();
                            else if (result < 0)
                                result = 0;
                        }
                        return result;
                    },
                    write: function(value) {
                        value = value > self.maximumWorkHour() ? self.maximumWorkHour() : value;

                        ko.utils.arrayForEach(self.gridView.listDataItems(), function(item) {
                            item[fieldName](value);
                        });
                    }
                });
            };

            function getLargestUWH(fieldName) {
                var b = 0;
                var day = [];
                Math.max.apply(Math, self.gridView.listDataItems().map(function(item) {
                    var a = ko.isObservable(item[fieldName]) ? item[fieldName]() : item[fieldName];
                    day[a] = (day[a] || 0)+1; 
                }));
                //return Math.max.apply(Math, self.gridView.listDataItems().map(function(item) {
                //    var a = ko.isObservable(item[fieldName]) ? item[fieldName]() : item[fieldName];
                //    day[a] = (day[a] || 0)+1; 
                //    console.log(fieldName + " " + b);
                //    //return ko.isObservable(item[fieldName]) ? item[fieldName]() : item[fieldName];
                //}));
                var max_day = getMaxKeyOfArray(day);

                var a = 0;

                day.forEach(function(i,v) {
                    if(i == max_day) {
                        a = v;
                    }
                    
                });

                return a;
            };

            // Gridview Initialization
            self.gridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "UpdatedDate",
                    SortOrder: "DESC",
                    LocationCode: self.filterLocationCode,
                    BrandCode: self.filterBrandCode,
                    Shift: self.filterShift,
                    KPSYear: self.filterKPSYear,
                    KPSWeek: self.filterKPSWeek,
                    Conversion: self.filterConversion
                },
                DataSourceUrl: @Html.BaseUrl("PlanningPlantTPU/GetPlanTPUs"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 0
            });

            //custom mapping knockout
            self.gridView.mapping = {
                create: function(options) {
                    return new planTPU(options.data);
                }
            };

            // Field Validations
            self.gridView.applyValidationRules = function(entity) {
                //Remove notification that existing before
                self.RemoveNotification();

            };

            // Computed TargetSystem
            self.totalTargetSystemMon = getComputedTargetValue('TargetSystem1');
            self.totalTargetSystemTue = getComputedTargetValue('TargetSystem2');
            self.totalTargetSystemWed = getComputedTargetValue('TargetSystem3');
            self.totalTargetSystemThu = getComputedTargetValue('TargetSystem4');
            self.totalTargetSystemFri = getComputedTargetValue('TargetSystem5');
            self.totalTargetSystemSat = getComputedTargetValue('TargetSystem6');
            self.totalTargetSystemSun = getComputedTargetValue('TargetSystem7');
            self.totalTargetSystem = getComputedTargetValue('TotalTargetSystem');

            // Computed TargetManual
            self.totalTargetManualMon = getComputedTargetValue('TargetManual1');
            self.totalTargetManualTue = getComputedTargetValue('TargetManual2');
            self.totalTargetManualWed = getComputedTargetValue('TargetManual3');
            self.totalTargetManualThu = getComputedTargetValue('TargetManual4');
            self.totalTargetManualFri = getComputedTargetValue('TargetManual5');
            self.totalTargetManualSat = getComputedTargetValue('TargetManual6');
            self.totalTargetManualSun = getComputedTargetValue('TargetManual7');
            self.totalTargetManual = getComputedTargetValue('TotalTargetManual');

            function UWH(val, deps)
            {
                this.Value = ko.observable(val);
                this.Deps = ko.observable(deps);

                var $self = this;

                //this.Value.subscribe(function(val) {
                //    self.gridView.listDataItems().map(function(item) {
                //        item[$self.Deps()](val);
                //    });
                //});
            }

            self.onUWHChange = function onUWHChange(uwh)
            {
                var value = uwh.Value();

                if (value > self.maximumWorkHour())
                    value = self.maximumWorkHour();
                else if (value < 0 || isNaN(value))
                    value = 0;

                // Re-enable button calculate
                self.ButtonCalculate(true);
                self.saveEnabled(false);
                //hakim
                $.each(self.historyGridView.listDataItems(), function(i, item) {
                    if(item.action() == 'Submit'){
                        self.isAlreadySubmitted(true);
                    }
                });
                if(self.ButtonCalculate() && self.isAlreadySubmitted()){
                    self.filterCurrenDayEnabled(true);
                    self.isFilterCurrentDayForward(true);
                }
                self.gridView.listDataItems().map(function(item) {
                    item[uwh.Deps()](value);
                });

                uwh.Value(value);
            }

            // Computed Largest StandardHOurs
            self.largestStandardHourMon = new UWH(0, "ProcessWorkHoursMon");
            self.largestStandardHourTue = new UWH(0, "ProcessWorkHoursTue");
            self.largestStandardHourWed = new UWH(0, "ProcessWorkHoursWed");
            self.largestStandardHourThu = new UWH(0, "ProcessWorkHoursThu");
            self.largestStandardHourFri = new UWH(0, "ProcessWorkHoursFri");
            self.largestStandardHourSat = new UWH(0, "ProcessWorkHoursSat");
            self.largestStandardHourSun = new UWH(0, "ProcessWorkHoursSun");

            self.totalLargestStandardHour = ko.computed(function() {
                var totalWH = Number(self.largestStandardHourMon.Value()) + Number(self.largestStandardHourTue.Value()) + Number(self.largestStandardHourWed.Value())
                    + Number(self.largestStandardHourThu.Value()) + Number(self.largestStandardHourFri.Value()) + Number(self.largestStandardHourSat.Value())
                    + Number(self.largestStandardHourSun.Value());

                return totalWH;
            });

            //get production date header
            function getProductionDate(days) {
                return ko.computed(function() {
                    if (self.mondayDate() != null) {
                        var firstDay = moment(self.mondayDate(), "DD/MM/YYYY");
                        var productionDateText = moment(firstDay).add(days, 'days').format("DD/MM/YYYY");

                        return productionDateText;
                    }
                    return '';
                });
            };

            // Computed production date on header
            self.mondayDate = ko.observable();
            self.tuesdayDate = getProductionDate(1);
            self.wednesdayDate = getProductionDate(2);
            self.thursdayDate = getProductionDate(3);
            self.fridayDate = getProductionDate(4);
            self.saturdayDate = getProductionDate(5);
            self.sundayDate = getProductionDate(6);


            // Computed Days Disabled
            self.mondayEditable = ko.observable(false);
            self.tuesdayEditable = ko.observable(false);
            self.wednesdayEditable = ko.observable(false);
            self.thursdayEditable = ko.observable(false);
            self.fridayEditable = ko.observable(false);
            self.saturdayEditable = ko.observable(false);
            self.sundayEditable = ko.observable(false);


            self.DisableDays = function(firstDay,days){
                if (!self.submitEnabled())
                {
                    var today = moment(); // Force for date only, extend 1 day for minimal editable day
                    var productionDate = moment(firstDay).add(days + 1, 'days');
                    var EditableDate = today.diff(productionDate) <= 0 ? true : false;
                }
                else {
                    var EditableDate = true;
                }


                // Check for Disable Day
                // No checking condition for monday, because the minimal locked date is : current day + 1 day
                switch(days){
                    case 0:
                        // tuesday
                        self.mondayEditable(EditableDate);
                        break;
                    case 1:
                        // tuesday
                        self.tuesdayEditable(EditableDate);
                        break;
                    case 2:
                        // wednesday
                        self.wednesdayEditable(EditableDate);
                        break;
                    case 3:
                        // thursday
                        self.thursdayEditable(EditableDate);
                        break;
                    case 4:
                        // friday
                        self.fridayEditable(EditableDate);
                        break;
                    case 5:
                        // saturday
                        self.saturdayEditable(EditableDate);
                        break;
                    case 6:
                        // sunday
                        self.sundayEditable(EditableDate);
                        break;
                }
                // End of Check
            }

            // Generate excel
            self.generateExcel = function(formElement) {
                $(formElement).find("input[name=locationCode]").val(self.filterExcelLocationCode);
                $(formElement).find("input[name=brandCode]").val(self.filterExcelBrandCode);
                $(formElement).find("input[name=shift]").val(self.filterExcelShift);
                $(formElement).find("input[name=year]").val(self.filterExcelKPSYear);
                $(formElement).find("input[name=week]").val(self.filterExcelKPSWeek);
                $(formElement).find("input[name=conversion]").val(self.filterExcelConversion);
                return true;
            };

            self.getTargetWPP = function() {

                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/GetTargetWPP"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { locationCode: self.filterLocationCode(), brandCode: self.filterBrandCode(), year: self.filterKPSYear(), week: self.filterKPSWeek() },
                    dataType: 'json',
                    success: function(data) {
                        self.TargetWPP(data);
                    }
                });

            };

            self.gridView.applyValidationRules = function(entity) {

                self.RemoveNotification();

                //entity.WorkerAlocation.extend({
                //    max: {
                //        params: entity.WorkerAvailable,
                //        message: "<strong>Allocation</strong> value must be smaller or equal than Worker Available!"
                //    }
                //});
            };

            var currentDate = new Date()
            var day = currentDate.getDate()
            var month = currentDate.getMonth() + 1
            var year = currentDate.getFullYear()
            self.SavedButton =  function() {
                //hakim
                // based on ticket http://tp.voxteneo.co.id/entity/10760 point 1 & 2
                //TPU/ID21/FA010783.18/2016/41/1
                var param1 = 'EBL/' + self.filterLocationCode() + '/1/'; 
                var param2 = self.filterBrandCode() + '/' + self.filterKPSYear() + '/' + self.filterKPSWeek() +'/';
                //var param1 = "TPU/" + self.filterLocationCode() +'/'+self.filterBrandCode()+'/'+ self.filterKPSYear() + '/' + self.filterKPSWeek();
                
                var valid = false;
                if((week(year, month, day)-1) <= self.filterKPSWeek()){
                    valid = true;
                }
                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/ValidateSubmittedEntry"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ 'param1': param1,'param2':param2}),
                    dataType: 'json',
                    success: function(data) {
                        console.log(data.isAlreadySubmitted +' / '+valid);
                        if((!data.isAlreadySubmitted) && (valid == true)){
                            self.submitEnabled(true);
                        }else{
                            self.submitEnabled(false);
                            //SKTIS.Helper.Notification(data.notification.Message);
                            SKTIS.Helper.Notification(data.notification.Message);
                        }
                    }
                });
            }

            function week(year,month,day) {
                function serial(days) { return 86400000*days; }
                function dateserial(year,month,day) { return (new Date(year,month-1,day).valueOf()); }
                function weekday(date) { return (new Date(date)).getDay()+1; }
                function yearserial(date) { return (new Date(date)).getFullYear(); }
                var date = year instanceof Date ? year.valueOf() : typeof year === "string" ? new Date(year).valueOf() : dateserial(year,month,day),
                    date2 = dateserial(yearserial(date - serial(weekday(date-serial(1))) + serial(4)),1,3);
                return ~~((date - date2 + serial(weekday(date2) + 5))/ serial(7));
            }

            // Save Action
            self.saveData = function() {
                self.RemoveNotification();
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                if (ko.utils.unwrapObservable(self.ButtonCalculate) !== false)
                {
                    SKTIS.Helper.Notification("Please click Calculate button before saving data.");
                    return;
                }

                //if (self.gridView.listEditItems().length < 1)
                //    return;

                var target = self.TargetWPP();
                self.ButtonCalculate(false);
                if (self.filterConversion() == 'STICK'){
                    target = self.TargetWPP() * self.StickPerBox();
                }
                if (target < self.totalTargetManual()) {
                    SKTIS.Helper.Notification('Total target manual (' + self.totalTargetManual() + ') cannot be larger than target wpp (' + target + ')!', 'warning');
                    return;
                }
                // Prevent Edited new Row data for triggering Edited message
                // Primary Key : ListGroup, ListDetail (need to compare both of arrays using unique key[s])
                //var newItemLength = self.gridView.listNewItems().length;
                //$.each(self.gridView.listNewItems(),function(k,v){
                //    var shouldBeAsNew = ko.utils.arrayFirst(self.gridView.listEditItems(),function(editItem){
                //        if(editItem){
                //            return editItem['ItemCode'] == v['ItemCode'];
                //        }
                //    });
                //    if(shouldBeAsNew){
                //        self.gridView.listNewItems()[k] = shouldBeAsNew;
                //    }
                //    self.gridView.listEditItems.remove(function(data) {
                //        if(data){
                //            return data['ItemCode'] == v['ItemCode'];
                //        }
                //    });
                //});

                var datas = {
                    "Parameters": {
                        "LocationCode": self.filterLocationCode(),
                        'BrandCode': self.filterBrandCode(),
                        'KPSYear': self.filterKPSYear(),
                        'KPSWeek': self.filterKPSWeek(),
                        'Shift': self.filterShift(),
                        'Conversion': self.filterConversion()
                    },
                    "edit": ko.mapping.toJS(self.gridView.listDataItems())
                };
                //return;
                datas = JSON.stringify(datas);

                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/SaveAllPlanTPUs"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        var dataChange = false;
                        if (data.Edit) {
                            $.each(data.Edit, function(k, value) {
                                if (value.ResponseType != null) {
                                    dataChange = true;
                                    //self.gridView.listDataItems()[k].Message('');
                                    SKTIS.Helper.ResponseNotification(value, "Edit TPU",
                                        value.LocationCode + " - " + value.UnitCode);
                                }
                            });
                        }
                        if(!self.EditedTargetManual()){
                            self.saveEnabled(false);
                            self.submitEnabled(true);
                            //self.SavedButton();
                            console.log('1');
                        }else{
                            console.log('2');
                            self.saveEnabled(false);
                            self.submitEnabled(true);
                            self.EditedTargetManual(false);
                            //self.SavedButton();
                        }
                        //if (!dataChange) {
                        //    SKTIS.Helper.Notification("No data has edited!");
                        //} else {
                        //    self.search();
                        //}
                        self.search();
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();

                    }
                });
            };

            //Submit data
            self.submitData = function() {
                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/SubmitData"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ 'year': self.filterKPSYear(), 'week': self.filterKPSWeek(), 'locationCode': self.filterLocationCode(), 'brandCode': self.filterBrandCode(), 'shift': self.filterShift() }),
                    dataType: 'json',
                    success: function(data) {
                        if(data.length > 1){
                            SKTIS.Helper.Notification(data[0]);
                            SKTIS.Helper.Notification(data[1], 'error');
                        }else{
                            SKTIS.Helper.Notification(data[0]);
                        }

                        self.submitEnabled(false);
                        self.saveEnabled(false);
                        self.UWHEnabled(false);

                        self.getTransactionLog(function(data) {
                            self.mondayEditable(data.Dates[0].IsActive);
                            self.tuesdayEditable(data.Dates[1].IsActive);
                            self.wednesdayEditable(data.Dates[2].IsActive);
                            self.thursdayEditable(data.Dates[3].IsActive);
                            self.fridayEditable(data.Dates[4].IsActive);
                            self.saturdayEditable(data.Dates[5].IsActive);
                            self.sundayEditable(data.Dates[6].IsActive);
                            console.log(data.SubmitLog);
                            if (data.SubmitLog !== null)
                            {
                                self.submitEnabled(false);
                                self.saveEnabled(false);
                                self.UWHEnabled(false);
                                self.isFilterCurrentDayForward(false);
                                self.filterCurrenDayEnabled(false);
                            } else {
                                self.submitEnabled(true);
                                self.UWHEnabled(true);
                                self.filterCurrenDayEnabled(true);
                                if(data.Resubmit){
                                    self.filterCurrenDayEnabled(true);
                                    self.isFilterCurrentDayForward(true);
                                }else{
                                    self.filterCurrenDayEnabled(false);
                                    self.isFilterCurrentDayForward(false);
                                }
                            }

                            //data.Dates.map(function(date)
                            //{
                            //    if (date.IsActive)
                            //    {
                            //        //self.submitEnabled(true);
                            //        self.saveEnabled(true);
                            //        self.UWHEnabled(true);
                            //    }
                            //});
                        });

                    }
                });
            };

            self.calculateData = function() {

                self.unitStatus = false;
                if (self.gridView.editingRowIndex() !== -1)
                    return;
                var pageIsValid = true;
                var notif = true;
                ko.utils.arrayForEach(self.gridView.listDataItems(),function(row){

                    if(row.Allocation()>row.WorkerAvailable()){
                        //SKTIS.Helper.Notification("Allocation cannot bigger than available");
                        //notif = false;
                        //pageIsValid = false;
                        //self.ButtonCalculate(false);
                        //setTimeout(function() {
                        //    self.search();
                        //}, 1000);
                        //return;
                    }
                });


                if (!pageIsValid) return;

                self.ButtonCalculate(false);

                var datas = {"Parameters": {
                    "LocationCode": self.filterLocationCode(),
                    'BrandCode': self.filterBrandCode(),
                    'KPSYear': self.filterKPSYear(),
                    'KPSWeek': self.filterKPSWeek(),
                    'Conversion': self.filterConversion(),
                    'FilterCurrentDayForward': self.filterCurrentDayForward(),
                    'IsFilterCurrentDayForward': self.isFilterCurrentDayForward(),
                    'Shift': self.filterShift()
                },
                    "edit": ko.mapping.toJS(self.gridView.listDataItems())
                };
                //return;
                datas = JSON.stringify(datas);
                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/CalculatePlantTPU"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        var convertObjectToObervable = [];
                        $.each(data.Results, function (k, v) {
                            var obj = ko.mapping.fromJS(v, self.gridView.mapping);
                            convertObjectToObervable.push(obj);
                        });
                        self.gridView.listDataItems(convertObjectToObervable);
                        self.EditedCanculation(false);
                        self.saveEnabled(true);
                    }
                });
            };

            // TRANSACTION HISTORY AND FLOW
            self.historyGridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "UpdatedDate",
                    SortOrder: "DESC",
                    code_1: 'TPU',
                    code_2: self.filterLocationCode,
                    code_3: self.filterBrandCode,
                    code_4: self.filterKPSYear,
                    code_5: self.filterKPSWeek
                },
                DataSourceUrl: @Html.BaseUrl("PlanningPlantTPU/GetHistory"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });
            self.flowGridView = new app.GridViewModel({
                Criteria: {
                    PageSize: 10,
                    PageIndex: 1,
                    SortExpression: "UpdatedDate",
                    SortOrder: "ASC",
                    FunctionName: 'TargetProductionUnit'
                },
                DataSourceUrl: @Html.BaseUrl("PlanningPlantTPU/GetFlow"),
                InlineEdit: true,
                InsertRowFocusedControlIndex: 1
            });

            self.loadHistory = function() {
                self.historyGridView.search({}, function(response) {
                   
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });
                
            };
            self.loadFlow = function() {
                self.flowGridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }
                });
            };
            // END OF TRANSACTION HISTORY AND FLOW

            // TRANSACTION LOGS
            self.getTransactionLog = function(cb)
            {
                var data = {
                    LocationCode: self.filterLocationCode(),
                    BrandCode: self.filterBrandCode(),
                    KPSYear: self.filterKPSYear(),
                    KPSWeek: self.filterKPSWeek(),
                    Shift: self.filterShift()
                };

                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/GetState"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    dataType: 'json',
                    success: function(data) {
                        cb(data);
                    }
                });
            }
            // END
            self.brandFromUrl = false;
            self.shiftFromUrl = false;
            self.weekFromUrl = false;
            // Load Data
            self.search = function() {
                var a = "@Model.LocationCode";
                if (self.firstInit && a !== "") {
                    self.filterLocationCode(self.locationCodeurl());
                    self.firstInit = false;
                    self.brandFromUrl= true
                    self.shiftFromUrl = true;
                    self.weekFromUrl = true;
                }

                self.unitStatus = true;
                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                } else {
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }

                self.filterExcelLocationCode = self.filterLocationCode();
                self.filterExcelBrandCode = self.filterBrandCode();
                self.filterExcelShift = self.filterShift();
                self.filterExcelKPSYear = self.filterKPSYear();
                self.filterExcelKPSWeek = self.filterKPSWeek();
                self.filterExcelConversion = self.filterConversion();
                self.ButtonCalculate(false);

                self.getTargetWPP();
                self.getStickPerBox();

                //self.filterExcelListGroup = self.filterListGroup();
                self.gridView.search({}, function(response) {
                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message, 'error');
                        $('.empty-row-message').html(response.message);
                    } else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }

                    if (self.gridView.listDataItems().length > 0) {
                        var firstTpu = self.gridView.listDataItems()[0];
                        self.mondayDate(firstTpu.ProductionStartDate());
                        self.targetWPP(firstTpu.Value1());

                        //self.submitEnabled(false);
                        self.saveEnabled(false);
                        self.UWHEnabled(false);

                        self.getTransactionLog(function(data) {
                            self.mondayEditable(data.Dates[0].IsActive);
                            self.tuesdayEditable(data.Dates[1].IsActive);
                            self.wednesdayEditable(data.Dates[2].IsActive);
                            self.thursdayEditable(data.Dates[3].IsActive);
                            self.fridayEditable(data.Dates[4].IsActive);
                            self.saturdayEditable(data.Dates[5].IsActive);
                            self.sundayEditable(data.Dates[6].IsActive);

                            if (data.SubmitLog !== null)
                            {
                                //self.submitEnabled(false);
                                self.saveEnabled(false);
                                self.UWHEnabled(false);
                                self.isFilterCurrentDayForward(false);
                                self.filterCurrenDayEnabled(false);
                            } else {
                                //self.submitEnabled(true);
                                self.UWHEnabled(true);
                                self.filterCurrenDayEnabled(true);
                                if(data.Resubmit){
                                    self.filterCurrenDayEnabled(true);
                                    self.isFilterCurrentDayForward(true);
                                }else{
                                    self.filterCurrenDayEnabled(false);
                                    self.isFilterCurrentDayForward(false);
                                }
                            }
                        });
                        //self.EditedWorkUnitHour();                        
                        self.largestStandardHourMon.Value(getLargestUWH("ProcessWorkHoursMon"));
                        self.largestStandardHourTue.Value(getLargestUWH("ProcessWorkHoursTue"));
                        self.largestStandardHourWed.Value(getLargestUWH("ProcessWorkHoursWed"));
                        self.largestStandardHourThu.Value(getLargestUWH("ProcessWorkHoursThu"));
                        self.largestStandardHourFri.Value(getLargestUWH("ProcessWorkHoursFri"));
                        self.largestStandardHourSat.Value(getLargestUWH("ProcessWorkHoursSat"));
                        self.largestStandardHourSun.Value(getLargestUWH("ProcessWorkHoursSun"));
                    } else {
                        // fallback if no data found
                        self.getProductionStartDate();
                    }
                });

                // Computed production date on header
                self.getProductionStartDate = function() {
                    $.ajax({
                        url: @Html.BaseUrl("PlanningPlantTPU/GetProductionStartDate"),
                        type: 'GET',
                        cache: false,
                        contentType: 'application/json',
                        data: { year: self.filterKPSYear(), week: self.filterKPSWeek() },
                        dataType: 'json',
                        success: function(data) {
                            self.mondayDate(data);
                        }
                    });
                };

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };

                if (!self.firstLoad || !self.isLoading()) {
                    self.loadHistory();
                    self.loadFlow();
                }

            };

            self.ListLocation = ko.observableArray([]);
            self.getPlantLocationCodes = function(cb){
                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/GetPlantLocationCode"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function(data) {
                        if(data.length>0){
                            var listGroupModel = [];
                            $.each(data, function (index, value) {
                                listGroupModel.push({
                                    LocationCode: value.LocationCode,
                                    LocationName: value.LocationName,
                                    LocationCompat: value.LocationCompat
                                });
                            });
                            self.ListLocation(listGroupModel);
                        }else{
                            var listGroupModel = [];
                            self.ListLocation(listGroupModel);
                        }
                        
                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
            };

            //get brand group code by location
            self.getBrandCodeList = function(cb) {
                //console.log(self.filterLocationCode() +" "+self.filterKPSYear()+" "+self.filterKPSWeek());
                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/GetBrandCodeByLocationYearWeek"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: {
                        locationCode: self.filterLocationCode(),
                        KPSYear: self.filterKPSYear(),
                        KPSWeek: self.filterKPSWeek()
                    },
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlFilterBrandCode').find('option').remove();
                        $('#ddlFilterBrandCode').selectpicker('refresh');
                        var brandCodeModel = [];
                        $.each(data, function(index, value) {
                            brandCodeModel.push({ "Text": value, "Value": value });
                        });
                        self.BrandCodeSelectList(brandCodeModel);
                        if(self.brandFromUrl)
                        {
                            self.filterBrandCode("@Model.DefaultBrandCode");
                            self.brandFromUrl= false;
                        } else
                            self.filterBrandCode(self.BrandCodeSelectList()[0]);
                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
            };

            //get shift by location
            self.getShiftList = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/GetShiftByLocationCode"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { locationCode: self.filterLocationCode() },
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlFilterShift').find('option').remove();
                        $('#ddlFilterShift').selectpicker('refresh');
                        var shiftModel = [];
                        $.each(data, function(index, value) {
                            shiftModel.push({ "Text": value, "Value": value });
                        });
                        self.ShiftSelectList(shiftModel);
                        if(self.shiftFromUrl)
                        {
                            self.filterShift("@Model.DefaultShift");
                            self.shiftFromUrl= false;
                        } else
                            self.filterShift($("#ddlFilterShift :selected").val());

                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
            };


            //get kpsweek by year
            self.getKPSWeekList = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/GetKPSWeek"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { year: self.filterKPSYear()},
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlKPSWeekFilter').find('option').remove();
                        $('#ddlKPSWeekFilter').selectpicker('refresh');
                        var kpsWeekModel = [];
                        var defaultWeek;
                        $.each(data.Weeks, function(index, value) {
                            kpsWeekModel.push({ "Text": value, "Value": value });
                        });
                        self.filterKPSWeek("@Model.DefaultWeek");
                        self.KPSWeekSelectList(kpsWeekModel);

                        if(self.weekFromUrl)
                        {
                            self.filterKPSWeek("@Model.DefaultWeek");
                            self.weekFromUrl= false;
                        } else
                            self.filterKPSWeek(data.DefaultWeek);

                        self.KPSWeekReady(true);
                        if (self.firstInit) {
                            //self.search();
                            self.firstInit = false;
                        }
                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
            };

            @*self.getKPSWeekList = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("ExeTPOProductionEntryVerification/GetWeekByYear"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: { year: self.filterKPSYear()},
                    dataType: 'json',
                    success: function(data) {
                        $('#ddlKPSWeekFilter').find('option').remove();
                        $('#ddlKPSWeekFilter').selectpicker('refresh');
                        var kpsWeekModel = [];
                        $.each(data, function(index, value) {
                            kpsWeekModel.push({ "Text": value, "Value": value });
                        });
                        
                        self.KPSWeekSelectList(kpsWeekModel);
                        self.filterKPSWeek("@Model.DefaultWeek");
                    }
                }).done(function() {
                    if (typeof cb != 'undefined') cb();
                });
            };*@

            self.setDateRange = function(cb) {
                $.ajax({
                    url: @Html.BaseUrl("PlanningPlantTPU/GetDateByYearWeek"),
                    type: 'GET',
                    cache: false,
                    contentType: 'application/json',
                    data: { year: self.filterKPSYear(), week: self.filterKPSWeek() },
                    dataType: 'json',
                    success: function(data) {
                        if((self.filterKPSWeek() > @Model.DefaultWeek) || (self.filterKPSWeek() < @Model.DefaultWeek)){
                            $('#filterCurrentDayForward').data("DateTimePicker").options({
                                //date: moment(data.StartDate),
                                maxDate: moment(data.EndDate),
                                minDate: moment(data.StartDate),
                            });
                        } else if((self.filterKPSWeek() === @Model.DefaultWeek)) {
                            if(moment(moment(data.EndDate).format('YYYY-MM-DD')) > moment(moment(data.TodayDate).format('YYYY-MM-DD')))
                            {
                                $('#filterCurrentDayForward').data("DateTimePicker").options({
                                    //date: moment(data.StartDate),
                                    maxDate: moment(data.EndDate),
                                    minDate: moment(data.TodayDate),
                                });
                            }
                        }
                        if ((self.filterKPSWeek() === @Model.DefaultWeek)){
                            if(moment(moment(data.EndDate).format('YYYY-MM-DD')).isSame(moment().format('YYYY-MM-DD')))
                                self.filterCurrentDayForward(moment(data.EndDate).format("DD/MM/YYYY"));
                            else
                                self.filterCurrentDayForward('@Model.TodayDate');
                        }else{
                            self.filterCurrentDayForward(moment(data.StartDate).format("DD/MM/YYYY"));
                        };
                    }
                }).done(function() {
                    self.isLoading(false);
                    if (typeof cb != 'undefined') cb();
                });
                //$('#filterCurrentDayForward').data("DateTimePicker").options({
                //    minDate: moment().add(1, 'days').toDate()
                //});
            };
            self.afterRender = function(options, item)
            {
                if (typeof(item) === 'undefined') return;

                $(options).attr('title', item.LocationCode);
                $(options).attr(
                    'data-content',
                    "<span class='text'><span style='width: 35px; display: inline-block;'>"+item.LocationCode+"</span> - "+item.LocationName+"</span>"
                );
            }
    
    $(document).ready(function() {
        self.init();
        //$('.alphanumeric').jStepper({allowDecimals:false});
    });

    self.init = function() {
        //Asynch setting
        self.isLoading(true);
        async.series([
            function(cb) {
                self.getKPSWeekList(cb);
            },
            function(cb) {
                self.getPlantLocationCodes(cb);
            },
            function(cb) {
                self.getLocationNameFilter(cb);
            },
            function(cb) {
                self.getBrandCodeList(cb);
            },
            function(cb) {
                self.getShiftList(cb);
            },
            //function(cb) {
            //    // Since below request no need to wait another request to trigger, exclude them from series
            //    // CEUK SAHA BEHH !!! HMMM !!!
            //    self.loadHistory();
            //    self.loadFlow();
            //    cb();
            //}
        ], function() {
            $(document).on('keydown','table div.bootstrap-select button',function(e){
                if(e.keyCode == 13)
                    e.preventDefault();
            });
            self.firstLoad = false;
            self.search();
            self.onFilterConversionChange();
            self.isLoading(false);
        });
        SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
    };
    };
    ko.applyBindings(new app.EditGrid());
    })(app = this.app || {});

</script>
}