@using HMS.SKTIS.Application.Resources

@using SKTISWebsite.Helper
@{ Html.SetPageTitle("Delegation"); }
<style>
    .tt-dataset {
        color: black;
        font-size: 14px;
        width: 195px;
        font-weight: normal;
    }
     
</style>
<div data-bind="with: gridView" class="col-lg-12">
   
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
               
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div id="master-unit">
        <div class="table-overflow">
            <table class="table table-striped table-hover">
                <thead>
                    <tr class="head">
                        <th>From</th>
                        <th>To</th>
                        <th>Responsibility</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                    </tr>
                    <tr class="insertRow" data-bind="click:cancelInline.bind(),inlineAddProccess:[$data, $root.newData]" tabindex="-1">
                        <th class="widthmedium">
                            <input id="typeaheadUserFrom" class="typeahead form-control out-of-bond" data-bind="value: $root.newData.FromUser" type="text" placeholder="PMI User From">

                            @*<select id="ddlFromUserSelectList"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPicker: $root.newData.FromUser, value: $root.newData.FromUser, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlFromUserSelectList, container: 'body' }, optionsAfterRender : $root.afterRender, event: { change: $root.onListFromUserChange }"></select>*@

                        </th>

                        <th class="widthmedium">
                            <input id="typeaheadUserTo" class="typeahead form-control out-of-bond" data-bind="value: $root.newData.ToUser" type="text" placeholder="PMI User To">

                            @*<select id="ddlToUserSelectList"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPicker: $root.newData.ToUser, value: $root.newData.ToUser, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlToUserSelectList, container: 'body' }, optionsAfterRender : $root.afterRender"></select>*@

                        </th>

                        <th class="widthmedium">
                            <select id="ddlResponsibilitySelectList"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPicker: $root.newData.IDResponsibility, value: $root.newData.IDResponsibility, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlResponsibilitySelectList, container: 'body' }, optionsAfterRender : $root.afterRender, event: { change: $root.onListResponsibilityChange}"></select>

                        </th>

                        <th>
                            <div id="dtpStartDate" class='input-group date time insidetable out-of-bond' data-bind="dateTimePicker: $root.newData.StartDate, value:$root.newData.StartDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true, useCurrent: false, appendToBody: true }">
                                <input type='text' class="form-control" readonly="readonly" />
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </th>

                        <th>
                            <div id="dtpEndDate" class='input-group date time insidetable out-of-bond' data-bind="dateTimePicker: $root.newData.EndDate, value:$root.newData.EndDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom', horizontal: 'right'}, showClear: true, ignoreReadonly: true, useCurrent: false, appendToBody: true }">
                                <input type='text' class="form-control" readonly="readonly" />
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </th>

                    </tr>
                </thead>
                <tbody data-bind="foreach: listDataItems">
                    @*insert template*@
                    <tr data-bind="if: ($parent.editingRowIndex() !== $index() && !$root.ValidateDateIsPast($data.StartDate,$data.FromUser)),
                                   click: $parent.editInlineWithCallback.bind($data,$index(), $root.callbackInline.bind())" tabindex="-1">
                        <td><span data-bind="text:$data.FromUser"></span></td>
                        <td><span data-bind="text:$data.ToUser"></span></td>
                        <td>
                            <span data-bind="text:$data.Responsibility"></span>

                        </td>
                        <td><span data-bind="text:$data.StartDate"></span></td>
                        <td class="current"><span data-bind="text:$data.EndDate, click: $parent.editInlineWithCallback.bind($data,$index(), $root.callbackInline.bind())"></span></td>
                    </tr>
                    
                    @*insert template2*@
                    <tr data-bind="if: ($parent.editingRowIndex() !== $index() && $root.ValidateDateIsPast($data.StartDate,$data.FromUser)),
                                   click: $parent.editInlineWithCallback.bind($data,$index(), $root.callbackInline.bind() )">
                        <td class="current"><span data-bind="text:$data.FromUser"></span></td>
                        <td class="current"><span data-bind="text:$data.ToUser"></span></td>
                        <td class="current"><span data-bind="text:$data.Responsibility"></span></td>
                        <td class="current"><span data-bind="text:$data.StartDate"></span></td>
                        <td class="current"><span data-bind="text:$data.EndDate, click: $parent.editInlineWithCallback.bind($data,$index(), $root.callbackInline.bind())"></span></td>
                    </tr>

                    @*Edit template*@
                    <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                if:($parent.editingRowIndex() === $index() && !$root.ValidateDateIsPast($data.StartDate,$data.FromUser)),
                click: $parent.selectRow.bind($data, $index())" tabindex="-1">
                        <td><span data-bind="text:$data.FromUser"></span></td>
                        <td><span data-bind="text:$data.ToUser"></span></td>
                        <td><span data-bind="text:$data.Responsibility"></span></td>
                        <td><span data-bind="text:$data.StartDate"></span></td>
                        <td class="current">
                            <div id="dtpEndDate2" class='input-group date time insidetable out-of-bond' data-bind="dateTimePicker: $data.EndDate, value:$data.EndDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, ignoreReadonly: true, appendToBody: true}">
                                <span class="form-control" data-bind="text: $data.EndDate, ignoreReadonly: true">
                                    <input class="form-control" />
                                </span>
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </td>
                    </tr>
                    
                    
                    @*Edit template2*@
                    <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                    if:($parent.editingRowIndex() === $index() && $root.ValidateDateIsPast($data.StartDate,$data.FromUser)),
                    click: $parent.selectRow.bind($data, $index())" tabindex="-1">
                        <td class="current" align="center">
                            <input id="typeaheadFromUserSelectListEdit" class="typeahead form-control" data-bind="value: $data.FromUser" type="text">

                            @*<select id="ddlFromUserSelectListEdit"
                                class="selectpicker show-tick form-control"
                                data-live-search="true"
                                data-bind="selectPickerCustom: $data.FromUser, value: $data.FromUser, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlFromUserSelectList, container: 'body' }, optionsAfterRender : $root.afterRender, event: { change: $root.onListFromUserChangeEdit.bind($data) }"></select>*@
                        </td>
                        <td class="current" align="center">
                            <input id="typeaheadToUserSelectListEdit" class="typeahead form-control" data-bind="value: $data.ToUser" type="text">

                            @*<select id="ddlToUserSelectList"
                                class="selectpicker show-tick form-control"
                                data-live-search="true"
                                data-bind="selectPickerCustom: $data.ToUser, value: $data.ToUser, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlToUserSelectList, container: 'body' }, optionsAfterRender : $root.afterRender"></select>*@
                        </td>
                        <td class="current">
                            <select id="ddlResponsibilitySelectListEdit"
                                    class="selectpicker show-tick form-control"
                                    data-live-search="true"
                                    data-bind="selectPickerCustom: $data.IDResponsibility, value: $data.IDResponsibility, optionsText: 'Text', optionsValue : 'Value', selectPickerOptions: { optionsArray: $root.ddlResponsibilitySelectListEdit, container: 'body' }, optionsAfterRender : $root.afterRender, event: { change: $root.onListResponsibilityChangeEdit.bind($data)}"></select>
                        </td>
                        <td class="current">
                            <div id="dtpStartDate3" class='input-group date time insidetable out-of-bond' data-bind="dateTimePicker: $data.StartDate, value:$data.StartDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true, useCurrent: false, appendToBody: true }">
                                <input type='text' class="form-control" readonly="readonly" />
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </td>
                        <td class="current">
                            <div id="dtpEndtDate3" class='input-group date time insidetable out-of-bond' data-bind="dateTimePicker: $data.EndDate, value:$data.EndDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true, useCurrent: true, appendToBody: true }">
                                <input type='text' class="form-control" readonly="readonly" />
                                <span class="input-group-addon">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                        </td>
                    </tr>

                </tbody>
                <tbody data-bind="visible: !listDataItems().length">
                    <tr>
                        <td colspan="7" class="empty-row-message"><div class="loader"></div></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
            @Html.Partial("GridViewFooter")
        </div>
    </div>
</div>
@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script src="~/Scripts/common/app.Extenders.js" type="text/javascript"></script>
    <script src="~/Scripts/vendors/typeAhead.js"></script>
    <script type="text/javascript">

        (function(app) {
            app.EditGrid = function() {
                var self = this;
                self.todayDate = ko.observable('');
                
                self.ddlFromUserSelectList = ko.observableArray();
                self.ddlToUserSelectList = ko.observableArray();
                self.ddlResponsibilitySelectList = ko.observableArray();
                self.ddlResponsibilitySelectListEdit = ko.observableArray();
                
                // Filter
                self.newData = {
                    FromUser: ko.observable(''),
                    ToUser: ko.observable(''),
                    Responsibility: ko.observable(''),
                    StartDate: ko.observable(''),
                    EndDate: ko.observable(''),
                    IDResponsibility: ko.observable('')
                };
                
                self.ValidateDateIsPast= function(date,fromUser) {
                   var dt = new Date();
                    if(ko.utils.unwrapObservable(date) === '' || typeof ko.utils.unwrapObservable(date) === 'undefined') return false;
                    var result =  moment(moment(ko.utils.unwrapObservable(date), 'DD/MM/YYYY').format('YYYY-MM-DD')).isBefore(dt);
                    
                    //if (result) {
                    //    self.getResponsibilityByFromUserEdit(fromUser);
                    //}
                    return result;

                };
                
                //self.ddlFromUserSelectList = ko.observableArray([]);
               
                var substringMatcher = function(strs) {
                    return function findMatches(q, cb) {
                        var matches, substringRegex;

                        // an array that will be populated with substring matches
                        matches = [];

                        // regex used to determine if a string contains the substring `q`
                        substrRegex = new RegExp(q, 'i');

                        // iterate through the pool of strings and for any string that
                        // contains the substring `q`, add it to the `matches` array
                        $.each(strs, function(i, str) {
                            if (substrRegex.test(str)) {
                                matches.push(str);
                            }
                        });

                        cb(matches);
                    };
                };


                self.getUserAd = function() {
                    $.ajax({
                        url: @Html.BaseUrl("UtilSecurityDelegations/GetListUserAd"),
                        type: 'GET',
                        contentType: 'application/json',
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            //console.log(data);

                            //var list = [];
                            //$.each(data, function(index, value) {
                            //    list.push({
                            //        UserAD: value.UserAD,
                            //    });
                            //});
                            
                            //$("#ddlFromUserSelectList").find('option').remove();
                            //$("#ddlFromUserSelectList").selectpicker('refresh');
                            //self.ddlFromUserSelectList(data);
                            
                            //$("#ddlToUserSelectList").find('option').remove();
                            //$("#ddlToUserSelectList").selectpicker('refresh');
                            //self.ddlToUserSelectList(data);
                            
                            
                            var namaUser = data;
                            $('#typeaheadUserFrom').typeahead({
                                hint: true,
                                highlight: true,
                                minLength: 1
                            },
                            {
                                name: 'namaUser',
                                source: substringMatcher(namaUser)
                            });
                            

                            $('#typeaheadUserTo').typeahead({
                                hint: true,
                                highlight: true,
                                minLength: 1
                            },
                            {
                                name: 'namaUser',
                                source: substringMatcher(namaUser)
                            });
                            
                            
                        }
                    });
                };
                
            
                
                $('#typeaheadUserFrom').on('typeahead:selected', function (e, value) {
                    console.log(value);
                    self.newData.FromUser(value);
                    self.onListFromUserChange();

                });
                
                $('#typeaheadUserTo').on('typeahead:selected', function (e, value) {
                    self.newData.ToUser(value);
                });
                
                
                
                self.ddlToUserSelectList = ko.observableArray([]);
               
              
                self.ddlResponsibilitySelectList = ko.observableArray([]);
               
                self.getResponsibility = function() {
                    $.ajax({
                        url: @Html.BaseUrl("UtilSecurityDelegations/GetListUserAd"),
                        type: 'GET',
                        contentType: 'application/json',
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            $("#ddlResponsibilitySelectList").find('option').remove();
                            $("#ddlResponsibilitySelectList").selectpicker('refresh');
                            self.ddlResponsibilitySelectList(data);
                        }
                    });
                };

            
                
                self.onListFromUserChange = function() {
                    $.ajax({
                        url: @Html.BaseUrl("UtilSecurityDelegations/GetListResponsibility"),
                        type: 'GET',
                        contentType: 'application/json',
                        data : {user:self.newData.FromUser},
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            $("#ddlResponsibilitySelectList").find('option').remove();
                            $("#ddlResponsibilitySelectList").selectpicker('refresh');
                            self.ddlResponsibilitySelectList(data);
                        }
                    });
                };
                
                self.callbackInline = function(data) {

                    console.log(typeof data.FromUser);
                    console.log(data);
                    
                    var list = self.getResponsibilityByFromUserEdit(ko.utils.unwrapObservable(data.FromUser));
                    
                    $.ajax({
                        url: @Html.BaseUrl("UtilSecurityDelegations/GetListUserAd"),
                        type: 'GET',
                        contentType: 'application/json',
                        dataType: 'json',
                        cache: false,
                        success: function(dataUser) {
                            //console.log(data);
                            var namaUser = dataUser;
                            $('#typeaheadFromUserSelectListEdit').typeahead({
                                hint: true,
                                highlight: true,
                                minLength: 1
                            },
                               {
                                   name: 'namaUser',
                                   source: substringMatcher(namaUser)
                               });
                            
                            
                            $('#typeaheadToUserSelectListEdit').typeahead({
                                hint: true,
                                highlight: true,
                                minLength: 1
                            },
                            {
                                name: 'namaUser',
                                source: substringMatcher(namaUser)
                            });
                            
                            $('#typeaheadFromUserSelectListEdit').on('typeahead:selected', function (e, value) {
                                
                                if (typeof data.FromUser == "string") {
                                    data.FromUser = value;
                                } else {
                                    data.FromUser(value);
                                }
                                
                                console.log(data);
                                
                                self.getResponsibilityByFromUserEdit(value);
                            });
                            
                            $('#typeaheadToUserSelectListEdit').on('typeahead:selected', function (e, value) {
                                if (typeof data.FromUser == "string") {
                                    data.ToUser = value;
                                } else {
                                    data.ToUser(value);
                                }
                            });
                            
                        }
                    });
                    
                    
                   
                };
                
                self.onListFromUserChangeEdit = function(data) {
                    var list = self.getResponsibilityByFromUserEdit(data.FromUser());
                    console.log(data);
                };
                
                self.onListResponsibilityChange = function() {
                    self.newData.Responsibility($("#ddlResponsibilitySelectList option:selected").text());
                    
                };
                
                self.onListResponsibilityChangeEdit = function(data) {
                    self.getResponsibilityDetail(data);
                };
                
                //Function Get Responsibility Detail
                self.getResponsibilityDetail = function(context) {
                    if(typeof context.IDResponsibility() != 'undefined'){
                        $.ajax({
                            url: @Html.BaseUrl("UtilSecurityDelegations/GetResponsibilityDetail"),
                            type: 'GET',
                            contentType: 'application/json',
                            data: { idResponsibility: context.IDResponsibility() },
                            dataType: 'json',
                            success: function(data) {
                                context.Responsibility(data.ResponsibilityName);
                            }
                        });
                    }else{
                        context.Responsibility("");
                       
                    }
                };
                
                self.getResponsibilityByFromUserEdit = function(userFrom) {
                    var list = [];
                    $.ajax({
                        url: @Html.BaseUrl("UtilSecurityDelegations/GetListResponsibility"),
                        type: 'GET',
                        contentType: 'application/json',
                        data : {user:userFrom},
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            list = data;
                            $("#ddlResponsibilitySelectListEdit").find('option').remove();
                            $("#ddlResponsibilitySelectListEdit").selectpicker('refresh');
                            self.ddlResponsibilitySelectListEdit(data);
                        }
                    });
                    return ko.observableArray(list);
                };
                

                // Gridview Initialization
                self.gridView = new app.GridViewModel({
                    Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", Location: self.filterLocationCode },
                    DataSourceUrl: @Html.BaseUrl("UtilSecurityDelegations/GetDelegations"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 1
                });

                // Field Validations
                self.gridView.applyValidationRules = function(entity) {

                    self.RemoveNotification();
                    
                    entity.FromUser.extend({
                        required: {
                            message: "<strong>FromUser</strong> cannot be empty!"
                        }
                    });
                    
                    entity.ToUser.extend({
                        required: {
                            message: "<strong>ToUser</strong> cannot be empty!"
                        }
                    });
                    
                    entity.IDResponsibility.extend({
                        required: {
                            message: "<strong>Responsibility</strong> cannot be empty!"
                        }
                    });
                    
                    entity.StartDate.extend({
                        required: {
                            message: "<strong>StartDate</strong> cannot be empty!"
                        }
                    });
                    
                    entity.EndDate.extend({
                        cannotLessThan:  {
                            params: entity.StartDate,
                            message: "Please enter a <strong>End Date</strong> value greater than or equal to <strong>Start Date</strong>."
                        },
                        required: {
                            message: "<strong>EndDate</strong> cannot be empty!"
                        }
                    });
                }

                // Reset Fields for Insert Row
                self.gridView.resetDefault = function(viewModel) {
                    //viewModel.RulesName('');
                };

            
                // Save Action
                self.saveData = function() {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        "new": self.gridView.listNewItems(),
                        "edit": self.gridView.listEditItems()
                    }

                    datas = JSON.stringify(datas);

                    $.ajax({
                        url: @Html.BaseUrl("UtilSecurityDelegations/SaveAllDelegations"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function(data) {
                            if (data.New) {
                                $.each(data.New, function(k, value) {
                                    if (value) {
                                        SKTIS.Helper.ResponseNotification(value, "Insert Delegation ", value.FromUser );
                                    }
                                });
                            }
                            if (data.Edit) {
                                $.each(data.Edit, function(k, value) {
                                    if (value) {
                                        SKTIS.Helper.ResponseNotification(value, "Edit Delegation ", value.FromUser);
                                    }
                                });
                            }

                            self.gridView.sort('UpdatedDate', 'DESC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                        }
                    });
                }

                // Load Data
                self.search = function() {
                    self.getUserAd();
                    //self.getToUserAd();
                    //self.getResponsibility();
                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    } else {
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }

                   
                    self.gridView.search({}, function(response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message, 'error');
                            $('.empty-row-message').html(response.message);
                        } else if (response.status == 'Empty') {

                            self.RemoveNotification();

                            //SKTIS.Helper.Notification(response.message, 'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });

                    self.RemoveNotification = function() {
                        if ($('#noty_top_layout_container').length > 0) {
                            $('#noty_top_layout_container').remove();
                        }
                    };
                };
                
                self.search();

                // Check whether New or Edit data is existing and not saved to database yet (on Request action)
                SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
            };

            $(document).ready(function(){
                $('table tr.insertRow .selectpicker').change(focusTableRow);
                $('table tr.insertRow').on('dp.change','#dtpStartDate,#dtpEndDate,#dtpEndDate2,#dtpStartDate3,#dtpEndDate3',focusTableRow);
             
            });

            function focusTableRow(){
                $('table tr.insertRow').focus();
            };
            
            ko.applyBindings(new app.EditGrid());

        })(app = this.app || {});


    </script>
}