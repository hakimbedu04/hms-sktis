@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MasterTPOPackage
@using SKTISWebsite.Controllers
@using SKTISWebsite.Helper
@model SKTISWebsite.Models.MstTPOPackage.InitMstTPOPackageViewModel

@{Html.SetPageTitle(@MasterTPOPackage.PageTitle);}
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">
                @MasterTPOPackage.lblTPOLocationFilter
            </label>
            <div class="col-lg-3">
                @*@Html.DropDownList("ddlLocationFilter", Model.Locations, @CommonLabel.ddlSelectAll,
                new Dictionary<string, object> { { "data-bind", "value:$root.filterLocation, event : { change : $root.GetLocationNameFilter}" },
                    { "class", "selectpicker show-tick form-control" },
                    {"data-live-search","true"},{"id","ddlLocationFilter"} })*@

                <select id="ddlLocationFilter"
                        class="selectpicker show-tick form-control"
                        data-live-search="true"
                        data-bind="selectPicker:$root.filterLocation, optionsText: 'Text', optionsValue : 'Value', optionsAfterRender: $root.afterRender, selectPickerOptions: { optionsArray: $root.menuItemLocations}, event : { change : $root.GetLocationNameFilter}"></select>

            </div>
            <div class="col-lg-4">
                <span id="spLocationNameFilter" class="form-control" data-bind="text:$root.filters.LocationName" />
            </div>
        </div>
        <div class="row">
            <label class="form-label col-lg-4">
                @MasterTPOPackage.lblYearFilter
            </label>
            <div class="col-lg-3">
                @Html.DropDownList("ddlYearFilter", Model.Years, @CommonLabel.ddlSelectAll,
                new Dictionary<string, object> { { "data-bind", "value:$root.filterYear" },
                    { "class", "selectpicker show-tick form-control" },
                    {"data-live-search","true"},{"id","ddlYearFilter"} })
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString()))
                {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    using (Html.BeginForm("GenerateExcel", "MasterTpoPackage", FormMethod.Post, new { @data_bind = "submit: $root.getLocationCode" }))
                    {
                        <input type="hidden" name="locationCode" />
                        <input type="hidden" name="year" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div id="master-item-location" class="table-overflow auto-overflow">
        <table class="table table-striped table-hover">
            <thead>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'LocationCode'), css:sortCss('LocationCode', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@MasterTPOPackage.lblTitleLocationCode</th>
                    <th data-bind="click:sortBy.bind($data,'LocationName'), css:sortCss('LocationName', $data.sortExpression(), $data.sortOrder())" class="widthmedium">@MasterTPOPackage.lblTitleLocationName</th>
                    <th data-bind="click:sortBy.bind($data,'BrandGroupCode'), css:sortCss('BrandGroupCode', $data.sortExpression(), $data.sortOrder())">@MasterTPOPackage.lblTitleBrandGroup</th>
                    <th data-bind="click:sortBy.bind($data,'Package'), css:sortCss('Package', $data.sortExpression(), $data.sortOrder())">@MasterTPOPackage.lblTitlePackage</th>
                    <th data-bind="click:sortBy.bind($data,'EffectiveDate'), css:sortCss('EffectiveDate', $data.sortExpression(), $data.sortOrder())" class="widthdate">@MasterTPOPackage.lblTitleEffevtiveDate</th>
                    <th data-bind="click:sortBy.bind($data,'ExpiredDate'), css:sortCss('ExpiredDate', $data.sortExpression(), $data.sortOrder())" class="widthdate">@MasterTPOPackage.lblTitleExpireDate</th>
                    <th class="widthdg15">@MasterTPOPackage.lblTitleMemoRef</th>
                    <th>@MasterTPOPackage.lblTitleAttachment</th>
                    <th>@MasterTPOPackage.lblTitleRemark</th>
                    <th class="widthdate">@MasterTPOPackage.lblTitleUpdatedBy</th>
                    <th class="widthdate">@MasterTPOPackage.lblTitleUpdatedDate</th>
                </tr>
                <tr class="insertRow" data-bind="inlineAddProccess:[$data, $root.newData]">
                    <th class="widthsmall">
                        @*@Html.DropDownList("ddlLocationInsert", Model.Locations,
                            new Dictionary<string, object> { { "data-bind", "value:$root.newData.LocationCode, event : { change : $root.GetLocationNameNew}" },
                                { "class", "selectpicker show-tick form-control" },
                                {"data-live-search","true"},{"id","ddlLocationInsert"} })*@

                        <select id="ddlLocationInsert"
                                class="selectpicker show-tick form-control"
                                data-live-search="true"
                                data-bind="selectPicker:$root.newData.LocationCode, optionsText: 'Text', optionsValue :'Value', optionsAfterRender: $root.afterRenderNonAll, selectPickerOptions: { optionsArray: $root.menuLocationCodeSelectList, container: 'body' }, event : {change : $root.GetLocationNameNew}"></select>
                    </th>
                    <th class="widthmedium"><span id="spLocationNameInsert" data-bind="text:$root.newData.LocationName"></span></th>
                    <th>
                        @*@Html.DropDownList("ddlBrandGroupInsert", Model.BrandGroups,
                            new Dictionary<string, object> { { "data-bind", "value:$root.newData.BrandGroupCode" },
                                { "class", "selectpicker show-tick form-control" },
                                {"data-live-search","true"},{"id","ddlBrandGroupInsert"} })*@

                        <select id="ddlBrandGroupInsert" class="selectpicker show-tick form-control" data-live-search="true"
                                data-bind="selectPicker: $root.newData.BrandGroupCode, optionsText: 'Value', optionsValue : 'Text', selectPickerOptions: { optionsArray: $root.BrandGroupCodeSelectList, container: 'body'  }, event: { change: $root.onBrandGroupChange }"></select>
                    </th>

                    <th><input data-bind="value:$root.newData.Package, valueUpdate: 'afterkeydown', numeric:$root.newData.Package" class="form-control transparent" /></th>

                    <th class="widthdate">
                        <div id="insertEffectiveDate" class='input-group date time insidetable' data-bind="dateTimePicker: $root.newData.EffectiveDate, value:$root.newData.EffectiveDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true, useCurrent: false , appendToBody: true}">
                            <input type='text' class="form-control" readonly="readonly" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </th>
                    <th class="widthdate">
                        <div id="insertExpiredDate" class='input-group date time insidetable' data-bind="dateTimePicker: $root.newData.ExpiredDate, value:$root.newData.ExpiredDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, showClear: true, ignoreReadonly: true, useCurrent: false , appendToBody: true}">
                            <input type='text' class="form-control" readonly="readonly" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </th>
                    <th class="widthdg15"><input data-bind="value:$root.newData.MemoRef, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th class="no-wrap">
                        <span data-bind="text: $root.newData.MemoFileName, visible: $root.newData.MemoFileName"></span>
                        <span class="file-input btn btn-primary btn-file" data-bind="enableWhenPrimaryFieldFilled:[$root.newData.EffectiveDate,$root.newData.ExpiredDate]">
                            @CommonLabel.btnChooseFile <input type="file" data-mode="insert" data-bind="enableWhenPrimaryFieldFilled:[$root.newData.EffectiveDate,$root.newData.ExpiredDate], event: { change: function() { $root.uploadFile($element) }}">
                        </span>
                        
                    </th>
                    <th><input data-bind="value:$root.newData.Remark, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th class="widthdate"></th>
                    <th class="widthdate"></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                @*effective date less than today*@

                <tr data-bind="if: ($parent.editingRowIndex() !== $index()), click: $parent.editInline3.bind($data,$index())">
                    <td><span data-bind="text:$data.LocationCode"></span></td>
                    <td><span data-bind="text:$data.LocationName"></span></td>
                    <td><span data-bind="text:$data.BrandGroupCode"></span></td>
                    <td class="current"><span data-bind="text:$data.Package"></span></td>
                    <td data-bind="css: {'current':moment(moment(ko.utils.unwrapObservable($data.EffectiveDate), 'DD/MM/YYYY').format('YYYY-MM-DD')).isAfter($root.todayDate())}"><span data-bind="text:$data.EffectiveDate"></span></td>
                    <td data-bind="css: {'current':moment(moment(ko.utils.unwrapObservable($data.ExpiredDate), 'DD/MM/YYYY').format('YYYY-MM-DD')).isAfter($root.todayDate())}"><span data-bind="text:$data.ExpiredDate"></span></td>
                    <td class="current"><span data-bind="text:$data.MemoRef"></span></td>
                    <td class="current">
                        @* Please change this to Samurai's CSS *@
                        <div data-bind="visible: $data.MemoFileName">
                            <span class="truncate uploadfile" style="display: inline-block; padding-top:5px;">
                                <a href="#" target="_blank" class="uploadfile newTabLink" data-bind="text: $data.MemoFileName, attr: {href: $root.getUrlFromMemo($data) }"></a>
                            </span>
                        </div>
                    </td>
                        
                        
                    <td class="current"><span data-bind="text:$data.Remark"></span></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                    <td hidden><span data-bind="text:$data.EffectiveDateOld"></span></td>
                </tr>

                @*edit template effective date less than today mode*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data], if:($parent.editingRowIndex() === $index()), click: $parent.selectRow.bind($data, $index())">
                    <td><span data-bind="text:$data.LocationCode"></span></td>
                    <td><span id="spLocationNameInsert" data-bind="text:$data.LocationName"></span></td>
                    <td><span data-bind="text:$data.BrandGroupCode"></span></td>
                    <td class="current"><input data-bind="value:$data.Package, valueUpdate: 'afterkeydown', numeric:$data.Package" class="form-control transparent" /></td>
                    <td data-bind="css: {'current':moment(moment(ko.utils.unwrapObservable($data.EffectiveDate), 'DD/MM/YYYY').format('YYYY-MM-DD')).isAfter($root.todayDate())}">
                        <div class="input-group date time insidetable" data-bind="dateTimePicker: $data.EffectiveDate, value:$data.EffectiveDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, ignoreReadonly: moment(moment(ko.utils.unwrapObservable($data.EffectiveDate), 'DD/MM/YYYY').format('YYYY-MM-DD')).isAfter($root.todayDate()), appendToBody: true}">
                            <input type='text' class="form-control" readonly="readonly" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </td>
                    <td data-bind="css: {'current':moment(moment(ko.utils.unwrapObservable($data.ExpiredDate), 'DD/MM/YYYY').format('YYYY-MM-DD')).isAfter($root.todayDate())}">
                        <div class="input-group date time insidetable" data-bind="dateTimePicker: $data.ExpiredDate, value:$data.ExpiredDate, dateTimePickerOptions: {widgetPositioning: {vertical: 'bottom'}, ignoreReadonly: moment(moment(ko.utils.unwrapObservable($data.ExpiredDate), 'DD/MM/YYYY').format('YYYY-MM-DD')).isAfter($root.todayDate()), appendToBody: true}">
                            <input type='text' class="form-control" readonly="readonly" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </td>
                    <td class="current"><input data-bind="value:$data.MemoRef, valueUpdate: 'afterkeydown'" class="form-control transparent" /></td>
                    <td class="current">
                        <span class="file-input btn btn-primary btn-file" data-bind="visible: !ko.utils.unwrapObservable($data.MemoFileName)">
                            @CommonLabel.btnChooseFile <input type="file" data-mode="update" data-bind="attr: {'data-filename':$data.MemoPath}, event: { change: function() { $root.uploadFile($element, $data) } }">
                        </span>
                        <div data-bind="visible: ko.utils.unwrapObservable($data.MemoFileName)" style="width: 160px;">
                            <span class="truncate uploadfile" style="display: inline-block; padding-top:5px;">
                                <a href="#" target="_blank" class="uploadfile newTabLink" data-bind="text: $data.MemoFileName, attr: {href: $root.getUrlFromMemo($data) }"></a>
                            </span>
                            <span class="pull-right">
                                <span class="file-input btn btn-primary btn-file">
                                    CHG <input type="file" data-mode="update" data-bind="attr: {'data-filename':$data.MemoPath}, event: { change: function() { $root.uploadFile($element, $data) } }">
                                </span>
                            </span>
                        </div>
                    </td>
                    <td class="current"><input data-bind="value:$data.Remark,tabToNext:[$parent,$data], valueUpdate: 'afterkeydown'" class="form-control transparent" /></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                    <td hidden><span data-bind="text:$data.EffectiveDateOld"></span></td>
                </tr>

            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="11" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>
</div>
@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/app/globalfunctions.js" type="text/javascript"></script>
    <script type="text/javascript">
    (function(app) {
        app.EditGrid = function() {
            var self = this;
            self.todayDate = ko.observable('');
            getStartDateCurrentWeek();
            self.itemLocations = @Html.Raw(Json.Encode(@Model.LocationDescs));
            self.menuItemLocations = ko.observableArray(@Html.Raw(Json.Encode(@Model.Locations)));
            self.menuLocationCodeSelectList =  ko.observableArray(@Html.Raw(Json.Encode(@Model.Locations)));
            self.menuItemLocations.unshift('All');  
            //var itempertama;
            //itempertama.Disabled=false;
            //itempertama.Group=null;
            //itempertama.Selected=false;
            //itempertama.Text="All";
            //itempertama.Value="All";
            //console.log(itempertama);

            ko.bindingHandlers.numeric = {
                init: function (element, valueAccessor) {
                    $(element).on("keydown", function (event) {
                        // Allow: backspace, delete, tab, escape, and enter
                        if (event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 27 || event.keyCode == 13 ||
                            // Allow: Ctrl+A
                            (event.keyCode == 65 && event.ctrlKey === true) ||
                            // Allow: . ,
                            (event.keyCode == 188 || event.keyCode == 190 || event.keyCode == 110) ||
                            // Allow: home, end, left, right
                            (event.keyCode >= 35 && event.keyCode <= 39)) {
                            // let it happen, don't do anything
                            return;
                        }
                        else {
                            // Ensure that it is a number and stop the keypress
                            if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105)) {
                                event.preventDefault();
                            }
                        }
                    });
                }
            };

            self.getUrlFromMemo = function(data)
            {
                if (ko.isObservable(data.MemoFile)) {
                    return data.MemoFileName() != null ? '@Model.UploadPath' + data.MemoFileName() : null;
                }

                return null;
            }

            self.uploadFile = function(el, $data)
            {
                var that = el;
                var mode = $(that).data('mode');
                var files = that.files;

                if (files.length > 0) {
                    if (window.FormData !== undefined) {
                        var data = new FormData();
                        data.append('mode',mode);
                        if(mode == 'update')
                            data.append('oldFileName',$(that).data('filename'));
                        for (var x = 0; x < files.length; x++) {
                            data.append(files[x].name, files[x]);
                        }
                        $.ajax({
                            type: "POST",
                            url: "MasterTpoPackage/Upload?modulepath=MasterTpoPackage",
                            contentType: false,
                            processData: false,
                            data: data,
                            success: function (result) {
                                SKTIS.Helper.Log(result);
                                if(result.ResponseType == 'OK'){
                                    if(mode == 'insert')
                                    {
                                        self.newData.MemoPath(result.Filename);
                                        self.newData.MemoFileName(result.AbsoluteName);
                                        console.log(self.newData);
                                    }
                                    else
                                    {
                                        $data.MemoPath(result.Filename);
                                        $data.MemoFileName(result.AbsoluteName);
                                    }

                                    el.value = '';
                                }
                            },
                            error: function (xhr, status, p3, p4) {
                                var err = "Error " + " " + status + " " + p3 + " " + p4;
                                if (xhr.responseText && xhr.responseText[0] == "{")
                                    err = JSON.parse(xhr.responseText).Message;
                                SKTIS.Helper.Log(err);
                            }
                        });
                    } else {
                        SKTIS.Helper.Notification("This browser doesn't support HTML5 file uploads!",'warning');
                    }
                }
            }

            

                self.filterYear = ko.observable('');
                self.filterLocation = ko.observable('');
                self.newDataLocation = ko.observable('');
                self.LocationCode = ko.observable(self.filterLocation());

                self.GetLocationNameFilter = function() {
                    self.filters.LocationName = "";
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == self.filterLocation()) {
                            console.log(self.filters.LocationName);
                            self.filters.LocationName = self.itemLocations[i].LocationName;
                            break;
                        }
                    }
                    $('#spLocationNameFilter').html(self.filters.LocationName);
                }.bind(this);

                self.GetDefaultLocationNameFilter = function() {
                    var result ="";
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == $("#ddlLocationFilter").val()) {
                            result = self.itemLocations[i].LocationName;
                            break;
                        }
                    }
                    return result;
                };

                self.GetLocationNameNew = function() {
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == self.newData.LocationCode()) {
                            self.newData.LocationName = self.itemLocations[i].LocationName;
                            //console.log(self.newData.LocationName);
                            $('#spLocationNameInsert').html(self.itemLocations[i].LocationName);
                            break;
                        }
                    }
                    getBrandGroupCodeLists(self.newData.LocationCode());
                    //GetEffectiveDates();
                }.bind(this);

                self.onBrandGroupChange = function()
                {
                    GetEffectiveDates();
                }

                self.GetDefaultLocationNameNew = function() {
                    var result ="";
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == $("#ddlLocationInsert").val()) {
                            result = self.itemLocations[i].LocationName;
                            break;
                        }
                    }
                    //getBrandGroupCodeLists($("#ddlLocationInsert").val());
                    return result;
                };

                function getStartDateCurrentWeek() {
                    $.ajax({
                        url: @Html.BaseUrl("MasterTpoPackage/GetStartWeek"),
                        type: 'GET',
                        contentType: 'application/json',
                        cache: false,
                        dataType: 'json',
                        success: function(data) {
                            //console.log(moment(data.StartDate).format('YYYY-MM-DD'));
                            self.todayDate(moment(data.StartDate).format('YYYY-MM-DD'));
                            //self.todayDate(data.StartDate);
                        }
                    });
                }

                self.BrandGroupCodeSelectList = ko.observableArray([]);
                function getBrandGroupCodeLists(locCode) {
                    $.ajax({
                        url: @Html.BaseUrl("MasterTpoPackage/GetBrandGroupByLocationCode"),
                    type: 'GET',
                    contentType: 'application/json',
                    data: {locationCode : locCode},
                    dataType: 'json',
                    cache: false,
                    success: function(data) {
                        $('#ddlBrandGroupInsert').find('option').remove();
                        $('#ddlBrandGroupInsert').selectpicker('refresh');
                        self.BrandGroupCodeSelectList(data);
                    }
                });
            }

            self.filters = {
                LocationName: self.GetDefaultLocationNameFilter()
            };

            self.newData = {
                LocationName: self.GetDefaultLocationNameNew(),
                LocationCode:ko.observable(''),
                EffectiveDate:ko.observable(''),
                BrandGroupCode:ko.observableArray([]),
                Package:ko.observable(''),
                ExpiredDate:ko.observable(''),
                MemoRef:ko.observable(''),
                MemoFile:ko.observable(''),
                MemoPath:ko.observable(''),
                Remark:ko.observable(''),
                MemoFileName:ko.observable('')
            };

            //description: init gridView
            self.gridView = new app.GridViewModel({
                Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", LocationCode: self.filterLocation, Year: self.filterYear },
                DataSourceUrl:  @Html.BaseUrl("MasterTpoPackage/GetMstTPOPackage"),
                InlineEdit: true
            });

            // Field Validations
            self.gridView.applyValidationRules = function (entity) {
                self.RemoveNotification();

                entity.BrandGroupCode.extend({
                    required: {
                        message: "<strong>Brand Group Code</strong> cannot be empty!"
                    }
                });
                entity.LocationCode.extend({
                    required: {
                        message: "<strong>Location Code</strong> cannot be empty!"
                    }
                });
                
                //console.log(self.gridView.isEditInline());
                if( self.gridView.isEditInline()){
                    entity.EffectiveDate.extend({
                        required: {
                            message: "<strong>Effective Date</strong> cannot be empty!"
                        }//,
                        //isCurrentWeek: {
                        //    async: false,
                        //    params: entity.ExpiredDate,
                        //    message: "You cancel the process."
                        //}
                    });
                }

                entity.Package.extend({
                    required: {
                        message: "<strong>Package</strong> cannot be empty!"
                    },
                    validation: {
                        validator: function (val) {
                            //console.log(parseToFloat(val));
                            return parseToFloat(val) > 0;
                        },
                        message: "<strong>Package</strong> must be greater than 0!"
                    }
                });

                entity.ExpiredDate.extend({
                    cannotLessThan:  {
                        params: entity.EffectiveDate,
                        message: "Please enter a <strong>Expired Date</strong> value greater than or equal to <strong>Effective Date</strong>."
                    },
                    required: {
                        message: "<strong>Expired Date</strong> cannot be empty!"
                    }//,
                    //maxOneWeekFrom:  {
                    //    params: entity.EffectiveDate,
                    //    message: "<strong>Expired Date</strong> cannot be greater than one week from <strong>Effective Date</strong>!"
                    //}
                });

                //replace . with , for database insertion
                //entity.Package(entity.Package().toString().replace('.',','));
            };

            // Reset Fields for Insert Row
            self.gridView.resetDefault = function (viewModel) {
                viewModel.LocationCode('');
                viewModel.EffectiveDate('');
                viewModel.BrandGroupCode('');
                viewModel.Package('');
                viewModel.ExpiredDate('');
                viewModel.MemoRef('');
                viewModel.MemoFile('');
                viewModel.MemoPath('');
                viewModel.Remark('');
                viewModel.MemoFileName('');
                $('.insertRow .input-group.date input').val('');
                $('#insertEffectiveDate').data('DateTimePicker').clear();
                $('#insertExpiredDate').data('DateTimePicker').clear();
            };

            self.gridView.onAfterSave = function(){
                self.gridView.isEditInline(false);
            };

            //description: save bulk data
            self.saveData = function() {
                if (self.gridView.editingRowIndex() !== -1)
                    return;

                var datas = {
                    //"Parameters": { "LocationCode": self.LocationCode },
                    "New": self.gridView.listNewItems(),
                    "Edit": self.gridView.listEditItems()
                };

                var needConfirmation = false;

                $.each(datas.New, function(i ,v)
                {
                    var isSunday = moment(v.ExpiredDate, "DD/MM/YYYY");

                    if (isSunday.format("dddd") != "Sunday")
                        needConfirmation = true;
                });

                if (needConfirmation)
                {
                    var confirm = window.confirm("There is one or more expiration date which is not Sunday, do you want to proceed ?");

                    if (!confirm) return false;
                }

                datas = JSON.stringify(datas);
                $.ajax({
                    url:  @Html.BaseUrl("MasterTpoPackage/SaveAllTPOPackages"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: datas,
                    dataType: 'json',
                    success: function(data) {
                        if (data.New) {
                            $.each(data.New, function (k, value) {
                                if (value)
                                    SKTIS.Helper.ResponseNotification(value, "Insert Master TPO Package", value.LocationCode);
                            });
                        }

                        if (data.Edit) {
                            $.each(data.Edit, function (k, value) {
                                if (value)
                                    SKTIS.Helper.ResponseNotification(value, "Edit Master TPO Package", value.LocationCode);
                            });
                        }

                        self.gridView.sort('UpdatedDate', 'DESC');
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                        GetEffectiveDates();
                    }
                });
            };

            self.getLocationCode = function(formElement) {
                $(formElement).find("input[name=locationCode]").val(self.LocationCode),
                $(formElement).find("input[name=year]").val(self.Year);
                return true;
            };

            self.afterRender = function(options, item)
            {
                if (item.Value==undefined){
                    $(options).attr('title', "All");
                    $(options).attr(
                        'data-content',
                        "<span class='text'><span style='width: 35px; display: inline-block;'>" + "All" + "</span>  " + "" + "</span>"
                    );
                }else{
                    console.log();
                    var locDesc;
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == item.Value) {
                            locDesc = self.itemLocations[i].LocationName;
                            break;
                        }
                    }

                    $(options).attr('title', item.Value);
                    $(options).attr(
                        'data-content',
                        "<span class='text'><span style='width: 35px; display: inline-block;'>" + item.Value + "</span> - " + locDesc + "</span>"
                    );
                }
                
            }

            self.afterRenderNonAll = function(options, item)
            {
                if (item.Value==undefined){
                    //$(options).attr('title', "All");
                    //$(options).attr(
                    //    'data-content',
                    //    "<span class='text'><span style='width: 35px; display: inline-block;'>" + "All" + "</span>  " + "" + "</span>"
                    //);
                }else{
                    console.log();
                    var locDesc;
                    for (var i = 0; i < self.itemLocations.length; i++) {
                        if (self.itemLocations[i].LocationCode == item.Value) {
                            locDesc = self.itemLocations[i].LocationName;
                            break;
                        }
                    }

                    $(options).attr('title', item.Value);
                    $(options).attr(
                        'data-content',
                        "<span class='text'><span style='width: 35px; display: inline-block;'>" + item.Value + "</span> - " + locDesc + "</span>"
                    );
                }
                
            }

            //description: load data
            self.search = function() {
                $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                    return;
                }else{
                    self.gridView.listNewItems.removeAll();
                    self.gridView.listEditItems.removeAll();
                }

                self.LocationCode = self.filterLocation();
                self.Year = self.filterYear();
                self.gridView.search({}, function (response) {
                    self.GetLocationNameFilter();

                    if (response.status == 'KO') {
                        SKTIS.Helper.Notification(response.message,'error');
                        $('.empty-row-message').html(response.message);
                    }else if (response.status == 'Empty') {

                        self.RemoveNotification();

                        //SKTIS.Helper.Notification(response.message,'warning');
                        $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                    }

                    GetEffectiveDates();
                });

                self.RemoveNotification = function() {
                    if ($('#noty_top_layout_container').length > 0) {
                        $('#noty_top_layout_container').remove();
                    }
                };
            };
            
            self.search();

            $(document).ready(function(){

                self.GetLocationNameNew();

            });
            

            // Check whether New or Edit data is existing and not saved to database yet (on Request action)
            SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
            self.LocationCode = $("#ddlLocation").val();

            // Reset observable variable also when picker clear event
            $('#insertEffectiveDate').on('dp.change', function (e) {
                self.newData.EffectiveDate('');
            });
            $('#insertExpiredData').on('dp.change', function (e) {
                self.newData.ExpiredDate('');
            });

            function GetEffectiveDates(cb)
            {
                var data = {
                    LocationCode: self.newData.LocationCode(),
                    BrandGroupCode: self.newData.BrandGroupCode()
                };

                $.ajax({
                    url:  @Html.BaseUrl("MasterTpoPackage/GetEffectiveDates"),
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    dataType: 'json',
                    success: function(response)
                    {
                        self.newData.EffectiveDate(moment(response.StartDate).format("DD/MM/YYYY"));
                        self.newData.ExpiredDate(moment(response.EndDate).format("DD/MM/YYYY"));

                        if (cb) cb(response);
                    },
                    error: function(response)
                    {
                        SKTIS.Helper.Notification(response.message,'error');
                    }
                });
            }
        };
        ko.applyBindings(new app.EditGrid());
    })(app = this.app || {});
    </script>
}