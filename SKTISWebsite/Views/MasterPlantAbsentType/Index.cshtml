@using HMS.SKTIS.Application.Resources
@using HMS.SKTIS.Application.Resources.Views.MasterPlantAbsentType
@using SKTISWebsite.Helper

@{ Html.SetPageTitle(@MasterPlantAbsentType.PageTitle); }
<div data-bind="with: gridView" class="col-lg-12">
    <div class="col-lg-6">
        <div class="row">
            <label class="form-label col-lg-4">@MasterPlantAbsentType.lblFilterAbsentType</label>
            <div class="col-lg-3">
                <input id="txtAbsentTypeFilter" class="form-control" data-bind="value:$root.filters.AbsentTypeFilter" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="action-btn">
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.View.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.search">@CommonLabel.btnView</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Save.ToString())) {
                    <button type="button" class="btn btn-primary" data-bind="click:$root.saveData">@CommonLabel.btnSave</button>
                }
                @if (ViewBag.ButtonAccess.Contains(HMS.SKTIS.Core.Enums.ButtonName.Excel.ToString())) {
                    using (Html.BeginForm("GenerateExcel", "MasterPlantAbsentType", FormMethod.Post, new { @data_bind = "submit: $root.generateExcel" }))
                    {
                        <input type="hidden" name="absentType" />
                        <button type="submit" class="btn btn-primary">@CommonLabel.btnExcel</button>
                    }
                }
                @Html.Partial("GridViewPageSizeSelector")
            </div>
        </div>
    </div>
    <div id="master-item-location" class="table-overflow">
        <table class="table table-striped table-hover">
            <thead>
                <tr class="head">
                    <th rowspan="2" data-bind="click:sortBy.bind($data,'AbsentType'), css:sortCss('AbsentType', $data.sortExpression(), $data.sortOrder())">@MasterPlantAbsentType.lblTitleAbsentType</th>
                    <th colspan="2">@MasterPlantAbsentType.lblTitleAbsentCode</th>
                    <th rowspan="2" data-bind="click:sortBy.bind($data,'AlphaReplace'), css:sortCss('AlphaReplace', $data.sortExpression(), $data.sortOrder())">@MasterPlantAbsentType.lblTitleSuratPeriodeLalu</th>
                    <th rowspan="2" data-bind="click:sortBy.bind($data,'MaxDay'), css:sortCss('MaxDay', $data.sortExpression(), $data.sortOrder())" class="widthsmall">@MasterPlantAbsentType.lblTitleMaxDay</th>
                    <th colspan="2">@MasterPlantAbsentType.lblTitleActive</th>
                    <th rowspan="2" data-bind="click:sortBy.bind($data,'Calculation'), css:sortCss('Calculation', $data.sortExpression(), $data.sortOrder())">@MasterPlantAbsentType.lblTitleCalculation</th>
                    <th rowspan="2" data-bind="click:sortBy.bind($data,'Remark'), css:sortCss('Remark', $data.sortExpression(), $data.sortOrder())">@MasterPlantAbsentType.lblTitleRemark</th>
                    <th rowspan="2">@MasterPlantAbsentType.lblTitleUpdatedBy</th>
                    <th rowspan="2">@MasterPlantAbsentType.lblTitleUpdatedDate</th>
                </tr>
                <tr class="head">
                    <th data-bind="click:sortBy.bind($data,'SktAbsentCode'), css:sortCss('SktAbsentCode', $data.sortExpression(), $data.sortOrder())">@MasterPlantAbsentType.lblTitleSKT</th>
                    <th data-bind="click:sortBy.bind($data,'PayrollAbsentCode'), css:sortCss('PayrollAbsentCode', $data.sortExpression(), $data.sortOrder())">@MasterPlantAbsentType.lblTitlePayroll</th>
                    <th data-bind="click:sortBy.bind($data,'ActiveInAbsent'), css:sortCss('ActiveInAbsent', $data.sortExpression(), $data.sortOrder())">@MasterPlantAbsentType.lblTitleAbsent</th>
                    <th data-bind="click:sortBy.bind($data,'ActiveInProductionEntry'), css:sortCss('ActiveInProductionEntry', $data.sortExpression(), $data.sortOrder())">@MasterPlantAbsentType.lblTitleProductionEntry</th>
                </tr>
                <tr class="insertRow" data-bind="click: cancelInline.bind(),inlineAddProccess:[$data, $root.newData]">
                    <th><input data-bind="value:$root.newData.AbsentType, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="128" /></th>
                    <th><input data-bind="value:$root.newData.SktAbsentCode, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="11" /></th>
                    <th><input data-bind="value:$root.newData.PayrollAbsentCode, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="11" /></th>
                    <th><input data-bind="value:$root.newData.AlphaReplace, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="11" /></th>
                    <th class="widthsmall"><input data-bind="value:$root.newData.MaxDay, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="digit" min="0" maxlength="3" /></th>
                    <th class="center"><input type="checkbox" data-bind="checked:$root.newData.ActiveInAbsent" /></th>
                    <th class="center"><input type="checkbox" data-bind="checked:$root.newData.ActiveInProductionEntry" /></th>
                    <th><input data-bind="value:$root.newData.Calculation, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th><input data-bind="value:$root.newData.Remark, valueUpdate: 'afterkeydown'" class="form-control transparent" /></th>
                    <th><span data-bind="text:$root.newData.UpdatedBy"></span></th>
                    <th><span data-bind="text:$root.newData.UpdatedDate"></span></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: listDataItems">
                @*item template*@
                <tr data-bind="if: ($parent.editingRowIndex() !== $index()),
                                   click: $parent.editInline3.bind($data,$index())">
                    <td class="current"><span data-bind="text:$data.AbsentType"></span></td>
                    <td class="current"><span data-bind="text:$data.SktAbsentCode"></span></td>
                    <td class="current"><span data-bind="text:$data.PayrollAbsentCode"></span></td>
                    <td class="current"><span data-bind="text:$data.AlphaReplace"></span></td>
                    <td class="current"><span data-bind="text:$data.MaxDay"></span></td>
                    <td class="current center"><input type="checkbox" data-bind="checked:$data.ActiveInAbsent, enable: false" /></td>
                    <td class="current center"><input type="checkbox" data-bind="checked:$data.ActiveInProductionEntry, enable: false" /></td>
                    <td class="current"><span data-bind="text:$data.Calculation" /></td>
                    <td class="current"><span data-bind="text:$data.Remark"></span></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
                @*edit template*@
                <tr data-bind="validationOptions: {insertMessages: false, showTooltip:true, decorateInputElement: true, errorElementClass: 'input-error'}, inlineProccess:[$parent,$data],
                                   if:($parent.editingRowIndex() === $index()),
                                   click: $parent.selectRow.bind($data, $index()),
                                    event: {keydown:$parent.keydown}">
                    <td class="current"><input data-bind="value:$data.AbsentType, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="128" /></td>
                    <td class="current"><input data-bind="value:$data.SktAbsentCode, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="128" /></td>
                    <td class="current"><input data-bind="value:$data.PayrollAbsentCode, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="11" /></td>
                    <td class="current"><input data-bind="value:$data.AlphaReplace, valueUpdate: 'afterkeydown'" class="form-control transparent" maxlength="11" /></td>
                    <td class="current"><input data-bind="value:$data.MaxDay, valueUpdate: 'afterkeydown'" class="form-control transparent" type="number" data-sktis-validation="number" min="1" /></td>
                    <td class="current center"><input type="checkbox" data-bind="checked:$data.ActiveInAbsent" /></td>
                    <td class="current center"><input type="checkbox" data-bind="checked:$data.ActiveInProductionEntry" /></td>
                    <td class="current"><input data-bind="value:$data.Calculation, valueUpdate: 'afterkeydown'" class="form-control transparent" /></td>
                    <td class="current"><input data-bind="value:$data.Remark,tabToNext:[$parent,$data], valueUpdate:'afterkeydown'" class="form-control transparent" /></td>
                    <td><span data-bind="text:$data.UpdatedBy"></span></td>
                    <td><span data-bind="text:$data.UpdatedDate"></span></td>
                </tr>
            </tbody>
            <tbody data-bind="visible: !listDataItems().length">
                <tr>
                    <td colspan="11" class="empty-row-message"><div class="loader"></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div data-bind="if: (listDataItems() != null && listDataItems().length !== 0)">
        @Html.Partial("GridViewFooter")
    </div>

</div>

@section Scripts
{
    <script src="~/Scripts/common/app.GridViewModel.js" type="text/javascript"></script>
    <script type="text/javascript">

        (function (app) {
            app.EditGrid = function () {
                var self = this;

                //self.AbsentTypeFilter = ko.observable('');
                //self.AbsentType = ko.observable(self.AbsentTypeFilter());

                self.ExcelAbsentType = ko.observable('');

                self.newData = {
                    AbsentType: ko.observable(''),
                    SktAbsentCode: ko.observable(''),
                    PayrollAbsentCode: ko.observable(''),
                    AlphaReplace: ko.observable(''),
                    MaxDay: ko.observable(''),
                    ActiveInAbsent: ko.observable(true),
                    ActiveInProductionEntry: ko.observable(true),
                    Calculation: ko.observable(''),
                    Remark: ko.observable('')
                };

                self.filters = {
                    AbsentTypeFilter: ko.observable('')
                };

                //description: init gridView
                self.gridView = new app.GridViewModel({
                    Criteria: { PageSize: 10, PageIndex: 1, SortExpression: "UpdatedDate", SortOrder: "DESC", AbsentType: self.filters.AbsentTypeFilter },
                    DataSourceUrl:  @Html.BaseUrl("MasterPlantAbsentType/GetPlantAbsentTypes"),
                    InlineEdit: true,
                    InsertRowFocusedControlIndex: 1
                });

                // Field Validations
                self.gridView.applyValidationRules = function (entity) {
                    
                    self.RemoveNotification();
                    
                    entity.AbsentType.extend({
                        required: {
                            message: "<strong>Absent Type</strong> cannot be empty!"
                        }
                    });
                    entity.SktAbsentCode.extend({
                        required: {
                            message: "<strong>SKT Absent Code</strong> cannot be empty!"
                        }
                    });
                    //entity.PayrollAbsentCode.extend({
                    //    required: {
                    //        message: "<strong>Payroll Absent Code</strong> cannot be empty!"
                    //    }
                    //});
                    //entity.AlphaReplace.extend({
                    //    required: {
                    //        message: "<strong>Alpha Periode Lalu</strong> cannot be empty!"
                    //    }
                    //});
                    entity.MaxDay.extend({
                        required: {
                            message: "<strong>Max Day</strong> cannot be empty!"
                        }
                    });
                    entity.Remark.extend({
                        required: {
                            message: "<strong>Remark</strong> cannot be empty!",
                            onlyIf: function () { return ((! entity.ActiveInAbsent()) || (! entity.ActiveInProductionEntry())); }
                        }
                    });
                };

                // Reset Fields for Insert Row
                self.gridView.resetDefault = function (viewModel) {
                    viewModel.AbsentType('');
                    viewModel.SktAbsentCode('');
                    viewModel.PayrollAbsentCode('');
                    viewModel.AlphaReplace('');
                    viewModel.MaxDay('');
                    viewModel.ActiveInAbsent(true);
                    viewModel.ActiveInProductionEntry(true);
                    viewModel.Calculation('');
                    viewModel.Remark('');
                };

                //description: save bulk data
                self.saveData = function () {
                    if (self.gridView.editingRowIndex() !== -1)
                        return;

                    var datas = {
                        //"Parameters": { "LocationCode": self.LocationCode, "Process": self.filterProcess(), "Status": self.filterStatus() },
                        "New": self.gridView.listNewItems(),
                        "Edit": self.gridView.listEditItems()
                    };
                    datas = JSON.stringify(datas);

                    $.ajax({
                        url:  @Html.BaseUrl("MasterPlantAbsentType/SaveAllPlantAbsentTypes"),
                        type: 'POST',
                        contentType: 'application/json',
                        data: datas,
                        dataType: 'json',
                        success: function (data) {
                            console.log(data);
                            if (data.New) {
                                $.each(data.New, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Insert Master Plant Absent Type", "");
                                });
                            }

                            if (data.Edit) {
                                $.each(data.Edit, function (k, value) {
                                    if (value)
                                        SKTIS.Helper.ResponseNotification(value, "Edit Master Plant Absent Type", "");
                                });
                            }

                            self.gridView.sort('UpdatedDate', 'DESC');
                            self.gridView.listNewItems.removeAll();
                            self.gridView.listEditItems.removeAll();
                        }
                    });
                };

                self.generateExcel = function (formElement) {
                    console.log(self.ExcelAbsentType);
                    console.log(self.filters.AbsentTypeFilter());
                    $(formElement).find("input[name=absentType]").val(self.filters.AbsentTypeFilter());
                    console.log($('#absentType').val);
                    return true;
                };

                //description: load data
                self.search = function () {
                    $('.empty-row-message').html('<div class="loader"></div>'); // Reset New and Edit row
                    // Check whether New or Edit data is existing and not saved to database yet (on Ajax Action)
                    if (SKTIS.Checker.modifiedDataExistsForAjax([self.gridView.listNewItems, self.gridView.listEditItems]) == true) {
                        return;
                    } else {
                        self.gridView.listNewItems.removeAll();
                        self.gridView.listEditItems.removeAll();
                    }

                    self.gridView.search({}, function(response) {
                        if (response.status == 'KO') {
                            SKTIS.Helper.Notification(response.message, 'error');
                            $('.empty-row-message').html(response.message);
                        } else if (response.status == 'Empty') {

                            self.RemoveNotification();

                            //removed bug/47786
                            //SKTIS.Helper.Notification(response.message, 'warning');
                            $('.empty-row-message').html('@CommonLabel.lblDataEmpty');
                        }
                    });

                    self.RemoveNotification = function() {
                        if ($('#noty_top_layout_container').length > 0) {
                            $('#noty_top_layout_container').remove();
                        }
                    };
                };
                self.search();

                // Check whether New or Edit data is existing and not saved to database yet (on Request action)
                SKTIS.Checker.modifiedDataExists([self.gridView.listNewItems, self.gridView.listEditItems]);
            };
            ko.applyBindings(new app.EditGrid());
        })(app = this.app || {});
    </script>
}